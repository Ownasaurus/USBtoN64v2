
USBtoN64v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be30  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  0800bff8  0800bff8  0001bff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c1c0  0800c1c0  0001c1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c1c8  0800c1c8  0001c1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c1cc  0800c1cc  0001c1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000e4  20000000  0800c1d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c6c  200000e4  0800c2b4  000200e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000d50  0800c2b4  00020d50  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025fc6  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004c7f  00000000  00000000  000460da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000f88  00000000  00000000  0004ad60  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ed8  00000000  00000000  0004bce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009523  00000000  00000000  0004cbc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005c26  00000000  00000000  000560e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005bd09  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003f10  00000000  00000000  0005bd88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200000e4 	.word	0x200000e4
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800bfdc 	.word	0x0800bfdc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200000e8 	.word	0x200000e8
 8000200:	0800bfdc 	.word	0x0800bfdc

08000204 <my_wait_us_asm>:
.globl my_wait_us_asm
.type  my_wait_us_asm, %function

my_wait_us_asm:
WAIT_1_US:
    ADD     R1, R2, #0      // clock cycle 1
 8000204:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000208:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800020c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000210:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000214:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000218:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800021c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000220:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000224:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 10
 8000228:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800022c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000230:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000234:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000238:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800023c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000240:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000244:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000248:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800024c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 20
 8000250:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000254:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000258:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800025c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000260:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000264:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000268:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800026c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000270:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000274:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 30
 8000278:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800027c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000280:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000284:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000288:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800028c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000290:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000294:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000298:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800029c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 40
 80002a0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002a4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002a8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002ac:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002b0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002b4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002b8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002bc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002c0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002c4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 50
 80002c8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002cc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002d0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002d4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002d8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002dc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002e0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002e4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002e8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002ec:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 60
 80002f0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002f4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002f8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002fc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000300:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000304:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000308:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800030c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000310:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000314:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 70
 8000318:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800031c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000320:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000324:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000328:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800032c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000330:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000334:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000338:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800033c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 80
 8000340:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000344:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000348:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800034c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000350:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000354:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000358:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800035c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000360:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000364:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 90
 8000368:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800036c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000370:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000374:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000378:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800037c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000380:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000384:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000388:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800038c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 100
 8000390:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000394:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000398:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800039c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003a0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003a4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003a8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003ac:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003b0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003b4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 110
 80003b8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003bc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003c0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003c4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003c8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003cc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003d0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003d4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003d8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003dc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 120
 80003e0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003e4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003e8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003ec:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003f0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003f4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003f8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003fc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000400:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000404:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 130
 8000408:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800040c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000410:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000414:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000418:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800041c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000420:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000424:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000428:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800042c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 140
 8000430:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000434:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000438:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800043c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000440:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000444:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000448:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800044c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000450:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000454:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 150
 8000458:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800045c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000460:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000464:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000468:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800046c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000470:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000474:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000478:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800047c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 160
 8000480:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000484:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000488:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800048c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000490:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000494:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0		// 166
 8000498:	f102 0100 	add.w	r1, r2, #0

    SUBS    R0, R0, #1      // clock cycle 167
 800049c:	3801      	subs	r0, #1
    BGT     WAIT_1_US       // clock cycle 168
 800049e:	f73f aeb1 	bgt.w	8000204 <my_wait_us_asm>

    BX      LR      // return
 80004a2:	4770      	bx	lr

080004a4 <__aeabi_uldivmod>:
 80004a4:	b953      	cbnz	r3, 80004bc <__aeabi_uldivmod+0x18>
 80004a6:	b94a      	cbnz	r2, 80004bc <__aeabi_uldivmod+0x18>
 80004a8:	2900      	cmp	r1, #0
 80004aa:	bf08      	it	eq
 80004ac:	2800      	cmpeq	r0, #0
 80004ae:	bf1c      	itt	ne
 80004b0:	f04f 31ff 	movne.w	r1, #4294967295
 80004b4:	f04f 30ff 	movne.w	r0, #4294967295
 80004b8:	f000 b97a 	b.w	80007b0 <__aeabi_idiv0>
 80004bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80004c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004c4:	f000 f806 	bl	80004d4 <__udivmoddi4>
 80004c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004d0:	b004      	add	sp, #16
 80004d2:	4770      	bx	lr

080004d4 <__udivmoddi4>:
 80004d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004d8:	468c      	mov	ip, r1
 80004da:	460d      	mov	r5, r1
 80004dc:	4604      	mov	r4, r0
 80004de:	9e08      	ldr	r6, [sp, #32]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d151      	bne.n	8000588 <__udivmoddi4+0xb4>
 80004e4:	428a      	cmp	r2, r1
 80004e6:	4617      	mov	r7, r2
 80004e8:	d96d      	bls.n	80005c6 <__udivmoddi4+0xf2>
 80004ea:	fab2 fe82 	clz	lr, r2
 80004ee:	f1be 0f00 	cmp.w	lr, #0
 80004f2:	d00b      	beq.n	800050c <__udivmoddi4+0x38>
 80004f4:	f1ce 0c20 	rsb	ip, lr, #32
 80004f8:	fa01 f50e 	lsl.w	r5, r1, lr
 80004fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000500:	fa02 f70e 	lsl.w	r7, r2, lr
 8000504:	ea4c 0c05 	orr.w	ip, ip, r5
 8000508:	fa00 f40e 	lsl.w	r4, r0, lr
 800050c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000510:	0c25      	lsrs	r5, r4, #16
 8000512:	fbbc f8fa 	udiv	r8, ip, sl
 8000516:	fa1f f987 	uxth.w	r9, r7
 800051a:	fb0a cc18 	mls	ip, sl, r8, ip
 800051e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000522:	fb08 f309 	mul.w	r3, r8, r9
 8000526:	42ab      	cmp	r3, r5
 8000528:	d90a      	bls.n	8000540 <__udivmoddi4+0x6c>
 800052a:	19ed      	adds	r5, r5, r7
 800052c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000530:	f080 8123 	bcs.w	800077a <__udivmoddi4+0x2a6>
 8000534:	42ab      	cmp	r3, r5
 8000536:	f240 8120 	bls.w	800077a <__udivmoddi4+0x2a6>
 800053a:	f1a8 0802 	sub.w	r8, r8, #2
 800053e:	443d      	add	r5, r7
 8000540:	1aed      	subs	r5, r5, r3
 8000542:	b2a4      	uxth	r4, r4
 8000544:	fbb5 f0fa 	udiv	r0, r5, sl
 8000548:	fb0a 5510 	mls	r5, sl, r0, r5
 800054c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000550:	fb00 f909 	mul.w	r9, r0, r9
 8000554:	45a1      	cmp	r9, r4
 8000556:	d909      	bls.n	800056c <__udivmoddi4+0x98>
 8000558:	19e4      	adds	r4, r4, r7
 800055a:	f100 33ff 	add.w	r3, r0, #4294967295
 800055e:	f080 810a 	bcs.w	8000776 <__udivmoddi4+0x2a2>
 8000562:	45a1      	cmp	r9, r4
 8000564:	f240 8107 	bls.w	8000776 <__udivmoddi4+0x2a2>
 8000568:	3802      	subs	r0, #2
 800056a:	443c      	add	r4, r7
 800056c:	eba4 0409 	sub.w	r4, r4, r9
 8000570:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000574:	2100      	movs	r1, #0
 8000576:	2e00      	cmp	r6, #0
 8000578:	d061      	beq.n	800063e <__udivmoddi4+0x16a>
 800057a:	fa24 f40e 	lsr.w	r4, r4, lr
 800057e:	2300      	movs	r3, #0
 8000580:	6034      	str	r4, [r6, #0]
 8000582:	6073      	str	r3, [r6, #4]
 8000584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000588:	428b      	cmp	r3, r1
 800058a:	d907      	bls.n	800059c <__udivmoddi4+0xc8>
 800058c:	2e00      	cmp	r6, #0
 800058e:	d054      	beq.n	800063a <__udivmoddi4+0x166>
 8000590:	2100      	movs	r1, #0
 8000592:	e886 0021 	stmia.w	r6, {r0, r5}
 8000596:	4608      	mov	r0, r1
 8000598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059c:	fab3 f183 	clz	r1, r3
 80005a0:	2900      	cmp	r1, #0
 80005a2:	f040 808e 	bne.w	80006c2 <__udivmoddi4+0x1ee>
 80005a6:	42ab      	cmp	r3, r5
 80005a8:	d302      	bcc.n	80005b0 <__udivmoddi4+0xdc>
 80005aa:	4282      	cmp	r2, r0
 80005ac:	f200 80fa 	bhi.w	80007a4 <__udivmoddi4+0x2d0>
 80005b0:	1a84      	subs	r4, r0, r2
 80005b2:	eb65 0503 	sbc.w	r5, r5, r3
 80005b6:	2001      	movs	r0, #1
 80005b8:	46ac      	mov	ip, r5
 80005ba:	2e00      	cmp	r6, #0
 80005bc:	d03f      	beq.n	800063e <__udivmoddi4+0x16a>
 80005be:	e886 1010 	stmia.w	r6, {r4, ip}
 80005c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c6:	b912      	cbnz	r2, 80005ce <__udivmoddi4+0xfa>
 80005c8:	2701      	movs	r7, #1
 80005ca:	fbb7 f7f2 	udiv	r7, r7, r2
 80005ce:	fab7 fe87 	clz	lr, r7
 80005d2:	f1be 0f00 	cmp.w	lr, #0
 80005d6:	d134      	bne.n	8000642 <__udivmoddi4+0x16e>
 80005d8:	1beb      	subs	r3, r5, r7
 80005da:	0c3a      	lsrs	r2, r7, #16
 80005dc:	fa1f fc87 	uxth.w	ip, r7
 80005e0:	2101      	movs	r1, #1
 80005e2:	fbb3 f8f2 	udiv	r8, r3, r2
 80005e6:	0c25      	lsrs	r5, r4, #16
 80005e8:	fb02 3318 	mls	r3, r2, r8, r3
 80005ec:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80005f0:	fb0c f308 	mul.w	r3, ip, r8
 80005f4:	42ab      	cmp	r3, r5
 80005f6:	d907      	bls.n	8000608 <__udivmoddi4+0x134>
 80005f8:	19ed      	adds	r5, r5, r7
 80005fa:	f108 30ff 	add.w	r0, r8, #4294967295
 80005fe:	d202      	bcs.n	8000606 <__udivmoddi4+0x132>
 8000600:	42ab      	cmp	r3, r5
 8000602:	f200 80d1 	bhi.w	80007a8 <__udivmoddi4+0x2d4>
 8000606:	4680      	mov	r8, r0
 8000608:	1aed      	subs	r5, r5, r3
 800060a:	b2a3      	uxth	r3, r4
 800060c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000610:	fb02 5510 	mls	r5, r2, r0, r5
 8000614:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000618:	fb0c fc00 	mul.w	ip, ip, r0
 800061c:	45a4      	cmp	ip, r4
 800061e:	d907      	bls.n	8000630 <__udivmoddi4+0x15c>
 8000620:	19e4      	adds	r4, r4, r7
 8000622:	f100 33ff 	add.w	r3, r0, #4294967295
 8000626:	d202      	bcs.n	800062e <__udivmoddi4+0x15a>
 8000628:	45a4      	cmp	ip, r4
 800062a:	f200 80b8 	bhi.w	800079e <__udivmoddi4+0x2ca>
 800062e:	4618      	mov	r0, r3
 8000630:	eba4 040c 	sub.w	r4, r4, ip
 8000634:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000638:	e79d      	b.n	8000576 <__udivmoddi4+0xa2>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	f1ce 0420 	rsb	r4, lr, #32
 8000646:	fa05 f30e 	lsl.w	r3, r5, lr
 800064a:	fa07 f70e 	lsl.w	r7, r7, lr
 800064e:	fa20 f804 	lsr.w	r8, r0, r4
 8000652:	0c3a      	lsrs	r2, r7, #16
 8000654:	fa25 f404 	lsr.w	r4, r5, r4
 8000658:	ea48 0803 	orr.w	r8, r8, r3
 800065c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000660:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000664:	fb02 4411 	mls	r4, r2, r1, r4
 8000668:	fa1f fc87 	uxth.w	ip, r7
 800066c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000670:	fb01 f30c 	mul.w	r3, r1, ip
 8000674:	42ab      	cmp	r3, r5
 8000676:	fa00 f40e 	lsl.w	r4, r0, lr
 800067a:	d909      	bls.n	8000690 <__udivmoddi4+0x1bc>
 800067c:	19ed      	adds	r5, r5, r7
 800067e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000682:	f080 808a 	bcs.w	800079a <__udivmoddi4+0x2c6>
 8000686:	42ab      	cmp	r3, r5
 8000688:	f240 8087 	bls.w	800079a <__udivmoddi4+0x2c6>
 800068c:	3902      	subs	r1, #2
 800068e:	443d      	add	r5, r7
 8000690:	1aeb      	subs	r3, r5, r3
 8000692:	fa1f f588 	uxth.w	r5, r8
 8000696:	fbb3 f0f2 	udiv	r0, r3, r2
 800069a:	fb02 3310 	mls	r3, r2, r0, r3
 800069e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80006a2:	fb00 f30c 	mul.w	r3, r0, ip
 80006a6:	42ab      	cmp	r3, r5
 80006a8:	d907      	bls.n	80006ba <__udivmoddi4+0x1e6>
 80006aa:	19ed      	adds	r5, r5, r7
 80006ac:	f100 38ff 	add.w	r8, r0, #4294967295
 80006b0:	d26f      	bcs.n	8000792 <__udivmoddi4+0x2be>
 80006b2:	42ab      	cmp	r3, r5
 80006b4:	d96d      	bls.n	8000792 <__udivmoddi4+0x2be>
 80006b6:	3802      	subs	r0, #2
 80006b8:	443d      	add	r5, r7
 80006ba:	1aeb      	subs	r3, r5, r3
 80006bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006c0:	e78f      	b.n	80005e2 <__udivmoddi4+0x10e>
 80006c2:	f1c1 0720 	rsb	r7, r1, #32
 80006c6:	fa22 f807 	lsr.w	r8, r2, r7
 80006ca:	408b      	lsls	r3, r1
 80006cc:	fa05 f401 	lsl.w	r4, r5, r1
 80006d0:	ea48 0303 	orr.w	r3, r8, r3
 80006d4:	fa20 fe07 	lsr.w	lr, r0, r7
 80006d8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80006dc:	40fd      	lsrs	r5, r7
 80006de:	ea4e 0e04 	orr.w	lr, lr, r4
 80006e2:	fbb5 f9fc 	udiv	r9, r5, ip
 80006e6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80006ea:	fb0c 5519 	mls	r5, ip, r9, r5
 80006ee:	fa1f f883 	uxth.w	r8, r3
 80006f2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80006f6:	fb09 f408 	mul.w	r4, r9, r8
 80006fa:	42ac      	cmp	r4, r5
 80006fc:	fa02 f201 	lsl.w	r2, r2, r1
 8000700:	fa00 fa01 	lsl.w	sl, r0, r1
 8000704:	d908      	bls.n	8000718 <__udivmoddi4+0x244>
 8000706:	18ed      	adds	r5, r5, r3
 8000708:	f109 30ff 	add.w	r0, r9, #4294967295
 800070c:	d243      	bcs.n	8000796 <__udivmoddi4+0x2c2>
 800070e:	42ac      	cmp	r4, r5
 8000710:	d941      	bls.n	8000796 <__udivmoddi4+0x2c2>
 8000712:	f1a9 0902 	sub.w	r9, r9, #2
 8000716:	441d      	add	r5, r3
 8000718:	1b2d      	subs	r5, r5, r4
 800071a:	fa1f fe8e 	uxth.w	lr, lr
 800071e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000722:	fb0c 5510 	mls	r5, ip, r0, r5
 8000726:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800072a:	fb00 f808 	mul.w	r8, r0, r8
 800072e:	45a0      	cmp	r8, r4
 8000730:	d907      	bls.n	8000742 <__udivmoddi4+0x26e>
 8000732:	18e4      	adds	r4, r4, r3
 8000734:	f100 35ff 	add.w	r5, r0, #4294967295
 8000738:	d229      	bcs.n	800078e <__udivmoddi4+0x2ba>
 800073a:	45a0      	cmp	r8, r4
 800073c:	d927      	bls.n	800078e <__udivmoddi4+0x2ba>
 800073e:	3802      	subs	r0, #2
 8000740:	441c      	add	r4, r3
 8000742:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000746:	eba4 0408 	sub.w	r4, r4, r8
 800074a:	fba0 8902 	umull	r8, r9, r0, r2
 800074e:	454c      	cmp	r4, r9
 8000750:	46c6      	mov	lr, r8
 8000752:	464d      	mov	r5, r9
 8000754:	d315      	bcc.n	8000782 <__udivmoddi4+0x2ae>
 8000756:	d012      	beq.n	800077e <__udivmoddi4+0x2aa>
 8000758:	b156      	cbz	r6, 8000770 <__udivmoddi4+0x29c>
 800075a:	ebba 030e 	subs.w	r3, sl, lr
 800075e:	eb64 0405 	sbc.w	r4, r4, r5
 8000762:	fa04 f707 	lsl.w	r7, r4, r7
 8000766:	40cb      	lsrs	r3, r1
 8000768:	431f      	orrs	r7, r3
 800076a:	40cc      	lsrs	r4, r1
 800076c:	6037      	str	r7, [r6, #0]
 800076e:	6074      	str	r4, [r6, #4]
 8000770:	2100      	movs	r1, #0
 8000772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000776:	4618      	mov	r0, r3
 8000778:	e6f8      	b.n	800056c <__udivmoddi4+0x98>
 800077a:	4690      	mov	r8, r2
 800077c:	e6e0      	b.n	8000540 <__udivmoddi4+0x6c>
 800077e:	45c2      	cmp	sl, r8
 8000780:	d2ea      	bcs.n	8000758 <__udivmoddi4+0x284>
 8000782:	ebb8 0e02 	subs.w	lr, r8, r2
 8000786:	eb69 0503 	sbc.w	r5, r9, r3
 800078a:	3801      	subs	r0, #1
 800078c:	e7e4      	b.n	8000758 <__udivmoddi4+0x284>
 800078e:	4628      	mov	r0, r5
 8000790:	e7d7      	b.n	8000742 <__udivmoddi4+0x26e>
 8000792:	4640      	mov	r0, r8
 8000794:	e791      	b.n	80006ba <__udivmoddi4+0x1e6>
 8000796:	4681      	mov	r9, r0
 8000798:	e7be      	b.n	8000718 <__udivmoddi4+0x244>
 800079a:	4601      	mov	r1, r0
 800079c:	e778      	b.n	8000690 <__udivmoddi4+0x1bc>
 800079e:	3802      	subs	r0, #2
 80007a0:	443c      	add	r4, r7
 80007a2:	e745      	b.n	8000630 <__udivmoddi4+0x15c>
 80007a4:	4608      	mov	r0, r1
 80007a6:	e708      	b.n	80005ba <__udivmoddi4+0xe6>
 80007a8:	f1a8 0802 	sub.w	r8, r8, #2
 80007ac:	443d      	add	r5, r7
 80007ae:	e72b      	b.n	8000608 <__udivmoddi4+0x134>

080007b0 <__aeabi_idiv0>:
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop

080007b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007b8:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <HAL_Init+0x40>)
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <HAL_Init+0x40>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007c4:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <HAL_Init+0x40>)
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <HAL_Init+0x40>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d0:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <HAL_Init+0x40>)
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <HAL_Init+0x40>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007dc:	2003      	movs	r0, #3
 80007de:	f000 f947 	bl	8000a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007e2:	2001      	movs	r0, #1
 80007e4:	f000 f808 	bl	80007f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e8:	f00a fe9e 	bl	800b528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023c00 	.word	0x40023c00

080007f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_InitTick+0x54>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_InitTick+0x58>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000812:	fbb2 f3f3 	udiv	r3, r2, r3
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f95f 	bl	8000ada <HAL_SYSTICK_Config>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e00e      	b.n	8000844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b0f      	cmp	r3, #15
 800082a:	d80a      	bhi.n	8000842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800082c:	2200      	movs	r2, #0
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	f04f 30ff 	mov.w	r0, #4294967295
 8000834:	f000 f927 	bl	8000a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000838:	4a06      	ldr	r2, [pc, #24]	; (8000854 <HAL_InitTick+0x5c>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800083e:	2300      	movs	r3, #0
 8000840:	e000      	b.n	8000844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	2000007c 	.word	0x2000007c
 8000850:	20000004 	.word	0x20000004
 8000854:	20000000 	.word	0x20000000

08000858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_IncTick+0x20>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_IncTick+0x24>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4413      	add	r3, r2
 8000868:	4a04      	ldr	r2, [pc, #16]	; (800087c <HAL_IncTick+0x24>)
 800086a:	6013      	str	r3, [r2, #0]
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	20000004 	.word	0x20000004
 800087c:	20000120 	.word	0x20000120

08000880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return uwTick;
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <HAL_GetTick+0x14>)
 8000886:	681b      	ldr	r3, [r3, #0]
}
 8000888:	4618      	mov	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	20000120 	.word	0x20000120

08000898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a0:	f7ff ffee 	bl	8000880 <HAL_GetTick>
 80008a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b0:	d005      	beq.n	80008be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_Delay+0x40>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	4413      	add	r3, r2
 80008bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008be:	bf00      	nop
 80008c0:	f7ff ffde 	bl	8000880 <HAL_GetTick>
 80008c4:	4602      	mov	r2, r0
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	1ad2      	subs	r2, r2, r3
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d3f7      	bcc.n	80008c0 <HAL_Delay+0x28>
  {
  }
}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000004 	.word	0x20000004

080008dc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <NVIC_SetPriorityGrouping+0x44>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f8:	4013      	ands	r3, r2
 80008fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090e:	4a04      	ldr	r2, [pc, #16]	; (8000920 <NVIC_SetPriorityGrouping+0x44>)
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	60d3      	str	r3, [r2, #12]
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <NVIC_GetPriorityGrouping+0x18>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	0a1b      	lsrs	r3, r3, #8
 800092e:	f003 0307 	and.w	r3, r3, #7
}
 8000932:	4618      	mov	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800094a:	4909      	ldr	r1, [pc, #36]	; (8000970 <NVIC_EnableIRQ+0x30>)
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	095b      	lsrs	r3, r3, #5
 8000952:	79fa      	ldrb	r2, [r7, #7]
 8000954:	f002 021f 	and.w	r2, r2, #31
 8000958:	2001      	movs	r0, #1
 800095a:	fa00 f202 	lsl.w	r2, r0, r2
 800095e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000e100 	.word	0xe000e100

08000974 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000984:	2b00      	cmp	r3, #0
 8000986:	da0b      	bge.n	80009a0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000988:	490d      	ldr	r1, [pc, #52]	; (80009c0 <NVIC_SetPriority+0x4c>)
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	f003 030f 	and.w	r3, r3, #15
 8000990:	3b04      	subs	r3, #4
 8000992:	683a      	ldr	r2, [r7, #0]
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	0112      	lsls	r2, r2, #4
 8000998:	b2d2      	uxtb	r2, r2
 800099a:	440b      	add	r3, r1
 800099c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800099e:	e009      	b.n	80009b4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a0:	4908      	ldr	r1, [pc, #32]	; (80009c4 <NVIC_SetPriority+0x50>)
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	b2d2      	uxtb	r2, r2
 80009aa:	0112      	lsls	r2, r2, #4
 80009ac:	b2d2      	uxtb	r2, r2
 80009ae:	440b      	add	r3, r1
 80009b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000ed00 	.word	0xe000ed00
 80009c4:	e000e100 	.word	0xe000e100

080009c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b089      	sub	sp, #36	; 0x24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f1c3 0307 	rsb	r3, r3, #7
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	bf28      	it	cs
 80009e6:	2304      	movcs	r3, #4
 80009e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3304      	adds	r3, #4
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	d902      	bls.n	80009f8 <NVIC_EncodePriority+0x30>
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3b03      	subs	r3, #3
 80009f6:	e000      	b.n	80009fa <NVIC_EncodePriority+0x32>
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	2201      	movs	r2, #1
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	1e5a      	subs	r2, r3, #1
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	401a      	ands	r2, r3
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a0e:	2101      	movs	r1, #1
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	1e59      	subs	r1, r3, #1
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	4313      	orrs	r3, r2
         );
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3724      	adds	r7, #36	; 0x24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a3c:	d301      	bcc.n	8000a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00f      	b.n	8000a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <SysTick_Config+0x40>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4a:	210f      	movs	r1, #15
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	f7ff ff90 	bl	8000974 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <SysTick_Config+0x40>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <SysTick_Config+0x40>)
 8000a5c:	2207      	movs	r2, #7
 8000a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	e000e010 	.word	0xe000e010

08000a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ff2f 	bl	80008dc <NVIC_SetPriorityGrouping>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b086      	sub	sp, #24
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
 8000a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a98:	f7ff ff44 	bl	8000924 <NVIC_GetPriorityGrouping>
 8000a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	68b9      	ldr	r1, [r7, #8]
 8000aa2:	6978      	ldr	r0, [r7, #20]
 8000aa4:	f7ff ff90 	bl	80009c8 <NVIC_EncodePriority>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff5f 	bl	8000974 <NVIC_SetPriority>
}
 8000ab6:	bf00      	nop
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff37 	bl	8000940 <NVIC_EnableIRQ>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ffa2 	bl	8000a2c <SysTick_Config>
 8000ae8:	4603      	mov	r3, r0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	d106      	bne.n	8000b10 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b02:	4a09      	ldr	r2, [pc, #36]	; (8000b28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000b0e:	e005      	b.n	8000b1c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000b10:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f023 0304 	bic.w	r3, r3, #4
 8000b1a:	6013      	str	r3, [r2, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000e010 	.word	0xe000e010

08000b2c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000b30:	f000 f802 	bl	8000b38 <HAL_SYSTICK_Callback>
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
	...

08000b48 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000b5a:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <HAL_FLASH_Program+0xa0>)
 8000b5c:	7e1b      	ldrb	r3, [r3, #24]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d101      	bne.n	8000b66 <HAL_FLASH_Program+0x1e>
 8000b62:	2302      	movs	r3, #2
 8000b64:	e03b      	b.n	8000bde <HAL_FLASH_Program+0x96>
 8000b66:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <HAL_FLASH_Program+0xa0>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b70:	f000 f870 	bl	8000c54 <FLASH_WaitForLastOperation>
 8000b74:	4603      	mov	r3, r0
 8000b76:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000b78:	7dfb      	ldrb	r3, [r7, #23]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d12b      	bne.n	8000bd6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d105      	bne.n	8000b90 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000b84:	783b      	ldrb	r3, [r7, #0]
 8000b86:	4619      	mov	r1, r3
 8000b88:	68b8      	ldr	r0, [r7, #8]
 8000b8a:	f000 f915 	bl	8000db8 <FLASH_Program_Byte>
 8000b8e:	e016      	b.n	8000bbe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d105      	bne.n	8000ba2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000b96:	883b      	ldrh	r3, [r7, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	68b8      	ldr	r0, [r7, #8]
 8000b9c:	f000 f8e8 	bl	8000d70 <FLASH_Program_HalfWord>
 8000ba0:	e00d      	b.n	8000bbe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d105      	bne.n	8000bb4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	68b8      	ldr	r0, [r7, #8]
 8000bae:	f000 f8bd 	bl	8000d2c <FLASH_Program_Word>
 8000bb2:	e004      	b.n	8000bbe <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000bb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bb8:	68b8      	ldr	r0, [r7, #8]
 8000bba:	f000 f88b 	bl	8000cd4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000bbe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bc2:	f000 f847 	bl	8000c54 <FLASH_WaitForLastOperation>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_FLASH_Program+0xa4>)
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <HAL_FLASH_Program+0xa4>)
 8000bce:	691b      	ldr	r3, [r3, #16]
 8000bd0:	f023 0301 	bic.w	r3, r3, #1
 8000bd4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <HAL_FLASH_Program+0xa0>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	761a      	strb	r2, [r3, #24]
  
  return status;
 8000bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000124 	.word	0x20000124
 8000bec:	40023c00 	.word	0x40023c00

08000bf0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_FLASH_Unlock+0x38>)
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	da0b      	bge.n	8000c1a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_FLASH_Unlock+0x38>)
 8000c04:	4a09      	ldr	r2, [pc, #36]	; (8000c2c <HAL_FLASH_Unlock+0x3c>)
 8000c06:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <HAL_FLASH_Unlock+0x38>)
 8000c0a:	4a09      	ldr	r2, [pc, #36]	; (8000c30 <HAL_FLASH_Unlock+0x40>)
 8000c0c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_FLASH_Unlock+0x38>)
 8000c10:	691b      	ldr	r3, [r3, #16]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	da01      	bge.n	8000c1a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	40023c00 	.word	0x40023c00
 8000c2c:	45670123 	.word	0x45670123
 8000c30:	cdef89ab 	.word	0xcdef89ab

08000c34 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000c38:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <HAL_FLASH_Lock+0x1c>)
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_FLASH_Lock+0x1c>)
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c42:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	40023c00 	.word	0x40023c00

08000c54 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c60:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <FLASH_WaitForLastOperation+0x78>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000c66:	f7ff fe0b 	bl	8000880 <HAL_GetTick>
 8000c6a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000c6c:	e010      	b.n	8000c90 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c74:	d00c      	beq.n	8000c90 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d007      	beq.n	8000c8c <FLASH_WaitForLastOperation+0x38>
 8000c7c:	f7ff fe00 	bl	8000880 <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	1ad2      	subs	r2, r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d901      	bls.n	8000c90 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	e019      	b.n	8000cc4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <FLASH_WaitForLastOperation+0x7c>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d1e8      	bne.n	8000c6e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <FLASH_WaitForLastOperation+0x7c>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d002      	beq.n	8000cae <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <FLASH_WaitForLastOperation+0x7c>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <FLASH_WaitForLastOperation+0x7c>)
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000cba:	f000 f89f 	bl	8000dfc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e000      	b.n	8000cc4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
  
}  
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000124 	.word	0x20000124
 8000cd0:	40023c00 	.word	0x40023c00

08000cd4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000cd4:	b4f0      	push	{r4, r5, r6, r7}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000ce0:	4a11      	ldr	r2, [pc, #68]	; (8000d28 <FLASH_Program_DoubleWord+0x54>)
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <FLASH_Program_DoubleWord+0x54>)
 8000ce4:	691b      	ldr	r3, [r3, #16]
 8000ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000cec:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <FLASH_Program_DoubleWord+0x54>)
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <FLASH_Program_DoubleWord+0x54>)
 8000cf0:	691b      	ldr	r3, [r3, #16]
 8000cf2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000cf6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000cf8:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <FLASH_Program_DoubleWord+0x54>)
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <FLASH_Program_DoubleWord+0x54>)
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	683a      	ldr	r2, [r7, #0]
 8000d08:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	461a      	mov	r2, r3
 8000d10:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000d14:	0025      	movs	r5, r4
 8000d16:	2600      	movs	r6, #0
 8000d18:	462b      	mov	r3, r5
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bcf0      	pop	{r4, r5, r6, r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40023c00 	.word	0x40023c00

08000d2c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000d36:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <FLASH_Program_Word+0x40>)
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <FLASH_Program_Word+0x40>)
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d40:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <FLASH_Program_Word+0x40>)
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <FLASH_Program_Word+0x40>)
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000d4e:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <FLASH_Program_Word+0x40>)
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <FLASH_Program_Word+0x40>)
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	601a      	str	r2, [r3, #0]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	40023c00 	.word	0x40023c00

08000d70 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <FLASH_Program_HalfWord+0x44>)
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <FLASH_Program_HalfWord+0x44>)
 8000d80:	691b      	ldr	r3, [r3, #16]
 8000d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <FLASH_Program_HalfWord+0x44>)
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <FLASH_Program_HalfWord+0x44>)
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <FLASH_Program_HalfWord+0x44>)
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <FLASH_Program_HalfWord+0x44>)
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	887a      	ldrh	r2, [r7, #2]
 8000da4:	801a      	strh	r2, [r3, #0]
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40023c00 	.word	0x40023c00

08000db8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000dc4:	4a0c      	ldr	r2, [pc, #48]	; (8000df8 <FLASH_Program_Byte+0x40>)
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <FLASH_Program_Byte+0x40>)
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000dd0:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <FLASH_Program_Byte+0x40>)
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <FLASH_Program_Byte+0x40>)
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <FLASH_Program_Byte+0x40>)
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <FLASH_Program_Byte+0x40>)
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	78fa      	ldrb	r2, [r7, #3]
 8000de8:	701a      	strb	r2, [r3, #0]
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40023c00 	.word	0x40023c00

08000dfc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000e00:	4b2f      	ldr	r3, [pc, #188]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	f003 0310 	and.w	r3, r3, #16
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d008      	beq.n	8000e1e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e0c:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000e0e:	69db      	ldr	r3, [r3, #28]
 8000e10:	f043 0310 	orr.w	r3, r3, #16
 8000e14:	4a2b      	ldr	r2, [pc, #172]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000e16:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000e18:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000e1a:	2210      	movs	r2, #16
 8000e1c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000e1e:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	f003 0320 	and.w	r3, r3, #32
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d008      	beq.n	8000e3c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000e2a:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	f043 0308 	orr.w	r3, r3, #8
 8000e32:	4a24      	ldr	r2, [pc, #144]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000e34:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000e36:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000e38:	2220      	movs	r2, #32
 8000e3a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000e3c:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d008      	beq.n	8000e5a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000e48:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000e4a:	69db      	ldr	r3, [r3, #28]
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	4a1c      	ldr	r2, [pc, #112]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000e52:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000e56:	2240      	movs	r2, #64	; 0x40
 8000e58:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d008      	beq.n	8000e78 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f043 0302 	orr.w	r3, r3, #2
 8000e6e:	4a15      	ldr	r2, [pc, #84]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000e70:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000e72:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d009      	beq.n	8000e98 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000e86:	69db      	ldr	r3, [r3, #28]
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000e8e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000e92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e96:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d008      	beq.n	8000eb6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000ea6:	69db      	ldr	r3, [r3, #28]
 8000ea8:	f043 0320 	orr.w	r3, r3, #32
 8000eac:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000eae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	60da      	str	r2, [r3, #12]
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	40023c00 	.word	0x40023c00
 8000ec4:	20000124 	.word	0x20000124

08000ec8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <HAL_FLASHEx_Erase+0xd8>)
 8000edc:	7e1b      	ldrb	r3, [r3, #24]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d101      	bne.n	8000ee6 <HAL_FLASHEx_Erase+0x1e>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e058      	b.n	8000f98 <HAL_FLASHEx_Erase+0xd0>
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <HAL_FLASHEx_Erase+0xd8>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000eec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ef0:	f7ff feb0 	bl	8000c54 <FLASH_WaitForLastOperation>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d148      	bne.n	8000f90 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d115      	bne.n	8000f3a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	f000 f844 	bl	8000fa8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f20:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f24:	f7ff fe96 	bl	8000c54 <FLASH_WaitForLastOperation>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8000f2c:	4a1d      	ldr	r2, [pc, #116]	; (8000fa4 <HAL_FLASHEx_Erase+0xdc>)
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <HAL_FLASHEx_Erase+0xdc>)
 8000f30:	691b      	ldr	r3, [r3, #16]
 8000f32:	f023 0304 	bic.w	r3, r3, #4
 8000f36:	6113      	str	r3, [r2, #16]
 8000f38:	e028      	b.n	8000f8c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	e01c      	b.n	8000f7c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	4619      	mov	r1, r3
 8000f4a:	68b8      	ldr	r0, [r7, #8]
 8000f4c:	f000 f850 	bl	8000ff0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f54:	f7ff fe7e 	bl	8000c54 <FLASH_WaitForLastOperation>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8000f5c:	4a11      	ldr	r2, [pc, #68]	; (8000fa4 <HAL_FLASHEx_Erase+0xdc>)
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_FLASHEx_Erase+0xdc>)
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8000f66:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	601a      	str	r2, [r3, #0]
          break;
 8000f74:	e00a      	b.n	8000f8c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	441a      	add	r2, r3
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d8da      	bhi.n	8000f42 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8000f8c:	f000 f878 	bl	8001080 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_FLASHEx_Erase+0xd8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	761a      	strb	r2, [r3, #24]

  return status;
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000124 	.word	0x20000124
 8000fa4:	40023c00 	.word	0x40023c00

08000fa8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <FLASH_MassErase+0x44>)
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <FLASH_MassErase+0x44>)
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <FLASH_MassErase+0x44>)
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <FLASH_MassErase+0x44>)
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	f043 0304 	orr.w	r3, r3, #4
 8000fca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8000fcc:	4907      	ldr	r1, [pc, #28]	; (8000fec <FLASH_MassErase+0x44>)
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <FLASH_MassErase+0x44>)
 8000fd0:	691a      	ldr	r2, [r3, #16]
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fdc:	610b      	str	r3, [r1, #16]
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40023c00 	.word	0x40023c00

08000ff0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d102      	bne.n	800100c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e010      	b.n	800102e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d103      	bne.n	800101a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001012:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e009      	b.n	800102e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d103      	bne.n	8001028 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	e002      	b.n	800102e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001028:	f44f 7340 	mov.w	r3, #768	; 0x300
 800102c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800102e:	4a13      	ldr	r2, [pc, #76]	; (800107c <FLASH_Erase_Sector+0x8c>)
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <FLASH_Erase_Sector+0x8c>)
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001038:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800103a:	4910      	ldr	r1, [pc, #64]	; (800107c <FLASH_Erase_Sector+0x8c>)
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <FLASH_Erase_Sector+0x8c>)
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001046:	4a0d      	ldr	r2, [pc, #52]	; (800107c <FLASH_Erase_Sector+0x8c>)
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <FLASH_Erase_Sector+0x8c>)
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001050:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001052:	490a      	ldr	r1, [pc, #40]	; (800107c <FLASH_Erase_Sector+0x8c>)
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <FLASH_Erase_Sector+0x8c>)
 8001056:	691a      	ldr	r2, [r3, #16]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	4313      	orrs	r3, r2
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001064:	4a05      	ldr	r2, [pc, #20]	; (800107c <FLASH_Erase_Sector+0x8c>)
 8001066:	4b05      	ldr	r3, [pc, #20]	; (800107c <FLASH_Erase_Sector+0x8c>)
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106e:	6113      	str	r3, [r2, #16]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40023c00 	.word	0x40023c00

08001080 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001084:	4b20      	ldr	r3, [pc, #128]	; (8001108 <FLASH_FlushCaches+0x88>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800108c:	2b00      	cmp	r3, #0
 800108e:	d017      	beq.n	80010c0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001090:	4a1d      	ldr	r2, [pc, #116]	; (8001108 <FLASH_FlushCaches+0x88>)
 8001092:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <FLASH_FlushCaches+0x88>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800109a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800109c:	4a1a      	ldr	r2, [pc, #104]	; (8001108 <FLASH_FlushCaches+0x88>)
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4a17      	ldr	r2, [pc, #92]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010b2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b4:	4a14      	ldr	r2, [pc, #80]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010be:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d017      	beq.n	80010fc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80010cc:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010d6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80010d8:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4a08      	ldr	r2, [pc, #32]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010ee:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80010f0:	4a05      	ldr	r2, [pc, #20]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010f2:	4b05      	ldr	r3, [pc, #20]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010fa:	6013      	str	r3, [r2, #0]
  }
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40023c00 	.word	0x40023c00

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	e165      	b.n	80013f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001128:	2201      	movs	r2, #1
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	429a      	cmp	r2, r3
 8001142:	f040 8154 	bne.w	80013ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b02      	cmp	r3, #2
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x4a>
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b12      	cmp	r3, #18
 8001154:	d123      	bne.n	800119e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	08da      	lsrs	r2, r3, #3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3208      	adds	r2, #8
 800115e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	220f      	movs	r2, #15
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	691a      	ldr	r2, [r3, #16]
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	08da      	lsrs	r2, r3, #3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3208      	adds	r2, #8
 8001198:	69b9      	ldr	r1, [r7, #24]
 800119a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	2203      	movs	r2, #3
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0203 	and.w	r2, r3, #3
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d00b      	beq.n	80011f2 <HAL_GPIO_Init+0xe6>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d007      	beq.n	80011f2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011e6:	2b11      	cmp	r3, #17
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b12      	cmp	r3, #18
 80011f0:	d130      	bne.n	8001254 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	2203      	movs	r2, #3
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	68da      	ldr	r2, [r3, #12]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001228:	2201      	movs	r2, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	091b      	lsrs	r3, r3, #4
 800123e:	f003 0201 	and.w	r2, r3, #1
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 80ae 	beq.w	80013ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4a5c      	ldr	r2, [pc, #368]	; (8001408 <HAL_GPIO_Init+0x2fc>)
 8001298:	4b5b      	ldr	r3, [pc, #364]	; (8001408 <HAL_GPIO_Init+0x2fc>)
 800129a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a0:	6453      	str	r3, [r2, #68]	; 0x44
 80012a2:	4b59      	ldr	r3, [pc, #356]	; (8001408 <HAL_GPIO_Init+0x2fc>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ae:	4a57      	ldr	r2, [pc, #348]	; (800140c <HAL_GPIO_Init+0x300>)
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	3302      	adds	r3, #2
 80012b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	220f      	movs	r2, #15
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4e      	ldr	r2, [pc, #312]	; (8001410 <HAL_GPIO_Init+0x304>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d025      	beq.n	8001326 <HAL_GPIO_Init+0x21a>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4d      	ldr	r2, [pc, #308]	; (8001414 <HAL_GPIO_Init+0x308>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d01f      	beq.n	8001322 <HAL_GPIO_Init+0x216>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4c      	ldr	r2, [pc, #304]	; (8001418 <HAL_GPIO_Init+0x30c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d019      	beq.n	800131e <HAL_GPIO_Init+0x212>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4b      	ldr	r2, [pc, #300]	; (800141c <HAL_GPIO_Init+0x310>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0x20e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4a      	ldr	r2, [pc, #296]	; (8001420 <HAL_GPIO_Init+0x314>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00d      	beq.n	8001316 <HAL_GPIO_Init+0x20a>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a49      	ldr	r2, [pc, #292]	; (8001424 <HAL_GPIO_Init+0x318>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d007      	beq.n	8001312 <HAL_GPIO_Init+0x206>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a48      	ldr	r2, [pc, #288]	; (8001428 <HAL_GPIO_Init+0x31c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_GPIO_Init+0x202>
 800130a:	2306      	movs	r3, #6
 800130c:	e00c      	b.n	8001328 <HAL_GPIO_Init+0x21c>
 800130e:	2307      	movs	r3, #7
 8001310:	e00a      	b.n	8001328 <HAL_GPIO_Init+0x21c>
 8001312:	2305      	movs	r3, #5
 8001314:	e008      	b.n	8001328 <HAL_GPIO_Init+0x21c>
 8001316:	2304      	movs	r3, #4
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x21c>
 800131a:	2303      	movs	r3, #3
 800131c:	e004      	b.n	8001328 <HAL_GPIO_Init+0x21c>
 800131e:	2302      	movs	r3, #2
 8001320:	e002      	b.n	8001328 <HAL_GPIO_Init+0x21c>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <HAL_GPIO_Init+0x21c>
 8001326:	2300      	movs	r3, #0
 8001328:	69fa      	ldr	r2, [r7, #28]
 800132a:	f002 0203 	and.w	r2, r2, #3
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	4093      	lsls	r3, r2
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001338:	4934      	ldr	r1, [pc, #208]	; (800140c <HAL_GPIO_Init+0x300>)
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	3302      	adds	r3, #2
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001346:	4b39      	ldr	r3, [pc, #228]	; (800142c <HAL_GPIO_Init+0x320>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800136a:	4a30      	ldr	r2, [pc, #192]	; (800142c <HAL_GPIO_Init+0x320>)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001370:	4b2e      	ldr	r3, [pc, #184]	; (800142c <HAL_GPIO_Init+0x320>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001394:	4a25      	ldr	r2, [pc, #148]	; (800142c <HAL_GPIO_Init+0x320>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139a:	4b24      	ldr	r3, [pc, #144]	; (800142c <HAL_GPIO_Init+0x320>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013be:	4a1b      	ldr	r2, [pc, #108]	; (800142c <HAL_GPIO_Init+0x320>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_GPIO_Init+0x320>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e8:	4a10      	ldr	r2, [pc, #64]	; (800142c <HAL_GPIO_Init+0x320>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3301      	adds	r3, #1
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	2b0f      	cmp	r3, #15
 80013f8:	f67f ae96 	bls.w	8001128 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013fc:	bf00      	nop
 80013fe:	3724      	adds	r7, #36	; 0x24
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	40023800 	.word	0x40023800
 800140c:	40013800 	.word	0x40013800
 8001410:	40020000 	.word	0x40020000
 8001414:	40020400 	.word	0x40020400
 8001418:	40020800 	.word	0x40020800
 800141c:	40020c00 	.word	0x40020c00
 8001420:	40021000 	.word	0x40021000
 8001424:	40021400 	.word	0x40021400
 8001428:	40021800 	.word	0x40021800
 800142c:	40013c00 	.word	0x40013c00

08001430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]
 800143c:	4613      	mov	r3, r2
 800143e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001440:	787b      	ldrb	r3, [r7, #1]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800144c:	e003      	b.n	8001456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800144e:	887b      	ldrh	r3, [r7, #2]
 8001450:	041a      	lsls	r2, r3, #16
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	619a      	str	r2, [r3, #24]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001470:	695a      	ldr	r2, [r3, #20]
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	4013      	ands	r3, r2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d006      	beq.n	8001488 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800147a:	4a05      	ldr	r2, [pc, #20]	; (8001490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f806 	bl	8001494 <HAL_GPIO_EXTI_Callback>
  }
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40013c00 	.word	0x40013c00

08001494 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{ 
 80014aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ac:	b08d      	sub	sp, #52	; 0x34
 80014ae:	af0a      	add	r7, sp, #40	; 0x28
 80014b0:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if(hhcd == NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e03e      	b.n	800153a <HAL_HCD_Init+0x90>
  }
  
  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
  
  hhcd->State = HAL_HCD_STATE_BUSY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2203      	movs	r2, #3
 80014c0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_HCD_MspInit(hhcd);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f00a f9b5 	bl	800b834 <HAL_HCD_MspInit>
  
  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 feac 	bl	800422c <USB_DisableGlobalInt>
  
  /* Init the Core (common init.) */
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	687e      	ldr	r6, [r7, #4]
 80014dc:	466d      	mov	r5, sp
 80014de:	f106 0410 	add.w	r4, r6, #16
 80014e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80014f2:	1d33      	adds	r3, r6, #4
 80014f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f6:	6838      	ldr	r0, [r7, #0]
 80014f8:	f002 fe36 	bl	8004168 <USB_CoreInit>
  
  /* Force Host Mode*/
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2101      	movs	r1, #1
 8001502:	4618      	mov	r0, r3
 8001504:	f002 fea3 	bl	800424e <USB_SetCurrentMode>
  
  /* Init Host */
  USB_HostInit(hhcd->Instance, hhcd->Init);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	687e      	ldr	r6, [r7, #4]
 8001510:	466d      	mov	r5, sp
 8001512:	f106 0410 	add.w	r4, r6, #16
 8001516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001522:	e885 0003 	stmia.w	r5, {r0, r1}
 8001526:	1d33      	adds	r3, r6, #4
 8001528:	cb0e      	ldmia	r3, {r1, r2, r3}
 800152a:	6838      	ldr	r0, [r7, #0]
 800152c:	f002 ffb2 	bl	8004494 <USB_HostInit>
  
  hhcd->State= HAL_HCD_STATE_READY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001542 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001542:	b590      	push	{r4, r7, lr}
 8001544:	b089      	sub	sp, #36	; 0x24
 8001546:	af04      	add	r7, sp, #16
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	4608      	mov	r0, r1
 800154c:	4611      	mov	r1, r2
 800154e:	461a      	mov	r2, r3
 8001550:	4603      	mov	r3, r0
 8001552:	70fb      	strb	r3, [r7, #3]
 8001554:	460b      	mov	r3, r1
 8001556:	70bb      	strb	r3, [r7, #2]
 8001558:	4613      	mov	r3, r2
 800155a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]
  
  __HAL_LOCK(hhcd); 
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <HAL_HCD_HC_Init+0x2c>
 800156a:	2302      	movs	r3, #2
 800156c:	e06c      	b.n	8001648 <HAL_HCD_HC_Init+0x106>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001576:	78fa      	ldrb	r2, [r7, #3]
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	440b      	add	r3, r1
 8001584:	3338      	adds	r3, #56	; 0x38
 8001586:	787a      	ldrb	r2, [r7, #1]
 8001588:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800158a:	78fa      	ldrb	r2, [r7, #3]
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	440b      	add	r3, r1
 8001598:	3340      	adds	r3, #64	; 0x40
 800159a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800159c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800159e:	78fa      	ldrb	r2, [r7, #3]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	440b      	add	r3, r1
 80015ac:	3339      	adds	r3, #57	; 0x39
 80015ae:	78fa      	ldrb	r2, [r7, #3]
 80015b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015b2:	78fa      	ldrb	r2, [r7, #3]
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	440b      	add	r3, r1
 80015c0:	333f      	adds	r3, #63	; 0x3f
 80015c2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 80015c8:	78fa      	ldrb	r2, [r7, #3]
 80015ca:	78bb      	ldrb	r3, [r7, #2]
 80015cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015d0:	b2d8      	uxtb	r0, r3
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	440b      	add	r3, r1
 80015de:	333a      	adds	r3, #58	; 0x3a
 80015e0:	4602      	mov	r2, r0
 80015e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 80015e4:	78fa      	ldrb	r2, [r7, #3]
 80015e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	09db      	lsrs	r3, r3, #7
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	440b      	add	r3, r1
 80015fe:	333b      	adds	r3, #59	; 0x3b
 8001600:	4602      	mov	r2, r0
 8001602:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].speed = speed;
 8001604:	78fa      	ldrb	r2, [r7, #3]
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	440b      	add	r3, r1
 8001612:	333c      	adds	r3, #60	; 0x3c
 8001614:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001618:	701a      	strb	r2, [r3, #0]
  
  status =  USB_HC_Init(hhcd->Instance, 
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	787c      	ldrb	r4, [r7, #1]
 8001620:	78ba      	ldrb	r2, [r7, #2]
 8001622:	78f9      	ldrb	r1, [r7, #3]
 8001624:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001626:	9302      	str	r3, [sp, #8]
 8001628:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	4623      	mov	r3, r4
 8001636:	f003 f885 	bl	8004744 <USB_HC_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd); 
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  
  return status;
 8001646:	7bfb      	ldrb	r3, [r7, #15]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	bd90      	pop	{r4, r7, pc}

08001650 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]
  
  __HAL_LOCK(hhcd);   
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001666:	2b01      	cmp	r3, #1
 8001668:	d101      	bne.n	800166e <HAL_HCD_HC_Halt+0x1e>
 800166a:	2302      	movs	r3, #2
 800166c:	e00f      	b.n	800168e <HAL_HCD_HC_Halt+0x3e>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  USB_HC_Halt(hhcd->Instance, ch_num);   
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	78fa      	ldrb	r2, [r7, #3]
 800167c:	4611      	mov	r1, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f003 faa9 	bl	8004bd6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  
  return status;
 800168c:	7bfb      	ldrb	r3, [r7, #15]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,  
                                           uint8_t token, 
                                           uint8_t* pbuff, 
                                           uint16_t length,
                                           uint8_t do_ping) 
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	4608      	mov	r0, r1
 80016a2:	4611      	mov	r1, r2
 80016a4:	461a      	mov	r2, r3
 80016a6:	4603      	mov	r3, r0
 80016a8:	70fb      	strb	r3, [r7, #3]
 80016aa:	460b      	mov	r3, r1
 80016ac:	70bb      	strb	r3, [r7, #2]
 80016ae:	4613      	mov	r3, r2
 80016b0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016b2:	78fa      	ldrb	r2, [r7, #3]
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	440b      	add	r3, r1
 80016c0:	333b      	adds	r3, #59	; 0x3b
 80016c2:	78ba      	ldrb	r2, [r7, #2]
 80016c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type; 
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	440b      	add	r3, r1
 80016d4:	333f      	adds	r3, #63	; 0x3f
 80016d6:	787a      	ldrb	r2, [r7, #1]
 80016d8:	701a      	strb	r2, [r3, #0]
  
  if(token == 0)
 80016da:	7c3b      	ldrb	r3, [r7, #16]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10a      	bne.n	80016f6 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016e0:	78fa      	ldrb	r2, [r7, #3]
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	440b      	add	r3, r1
 80016ee:	3342      	adds	r3, #66	; 0x42
 80016f0:	2203      	movs	r2, #3
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	e009      	b.n	800170a <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	440b      	add	r3, r1
 8001704:	3342      	adds	r3, #66	; 0x42
 8001706:	2202      	movs	r2, #2
 8001708:	701a      	strb	r2, [r3, #0]
  }
  
  /* Manage Data Toggle */
  switch(ep_type)
 800170a:	787b      	ldrb	r3, [r7, #1]
 800170c:	2b03      	cmp	r3, #3
 800170e:	f200 8104 	bhi.w	800191a <HAL_HCD_HC_SubmitRequest+0x282>
 8001712:	a201      	add	r2, pc, #4	; (adr r2, 8001718 <HAL_HCD_HC_SubmitRequest+0x80>)
 8001714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001718:	08001729 	.word	0x08001729
 800171c:	080018ff 	.word	0x080018ff
 8001720:	080017c1 	.word	0x080017c1
 8001724:	08001875 	.word	0x08001875
  {
  case EP_TYPE_CTRL:
    if((token == 1) && (direction == 0)) /*send data */
 8001728:	7c3b      	ldrb	r3, [r7, #16]
 800172a:	2b01      	cmp	r3, #1
 800172c:	f040 80f2 	bne.w	8001914 <HAL_HCD_HC_SubmitRequest+0x27c>
 8001730:	78bb      	ldrb	r3, [r7, #2]
 8001732:	2b00      	cmp	r3, #0
 8001734:	f040 80ee 	bne.w	8001914 <HAL_HCD_HC_SubmitRequest+0x27c>
    {
      if (length == 0)
 8001738:	8b3b      	ldrh	r3, [r7, #24]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d109      	bne.n	8001752 <HAL_HCD_HC_SubmitRequest+0xba>
      { /* For Status OUT stage, Length==0, Status Out PID = 1 */
        hhcd->hc[ch_num].toggle_out = 1;
 800173e:	78fa      	ldrb	r2, [r7, #3]
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	440b      	add	r3, r1
 800174c:	3351      	adds	r3, #81	; 0x51
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
      }
      
      /* Set the Data Toggle bit as per the Flag */
      if (hhcd->hc[ch_num].toggle_out == 0)
 8001752:	78fa      	ldrb	r2, [r7, #3]
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	3351      	adds	r3, #81	; 0x51
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10a      	bne.n	800177e <HAL_HCD_HC_SubmitRequest+0xe6>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 8001768:	78fa      	ldrb	r2, [r7, #3]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	440b      	add	r3, r1
 8001776:	3342      	adds	r3, #66	; 0x42
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
 800177c:	e009      	b.n	8001792 <HAL_HCD_HC_SubmitRequest+0xfa>
      }
      else
      { /* Put the PID 1 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800177e:	78fa      	ldrb	r2, [r7, #3]
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	3342      	adds	r3, #66	; 0x42
 800178e:	2202      	movs	r2, #2
 8001790:	701a      	strb	r2, [r3, #0]
      }
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8001792:	78fa      	ldrb	r2, [r7, #3]
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	440b      	add	r3, r1
 80017a0:	335c      	adds	r3, #92	; 0x5c
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	f000 80b5 	beq.w	8001914 <HAL_HCD_HC_SubmitRequest+0x27c>
      {
        hhcd->hc[ch_num].do_ping = do_ping;
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	440b      	add	r3, r1
 80017b8:	333d      	adds	r3, #61	; 0x3d
 80017ba:	7f3a      	ldrb	r2, [r7, #28]
 80017bc:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 80017be:	e0a9      	b.n	8001914 <HAL_HCD_HC_SubmitRequest+0x27c>
  
  case EP_TYPE_BULK:
    if(direction == 0)
 80017c0:	78bb      	ldrb	r3, [r7, #2]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d135      	bne.n	8001832 <HAL_HCD_HC_SubmitRequest+0x19a>
    {
      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0)
 80017c6:	78fa      	ldrb	r2, [r7, #3]
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	440b      	add	r3, r1
 80017d4:	3351      	adds	r3, #81	; 0x51
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10a      	bne.n	80017f2 <HAL_HCD_HC_SubmitRequest+0x15a>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	440b      	add	r3, r1
 80017ea:	3342      	adds	r3, #66	; 0x42
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	e009      	b.n	8001806 <HAL_HCD_HC_SubmitRequest+0x16e>
      }
      else
      { /* Put the PID 1 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017f2:	78fa      	ldrb	r2, [r7, #3]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	440b      	add	r3, r1
 8001800:	3342      	adds	r3, #66	; 0x42
 8001802:	2202      	movs	r2, #2
 8001804:	701a      	strb	r2, [r3, #0]
      }
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	440b      	add	r3, r1
 8001814:	335c      	adds	r3, #92	; 0x5c
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d07d      	beq.n	8001918 <HAL_HCD_HC_SubmitRequest+0x280>
      {
        hhcd->hc[ch_num].do_ping = do_ping;
 800181c:	78fa      	ldrb	r2, [r7, #3]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	440b      	add	r3, r1
 800182a:	333d      	adds	r3, #61	; 0x3d
 800182c:	7f3a      	ldrb	r2, [r7, #28]
 800182e:	701a      	strb	r2, [r3, #0]
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
      }
    }
    
    break;
 8001830:	e072      	b.n	8001918 <HAL_HCD_HC_SubmitRequest+0x280>
      if( hhcd->hc[ch_num].toggle_in == 0)
 8001832:	78fa      	ldrb	r2, [r7, #3]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	440b      	add	r3, r1
 8001840:	3350      	adds	r3, #80	; 0x50
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10a      	bne.n	800185e <HAL_HCD_HC_SubmitRequest+0x1c6>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001848:	78fa      	ldrb	r2, [r7, #3]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	440b      	add	r3, r1
 8001856:	3342      	adds	r3, #66	; 0x42
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
    break;
 800185c:	e05c      	b.n	8001918 <HAL_HCD_HC_SubmitRequest+0x280>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800185e:	78fa      	ldrb	r2, [r7, #3]
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	440b      	add	r3, r1
 800186c:	3342      	adds	r3, #66	; 0x42
 800186e:	2202      	movs	r2, #2
 8001870:	701a      	strb	r2, [r3, #0]
    break;
 8001872:	e051      	b.n	8001918 <HAL_HCD_HC_SubmitRequest+0x280>
  case EP_TYPE_INTR:
    if(direction == 0)
 8001874:	78bb      	ldrb	r3, [r7, #2]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d120      	bne.n	80018bc <HAL_HCD_HC_SubmitRequest+0x224>
    {
      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0)
 800187a:	78fa      	ldrb	r2, [r7, #3]
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	440b      	add	r3, r1
 8001888:	3351      	adds	r3, #81	; 0x51
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10a      	bne.n	80018a6 <HAL_HCD_HC_SubmitRequest+0x20e>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 8001890:	78fa      	ldrb	r2, [r7, #3]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	440b      	add	r3, r1
 800189e:	3342      	adds	r3, #66	; 0x42
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
      else
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
      }
    }
    break;
 80018a4:	e039      	b.n	800191a <HAL_HCD_HC_SubmitRequest+0x282>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018a6:	78fa      	ldrb	r2, [r7, #3]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	440b      	add	r3, r1
 80018b4:	3342      	adds	r3, #66	; 0x42
 80018b6:	2202      	movs	r2, #2
 80018b8:	701a      	strb	r2, [r3, #0]
    break;
 80018ba:	e02e      	b.n	800191a <HAL_HCD_HC_SubmitRequest+0x282>
      if( hhcd->hc[ch_num].toggle_in == 0)
 80018bc:	78fa      	ldrb	r2, [r7, #3]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	440b      	add	r3, r1
 80018ca:	3350      	adds	r3, #80	; 0x50
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10a      	bne.n	80018e8 <HAL_HCD_HC_SubmitRequest+0x250>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018d2:	78fa      	ldrb	r2, [r7, #3]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	440b      	add	r3, r1
 80018e0:	3342      	adds	r3, #66	; 0x42
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
    break;
 80018e6:	e018      	b.n	800191a <HAL_HCD_HC_SubmitRequest+0x282>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018e8:	78fa      	ldrb	r2, [r7, #3]
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	3342      	adds	r3, #66	; 0x42
 80018f8:	2202      	movs	r2, #2
 80018fa:	701a      	strb	r2, [r3, #0]
    break;
 80018fc:	e00d      	b.n	800191a <HAL_HCD_HC_SubmitRequest+0x282>
    
  case EP_TYPE_ISOC: 
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	440b      	add	r3, r1
 800190c:	3342      	adds	r3, #66	; 0x42
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
    break;  
 8001912:	e002      	b.n	800191a <HAL_HCD_HC_SubmitRequest+0x282>
    break;
 8001914:	bf00      	nop
 8001916:	e000      	b.n	800191a <HAL_HCD_HC_SubmitRequest+0x282>
    break;
 8001918:	bf00      	nop
  }
  
  hhcd->hc[ch_num].xfer_buff = pbuff;
 800191a:	78fa      	ldrb	r2, [r7, #3]
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	440b      	add	r3, r1
 8001928:	3344      	adds	r3, #68	; 0x44
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800192e:	78fa      	ldrb	r2, [r7, #3]
 8001930:	8b39      	ldrh	r1, [r7, #24]
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4403      	add	r3, r0
 800193e:	3348      	adds	r3, #72	; 0x48
 8001940:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 8001942:	78fa      	ldrb	r2, [r7, #3]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	440b      	add	r3, r1
 8001950:	335c      	adds	r3, #92	; 0x5c
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0;
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	440b      	add	r3, r1
 8001964:	334c      	adds	r3, #76	; 0x4c
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800196a:	78fa      	ldrb	r2, [r7, #3]
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	440b      	add	r3, r1
 8001978:	3339      	adds	r3, #57	; 0x39
 800197a:	78fa      	ldrb	r2, [r7, #3]
 800197c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800197e:	78fa      	ldrb	r2, [r7, #3]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	440b      	add	r3, r1
 800198c:	335d      	adds	r3, #93	; 0x5d
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
  
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	78fa      	ldrb	r2, [r7, #3]
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	3338      	adds	r3, #56	; 0x38
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	18d1      	adds	r1, r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	f002 ffc5 	bl	800493c <USB_HC_StartXfer>
 80019b2:	4603      	mov	r3, r0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	613b      	str	r3, [r7, #16]
  uint32_t i = 0U , interrupt = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
  
  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f002 fd19 	bl	800440e <USB_GetMode>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b01      	cmp	r3, #1
 80019e0:	f040 80e9 	bne.w	8001bb6 <HAL_HCD_IRQHandler+0x1fa>
  {
    /* Avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f002 fcfb 	bl	80043e4 <USB_ReadInterrupts>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80df 	beq.w	8001bb4 <HAL_HCD_IRQHandler+0x1f8>
    {
      return;
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 fcf2 	bl	80043e4 <USB_ReadInterrupts>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a0a:	d104      	bne.n	8001a16 <HAL_HCD_IRQHandler+0x5a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a14:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 fce2 	bl	80043e4 <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a2a:	d104      	bne.n	8001a36 <HAL_HCD_IRQHandler+0x7a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a34:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 fcd2 	bl	80043e4 <USB_ReadInterrupts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a4a:	d104      	bne.n	8001a56 <HAL_HCD_IRQHandler+0x9a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a54:	615a      	str	r2, [r3, #20]
    }   
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 fcc2 	bl	80043e4 <USB_ReadInterrupts>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d103      	bne.n	8001a72 <HAL_HCD_IRQHandler+0xb6>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	615a      	str	r2, [r3, #20]
    }     
    
    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f002 fcb4 	bl	80043e4 <USB_ReadInterrupts>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a86:	d118      	bne.n	8001aba <HAL_HCD_IRQHandler+0xfe>
    {
      
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a8e:	461a      	mov	r2, r3
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001a9c:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f009 ff22 	bl	800b8e8 <HAL_HCD_Disconnect_Callback>
      USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f002 fd92 	bl	80045d4 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ab8:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 fc90 	bl	80043e4 <USB_ReadInterrupts>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ace:	d102      	bne.n	8001ad6 <HAL_HCD_IRQHandler+0x11a>
    {
      HCD_Port_IRQHandler (hhcd);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f001 f805 	bl	8002ae0 <HCD_Port_IRQHandler>
    }
    
    /* Handle Host SOF Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f002 fc82 	bl	80043e4 <USB_ReadInterrupts>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d106      	bne.n	8001af8 <HAL_HCD_IRQHandler+0x13c>
    {
      HAL_HCD_SOF_Callback(hhcd);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f009 fee0 	bl	800b8b0 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2208      	movs	r2, #8
 8001af6:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host channel Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f002 fc71 	bl	80043e4 <USB_ReadInterrupts>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b0c:	d134      	bne.n	8001b78 <HAL_HCD_IRQHandler+0x1bc>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f003 f850 	bl	8004bb8 <USB_HC_ReadInterrupt>
 8001b18:	60f8      	str	r0, [r7, #12]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	e021      	b.n	8001b64 <HAL_HCD_IRQHandler+0x1a8>
      {
        if (interrupt & (1U << i))
 8001b20:	2201      	movs	r2, #1
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	409a      	lsls	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d017      	beq.n	8001b5e <HAL_HCD_IRQHandler+0x1a2>
        {
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	015a      	lsls	r2, r3, #5
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4413      	add	r3, r2
 8001b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d006      	beq.n	8001b52 <HAL_HCD_IRQHandler+0x196>
          {
            HCD_HC_IN_IRQHandler(hhcd, i);
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	4619      	mov	r1, r3
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f8b5 	bl	8001cba <HCD_HC_IN_IRQHandler>
 8001b50:	e005      	b.n	8001b5e <HAL_HCD_IRQHandler+0x1a2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler (hhcd, i);
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	4619      	mov	r1, r3
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 fbee 	bl	800233a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3301      	adds	r3, #1
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d8d8      	bhi.n	8001b20 <HAL_HCD_IRQHandler+0x164>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b76:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Rx Queue Level Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f002 fc31 	bl	80043e4 <USB_ReadInterrupts>
 8001b82:	4603      	mov	r3, r0
 8001b84:	f003 0310 	and.w	r3, r3, #16
 8001b88:	2b10      	cmp	r3, #16
 8001b8a:	d114      	bne.n	8001bb6 <HAL_HCD_IRQHandler+0x1fa>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	6992      	ldr	r2, [r2, #24]
 8001b96:	f022 0210 	bic.w	r2, r2, #16
 8001b9a:	619a      	str	r2, [r3, #24]
      
      HCD_RXQLVL_IRQHandler (hhcd);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 feed 	bl	800297c <HCD_RXQLVL_IRQHandler>
      
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	6992      	ldr	r2, [r2, #24]
 8001bac:	f042 0210 	orr.w	r2, r2, #16
 8001bb0:	619a      	str	r2, [r3, #24]
 8001bb2:	e000      	b.n	8001bb6 <HAL_HCD_IRQHandler+0x1fa>
      return;
 8001bb4:	bf00      	nop
    }
  }
}
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{ 
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd); 
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_HCD_Start+0x16>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e013      	b.n	8001bfa <HAL_HCD_Start+0x3e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f002 fb13 	bl	800420a <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1U);  
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2101      	movs	r1, #1
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fd51 	bl	8004692 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd); 
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{ 
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd); 
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_HCD_Stop+0x16>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e00d      	b.n	8001c34 <HAL_HCD_Stop+0x32>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f003 f8fb 	bl	8004e20 <USB_StopHost>
  __HAL_UNLOCK(hhcd); 
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f002 fcfd 	bl	8004648 <USB_ResetPort>
 8001c4e:	4603      	mov	r3, r0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/ 
  *            URB_ERROR/  
  *            URB_STALL      
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c64:	78fa      	ldrb	r2, [r7, #3]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	440b      	add	r3, r1
 8001c72:	335c      	adds	r3, #92	; 0x5c
 8001c74:	781b      	ldrb	r3, [r3, #0]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f002 fd49 	bl	8004726 <USB_GetCurrentFrame>
 8001c94:	4603      	mov	r3, r0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f002 fd28 	bl	8004700 <USB_GetHostSpeed>
 8001cb0:	4603      	mov	r3, r0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval None
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cba:	b590      	push	{r4, r7, lr}
 8001cbc:	b085      	sub	sp, #20
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	015a      	lsls	r2, r3, #5
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d01a      	beq.n	8001d1c <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	015a      	lsls	r2, r3, #5
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4413      	add	r3, r2
 8001cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	015a      	lsls	r2, r3, #5
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d04:	4619      	mov	r1, r3
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	015a      	lsls	r2, r3, #5
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	60cb      	str	r3, [r1, #12]
 8001d1a:	e094      	b.n	8001e46 <HCD_HC_IN_IRQHandler+0x18c>
  }  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	015a      	lsls	r2, r3, #5
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 0320 	and.w	r3, r3, #32
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <HCD_HC_IN_IRQHandler+0x8c>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	015a      	lsls	r2, r3, #5
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4413      	add	r3, r2
 8001d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2320      	movs	r3, #32
 8001d42:	6093      	str	r3, [r2, #8]
 8001d44:	e07f      	b.n	8001e46 <HCD_HC_IN_IRQHandler+0x18c>
  }
  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	015a      	lsls	r2, r3, #5
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d034      	beq.n	8001dc6 <HCD_HC_IN_IRQHandler+0x10c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001d5c:	78fb      	ldrb	r3, [r7, #3]
 8001d5e:	015a      	lsls	r2, r3, #5
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d68:	4619      	mov	r1, r3
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	60cb      	str	r3, [r1, #12]
    hhcd->hc[chnum].state = HC_STALL;
 8001d7e:	78fa      	ldrb	r2, [r7, #3]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	440b      	add	r3, r1
 8001d8c:	335d      	adds	r3, #93	; 0x5d
 8001d8e:	2205      	movs	r2, #5
 8001d90:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9e:	461a      	mov	r2, r3
 8001da0:	2310      	movs	r3, #16
 8001da2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	015a      	lsls	r2, r3, #5
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db0:	461a      	mov	r2, r3
 8001db2:	2308      	movs	r3, #8
 8001db4:	6093      	str	r3, [r2, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	78fa      	ldrb	r2, [r7, #3]
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f002 ff09 	bl	8004bd6 <USB_HC_Halt>
 8001dc4:	e03f      	b.n	8001e46 <HCD_HC_IN_IRQHandler+0x18c>
  }
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d034      	beq.n	8001e46 <HCD_HC_IN_IRQHandler+0x18c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	015a      	lsls	r2, r3, #5
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4413      	add	r3, r2
 8001de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de8:	4619      	mov	r1, r3
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	78fa      	ldrb	r2, [r7, #3]
 8001e04:	4611      	mov	r1, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f002 fee5 	bl	8004bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 8001e0c:	78fb      	ldrb	r3, [r7, #3]
 8001e0e:	015a      	lsls	r2, r3, #5
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e18:	461a      	mov	r2, r3
 8001e1a:	2310      	movs	r3, #16
 8001e1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001e1e:	78fa      	ldrb	r2, [r7, #3]
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	440b      	add	r3, r1
 8001e2c:	335d      	adds	r3, #93	; 0x5d
 8001e2e:	2208      	movs	r2, #8
 8001e30:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	015a      	lsls	r2, r3, #5
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e44:	6093      	str	r3, [r2, #8]
  }    
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8001e46:	78fb      	ldrb	r3, [r7, #3]
 8001e48:	015a      	lsls	r2, r3, #5
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d022      	beq.n	8001ea2 <HCD_HC_IN_IRQHandler+0x1e8>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e68:	4619      	mov	r1, r3
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	015a      	lsls	r2, r3, #5
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4413      	add	r3, r2
 8001e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	78fa      	ldrb	r2, [r7, #3]
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f002 fea5 	bl	8004bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	015a      	lsls	r2, r3, #5
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e98:	461a      	mov	r2, r3
 8001e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e9e:	6093      	str	r3, [r2, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
      tmpreg |= USB_OTG_HCCHAR_CHENA;
      USBx_HC(chnum)->HCCHAR = tmpreg;
    }
  }
}
 8001ea0:	e247      	b.n	8002332 <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	015a      	lsls	r2, r3, #5
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 80c0 	beq.w	800203a <HCD_HC_IN_IRQHandler+0x380>
    if (hhcd->Init.dma_enable)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d01b      	beq.n	8001efa <HCD_HC_IN_IRQHandler+0x240>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8001ec2:	78fa      	ldrb	r2, [r7, #3]
 8001ec4:	78f9      	ldrb	r1, [r7, #3]
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4403      	add	r3, r0
 8001ed2:	3348      	adds	r3, #72	; 0x48
 8001ed4:	6819      	ldr	r1, [r3, #0]
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	0158      	lsls	r0, r3, #5
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4403      	add	r3, r0
 8001ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8001ee8:	1ac9      	subs	r1, r1, r3
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4403      	add	r3, r0
 8001ef6:	334c      	adds	r3, #76	; 0x4c
 8001ef8:	6019      	str	r1, [r3, #0]
    hhcd->hc[chnum].state = HC_XFRC;
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	440b      	add	r3, r1
 8001f08:	335d      	adds	r3, #93	; 0x5d
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001f0e:	78fa      	ldrb	r2, [r7, #3]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	440b      	add	r3, r1
 8001f1c:	3358      	adds	r3, #88	; 0x58
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2301      	movs	r3, #1
 8001f32:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001f34:	78fa      	ldrb	r2, [r7, #3]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	440b      	add	r3, r1
 8001f42:	333f      	adds	r3, #63	; 0x3f
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00a      	beq.n	8001f60 <HCD_HC_IN_IRQHandler+0x2a6>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001f4a:	78fa      	ldrb	r2, [r7, #3]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	440b      	add	r3, r1
 8001f58:	333f      	adds	r3, #63	; 0x3f
 8001f5a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d121      	bne.n	8001fa4 <HCD_HC_IN_IRQHandler+0x2ea>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	015a      	lsls	r2, r3, #5
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	015a      	lsls	r2, r3, #5
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4413      	add	r3, r2
 8001f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f043 0302 	orr.w	r3, r3, #2
 8001f80:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	78fa      	ldrb	r2, [r7, #3]
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f002 fe23 	bl	8004bd6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	015a      	lsls	r2, r3, #5
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4413      	add	r3, r2
 8001f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	2310      	movs	r3, #16
 8001fa0:	6093      	str	r3, [r2, #8]
 8001fa2:	e033      	b.n	800200c <HCD_HC_IN_IRQHandler+0x352>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001fa4:	78fa      	ldrb	r2, [r7, #3]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	440b      	add	r3, r1
 8001fb2:	333f      	adds	r3, #63	; 0x3f
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d128      	bne.n	800200c <HCD_HC_IN_IRQHandler+0x352>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	015a      	lsls	r2, r3, #5
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4413      	add	r3, r2
 8001fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fda:	600b      	str	r3, [r1, #0]
      hhcd->hc[chnum].urb_state = URB_DONE; 
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	440b      	add	r3, r1
 8001fea:	335c      	adds	r3, #92	; 0x5c
 8001fec:	2201      	movs	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001ff0:	78fa      	ldrb	r2, [r7, #3]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	440b      	add	r3, r1
 8001ffe:	335c      	adds	r3, #92	; 0x5c
 8002000:	781a      	ldrb	r2, [r3, #0]
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	4619      	mov	r1, r3
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f009 fc7c 	bl	800b904 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[chnum].toggle_in ^= 1U;
 800200c:	78fa      	ldrb	r2, [r7, #3]
 800200e:	78f9      	ldrb	r1, [r7, #3]
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	460b      	mov	r3, r1
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4403      	add	r3, r0
 800201c:	3350      	adds	r3, #80	; 0x50
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	f083 0301 	eor.w	r3, r3, #1
 8002024:	b2d8      	uxtb	r0, r3
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	440b      	add	r3, r1
 8002032:	3350      	adds	r3, #80	; 0x50
 8002034:	4602      	mov	r2, r0
 8002036:	701a      	strb	r2, [r3, #0]
}
 8002038:	e17b      	b.n	8002332 <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4413      	add	r3, r2
 8002042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80b7 	beq.w	80021c0 <HCD_HC_IN_IRQHandler+0x506>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	015a      	lsls	r2, r3, #5
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4413      	add	r3, r2
 800205a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205e:	4619      	mov	r1, r3
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	015a      	lsls	r2, r3, #5
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f023 0302 	bic.w	r3, r3, #2
 8002072:	60cb      	str	r3, [r1, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8002074:	78fa      	ldrb	r2, [r7, #3]
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	440b      	add	r3, r1
 8002082:	335d      	adds	r3, #93	; 0x5d
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d10a      	bne.n	80020a0 <HCD_HC_IN_IRQHandler+0x3e6>
      hhcd->hc[chnum].urb_state  = URB_DONE;      
 800208a:	78fa      	ldrb	r2, [r7, #3]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	440b      	add	r3, r1
 8002098:	335c      	adds	r3, #92	; 0x5c
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
 800209e:	e077      	b.n	8002190 <HCD_HC_IN_IRQHandler+0x4d6>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 80020a0:	78fa      	ldrb	r2, [r7, #3]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	440b      	add	r3, r1
 80020ae:	335d      	adds	r3, #93	; 0x5d
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b05      	cmp	r3, #5
 80020b4:	d10a      	bne.n	80020cc <HCD_HC_IN_IRQHandler+0x412>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	440b      	add	r3, r1
 80020c4:	335c      	adds	r3, #92	; 0x5c
 80020c6:	2205      	movs	r2, #5
 80020c8:	701a      	strb	r2, [r3, #0]
 80020ca:	e061      	b.n	8002190 <HCD_HC_IN_IRQHandler+0x4d6>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80020cc:	78fa      	ldrb	r2, [r7, #3]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	440b      	add	r3, r1
 80020da:	335d      	adds	r3, #93	; 0x5d
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b06      	cmp	r3, #6
 80020e0:	d00a      	beq.n	80020f8 <HCD_HC_IN_IRQHandler+0x43e>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	440b      	add	r3, r1
 80020f0:	335d      	adds	r3, #93	; 0x5d
 80020f2:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d14b      	bne.n	8002190 <HCD_HC_IN_IRQHandler+0x4d6>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 80020f8:	78fa      	ldrb	r2, [r7, #3]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	440b      	add	r3, r1
 8002106:	3358      	adds	r3, #88	; 0x58
 8002108:	6819      	ldr	r1, [r3, #0]
 800210a:	1c48      	adds	r0, r1, #1
 800210c:	687c      	ldr	r4, [r7, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4423      	add	r3, r4
 8002118:	3358      	adds	r3, #88	; 0x58
 800211a:	6018      	str	r0, [r3, #0]
 800211c:	2903      	cmp	r1, #3
 800211e:	d914      	bls.n	800214a <HCD_HC_IN_IRQHandler+0x490>
        hhcd->hc[chnum].ErrCnt = 0U;
 8002120:	78fa      	ldrb	r2, [r7, #3]
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	440b      	add	r3, r1
 800212e:	3358      	adds	r3, #88	; 0x58
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002134:	78fa      	ldrb	r2, [r7, #3]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	440b      	add	r3, r1
 8002142:	335c      	adds	r3, #92	; 0x5c
 8002144:	2204      	movs	r2, #4
 8002146:	701a      	strb	r2, [r3, #0]
 8002148:	e009      	b.n	800215e <HCD_HC_IN_IRQHandler+0x4a4>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	335c      	adds	r3, #92	; 0x5c
 800215a:	2202      	movs	r2, #2
 800215c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(chnum)->HCCHAR;
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4413      	add	r3, r2
 8002166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002174:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800217c:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4413      	add	r3, r2
 8002186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218a:	461a      	mov	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4413      	add	r3, r2
 8002198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219c:	461a      	mov	r2, r3
 800219e:	2302      	movs	r3, #2
 80021a0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	440b      	add	r3, r1
 80021b0:	335c      	adds	r3, #92	; 0x5c
 80021b2:	781a      	ldrb	r2, [r3, #0]
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	4619      	mov	r1, r3
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f009 fba3 	bl	800b904 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80021be:	e0b8      	b.n	8002332 <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d03d      	beq.n	8002252 <HCD_HC_IN_IRQHandler+0x598>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e2:	4619      	mov	r1, r3
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	015a      	lsls	r2, r3, #5
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4413      	add	r3, r2
 80021ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f043 0302 	orr.w	r3, r3, #2
 80021f6:	60cb      	str	r3, [r1, #12]
    hhcd->hc[chnum].ErrCnt++;
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	440b      	add	r3, r1
 8002206:	3358      	adds	r3, #88	; 0x58
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	1c59      	adds	r1, r3, #1
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4403      	add	r3, r0
 8002218:	3358      	adds	r3, #88	; 0x58
 800221a:	6019      	str	r1, [r3, #0]
    hhcd->hc[chnum].state = HC_XACTERR;
 800221c:	78fa      	ldrb	r2, [r7, #3]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	440b      	add	r3, r1
 800222a:	335d      	adds	r3, #93	; 0x5d
 800222c:	2206      	movs	r2, #6
 800222e:	701a      	strb	r2, [r3, #0]
    USB_HC_Halt(hhcd->Instance, chnum);     
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	4611      	mov	r1, r2
 8002238:	4618      	mov	r0, r3
 800223a:	f002 fccc 	bl	8004bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4413      	add	r3, r2
 8002246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224a:	461a      	mov	r2, r3
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	6093      	str	r3, [r2, #8]
}
 8002250:	e06f      	b.n	8002332 <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	015a      	lsls	r2, r3, #5
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4413      	add	r3, r2
 800225a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0310 	and.w	r3, r3, #16
 8002264:	2b00      	cmp	r3, #0
 8002266:	d064      	beq.n	8002332 <HCD_HC_IN_IRQHandler+0x678>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	333f      	adds	r3, #63	; 0x3f
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d117      	bne.n	80022ae <HCD_HC_IN_IRQHandler+0x5f4>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4413      	add	r3, r2
 8002286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228a:	4619      	mov	r1, r3
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4413      	add	r3, r2
 8002294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	f043 0302 	orr.w	r3, r3, #2
 800229e:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f002 fc94 	bl	8004bd6 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 80022ae:	78fa      	ldrb	r2, [r7, #3]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	335d      	adds	r3, #93	; 0x5d
 80022be:	2203      	movs	r2, #3
 80022c0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ce:	461a      	mov	r2, r3
 80022d0:	2310      	movs	r3, #16
 80022d2:	6093      	str	r3, [r2, #8]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 80022d4:	78fa      	ldrb	r2, [r7, #3]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	440b      	add	r3, r1
 80022e2:	333f      	adds	r3, #63	; 0x3f
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00a      	beq.n	8002300 <HCD_HC_IN_IRQHandler+0x646>
              (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	440b      	add	r3, r1
 80022f8:	333f      	adds	r3, #63	; 0x3f
 80022fa:	781b      	ldrb	r3, [r3, #0]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d118      	bne.n	8002332 <HCD_HC_IN_IRQHandler+0x678>
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	015a      	lsls	r2, r3, #5
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4413      	add	r3, r2
 8002308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002316:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800231e:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4413      	add	r3, r2
 8002328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232c:	461a      	mov	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	6013      	str	r3, [r2, #0]
}
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	bd90      	pop	{r4, r7, pc}

0800233a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval None
  */
static void HCD_HC_OUT_IRQHandler  (HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800233a:	b590      	push	{r4, r7, lr}
 800233c:	b085      	sub	sp, #20
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	460b      	mov	r3, r1
 8002344:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	60fb      	str	r3, [r7, #12]
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4413      	add	r3, r2
 8002354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	2b00      	cmp	r3, #0
 8002360:	d01a      	beq.n	8002398 <HCD_HC_OUT_IRQHandler+0x5e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002362:	78fb      	ldrb	r3, [r7, #3]
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4413      	add	r3, r2
 800236a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236e:	461a      	mov	r2, r3
 8002370:	2304      	movs	r3, #4
 8002372:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	4619      	mov	r1, r3
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	015a      	lsls	r2, r3, #5
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4413      	add	r3, r2
 800238a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	60cb      	str	r3, [r1, #12]
    }
    
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
  }
} 
 8002396:	e2ed      	b.n	8002974 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d041      	beq.n	8002432 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ba:	461a      	mov	r2, r3
 80023bc:	2320      	movs	r3, #32
 80023be:	6093      	str	r3, [r2, #8]
    if( hhcd->hc[chnum].do_ping == 1U)
 80023c0:	78fa      	ldrb	r2, [r7, #3]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	440b      	add	r3, r1
 80023ce:	333d      	adds	r3, #61	; 0x3d
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	f040 82ce 	bne.w	8002974 <HCD_HC_OUT_IRQHandler+0x63a>
      hhcd->hc[chnum].state = HC_NYET;     
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	440b      	add	r3, r1
 80023e6:	335d      	adds	r3, #93	; 0x5d
 80023e8:	2204      	movs	r2, #4
 80023ea:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f8:	4619      	mov	r1, r3
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	015a      	lsls	r2, r3, #5
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4413      	add	r3, r2
 8002402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	78fa      	ldrb	r2, [r7, #3]
 8002414:	4611      	mov	r1, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f002 fbdd 	bl	8004bd6 <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800241c:	78fa      	ldrb	r2, [r7, #3]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	440b      	add	r3, r1
 800242a:	335c      	adds	r3, #92	; 0x5c
 800242c:	2202      	movs	r2, #2
 800242e:	701a      	strb	r2, [r3, #0]
} 
 8002430:	e2a0      	b.n	8002974 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4413      	add	r3, r2
 800243a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	d035      	beq.n	80024b4 <HCD_HC_OUT_IRQHandler+0x17a>
    hhcd->hc[chnum].state = HC_NYET;
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	440b      	add	r3, r1
 8002456:	335d      	adds	r3, #93	; 0x5d
 8002458:	2204      	movs	r2, #4
 800245a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt= 0U;    
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	440b      	add	r3, r1
 800246a:	3358      	adds	r3, #88	; 0x58
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4413      	add	r3, r2
 8002478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247c:	4619      	mov	r1, r3
 800247e:	78fb      	ldrb	r3, [r7, #3]
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4413      	add	r3, r2
 8002486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	4611      	mov	r1, r2
 800249a:	4618      	mov	r0, r3
 800249c:	f002 fb9b 	bl	8004bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ac:	461a      	mov	r2, r3
 80024ae:	2340      	movs	r3, #64	; 0x40
 80024b0:	6093      	str	r3, [r2, #8]
} 
 80024b2:	e25f      	b.n	8002974 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d022      	beq.n	8002510 <HCD_HC_OUT_IRQHandler+0x1d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d6:	4619      	mov	r1, r3
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f043 0302 	orr.w	r3, r3, #2
 80024ea:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f002 fb6e 	bl	8004bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4413      	add	r3, r2
 8002502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002506:	461a      	mov	r2, r3
 8002508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800250c:	6093      	str	r3, [r2, #8]
} 
 800250e:	e231      	b.n	8002974 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d035      	beq.n	8002592 <HCD_HC_OUT_IRQHandler+0x258>
      hhcd->hc[chnum].ErrCnt = 0U;  
 8002526:	78fa      	ldrb	r2, [r7, #3]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	440b      	add	r3, r1
 8002534:	3358      	adds	r3, #88	; 0x58
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800253a:	78fb      	ldrb	r3, [r7, #3]
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4413      	add	r3, r2
 8002542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002546:	4619      	mov	r1, r3
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4413      	add	r3, r2
 8002550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f043 0302 	orr.w	r3, r3, #2
 800255a:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	78fa      	ldrb	r2, [r7, #3]
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	f002 fb36 	bl	8004bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800256a:	78fb      	ldrb	r3, [r7, #3]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002576:	461a      	mov	r2, r3
 8002578:	2301      	movs	r3, #1
 800257a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	440b      	add	r3, r1
 800258a:	335d      	adds	r3, #93	; 0x5d
 800258c:	2201      	movs	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
} 
 8002590:	e1f0      	b.n	8002974 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4413      	add	r3, r2
 800259a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d02b      	beq.n	8002600 <HCD_HC_OUT_IRQHandler+0x2c6>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b4:	461a      	mov	r2, r3
 80025b6:	2308      	movs	r3, #8
 80025b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c6:	4619      	mov	r1, r3
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f043 0302 	orr.w	r3, r3, #2
 80025da:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f002 faf6 	bl	8004bd6 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	440b      	add	r3, r1
 80025f8:	335d      	adds	r3, #93	; 0x5d
 80025fa:	2205      	movs	r2, #5
 80025fc:	701a      	strb	r2, [r3, #0]
} 
 80025fe:	e1b9      	b.n	8002974 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4413      	add	r3, r2
 8002608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	2b00      	cmp	r3, #0
 8002614:	d035      	beq.n	8002682 <HCD_HC_OUT_IRQHandler+0x348>
    hhcd->hc[chnum].ErrCnt = 0U;  
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	440b      	add	r3, r1
 8002624:	3358      	adds	r3, #88	; 0x58
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	4619      	mov	r1, r3
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f043 0302 	orr.w	r3, r3, #2
 800264a:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	4611      	mov	r1, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f002 fabe 	bl	8004bd6 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 800265a:	78fa      	ldrb	r2, [r7, #3]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	440b      	add	r3, r1
 8002668:	335d      	adds	r3, #93	; 0x5d
 800266a:	2203      	movs	r2, #3
 800266c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800266e:	78fb      	ldrb	r3, [r7, #3]
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4413      	add	r3, r2
 8002676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267a:	461a      	mov	r2, r3
 800267c:	2310      	movs	r3, #16
 800267e:	6093      	str	r3, [r2, #8]
} 
 8002680:	e178      	b.n	8002974 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4413      	add	r3, r2
 800268a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002694:	2b00      	cmp	r3, #0
 8002696:	d02b      	beq.n	80026f0 <HCD_HC_OUT_IRQHandler+0x3b6>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a4:	4619      	mov	r1, r3
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f043 0302 	orr.w	r3, r3, #2
 80026b8:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f002 fa87 	bl	8004bd6 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	440b      	add	r3, r1
 80026d6:	335d      	adds	r3, #93	; 0x5d
 80026d8:	2206      	movs	r2, #6
 80026da:	701a      	strb	r2, [r3, #0]
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e8:	461a      	mov	r2, r3
 80026ea:	2380      	movs	r3, #128	; 0x80
 80026ec:	6093      	str	r3, [r2, #8]
} 
 80026ee:	e141      	b.n	8002974 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	015a      	lsls	r2, r3, #5
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002702:	2b00      	cmp	r3, #0
 8002704:	d035      	beq.n	8002772 <HCD_HC_OUT_IRQHandler+0x438>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8002706:	78fb      	ldrb	r3, [r7, #3]
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4413      	add	r3, r2
 800270e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002712:	4619      	mov	r1, r3
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f043 0302 	orr.w	r3, r3, #2
 8002726:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f002 fa50 	bl	8004bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4413      	add	r3, r2
 800273e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002742:	461a      	mov	r2, r3
 8002744:	2310      	movs	r3, #16
 8002746:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	461a      	mov	r2, r3
 8002756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800275a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	440b      	add	r3, r1
 800276a:	335d      	adds	r3, #93	; 0x5d
 800276c:	2208      	movs	r2, #8
 800276e:	701a      	strb	r2, [r3, #0]
} 
 8002770:	e100      	b.n	8002974 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8002772:	78fb      	ldrb	r3, [r7, #3]
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4413      	add	r3, r2
 800277a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80f5 	beq.w	8002974 <HCD_HC_OUT_IRQHandler+0x63a>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4413      	add	r3, r2
 8002792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002796:	4619      	mov	r1, r3
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f023 0302 	bic.w	r3, r3, #2
 80027aa:	60cb      	str	r3, [r1, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	440b      	add	r3, r1
 80027ba:	335d      	adds	r3, #93	; 0x5d
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d12c      	bne.n	800281c <HCD_HC_OUT_IRQHandler+0x4e2>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	440b      	add	r3, r1
 80027d0:	335c      	adds	r3, #92	; 0x5c
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 80027d6:	78fa      	ldrb	r2, [r7, #3]
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	440b      	add	r3, r1
 80027e4:	333f      	adds	r3, #63	; 0x3f
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	f040 80ac 	bne.w	8002946 <HCD_HC_OUT_IRQHandler+0x60c>
        hhcd->hc[chnum].toggle_out ^= 1U; 
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	78f9      	ldrb	r1, [r7, #3]
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4403      	add	r3, r0
 80027fe:	3351      	adds	r3, #81	; 0x51
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	f083 0301 	eor.w	r3, r3, #1
 8002806:	b2d8      	uxtb	r0, r3
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	440b      	add	r3, r1
 8002814:	3351      	adds	r3, #81	; 0x51
 8002816:	4602      	mov	r2, r0
 8002818:	701a      	strb	r2, [r3, #0]
 800281a:	e094      	b.n	8002946 <HCD_HC_OUT_IRQHandler+0x60c>
    else if (hhcd->hc[chnum].state == HC_NAK) 
 800281c:	78fa      	ldrb	r2, [r7, #3]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	440b      	add	r3, r1
 800282a:	335d      	adds	r3, #93	; 0x5d
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d10a      	bne.n	8002848 <HCD_HC_OUT_IRQHandler+0x50e>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	440b      	add	r3, r1
 8002840:	335c      	adds	r3, #92	; 0x5c
 8002842:	2202      	movs	r2, #2
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	e07e      	b.n	8002946 <HCD_HC_OUT_IRQHandler+0x60c>
    else if (hhcd->hc[chnum].state == HC_NYET) 
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	440b      	add	r3, r1
 8002856:	335d      	adds	r3, #93	; 0x5d
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b04      	cmp	r3, #4
 800285c:	d114      	bne.n	8002888 <HCD_HC_OUT_IRQHandler+0x54e>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800285e:	78fa      	ldrb	r2, [r7, #3]
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	440b      	add	r3, r1
 800286c:	335c      	adds	r3, #92	; 0x5c
 800286e:	2202      	movs	r2, #2
 8002870:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].do_ping = 0U;
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	440b      	add	r3, r1
 8002880:	333d      	adds	r3, #61	; 0x3d
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
 8002886:	e05e      	b.n	8002946 <HCD_HC_OUT_IRQHandler+0x60c>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	440b      	add	r3, r1
 8002896:	335d      	adds	r3, #93	; 0x5d
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b05      	cmp	r3, #5
 800289c:	d10a      	bne.n	80028b4 <HCD_HC_OUT_IRQHandler+0x57a>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800289e:	78fa      	ldrb	r2, [r7, #3]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	440b      	add	r3, r1
 80028ac:	335c      	adds	r3, #92	; 0x5c
 80028ae:	2205      	movs	r2, #5
 80028b0:	701a      	strb	r2, [r3, #0]
 80028b2:	e048      	b.n	8002946 <HCD_HC_OUT_IRQHandler+0x60c>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	440b      	add	r3, r1
 80028c2:	335d      	adds	r3, #93	; 0x5d
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b06      	cmp	r3, #6
 80028c8:	d00a      	beq.n	80028e0 <HCD_HC_OUT_IRQHandler+0x5a6>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	440b      	add	r3, r1
 80028d8:	335d      	adds	r3, #93	; 0x5d
 80028da:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d132      	bne.n	8002946 <HCD_HC_OUT_IRQHandler+0x60c>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 80028e0:	78fa      	ldrb	r2, [r7, #3]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	440b      	add	r3, r1
 80028ee:	3358      	adds	r3, #88	; 0x58
 80028f0:	6819      	ldr	r1, [r3, #0]
 80028f2:	1c48      	adds	r0, r1, #1
 80028f4:	687c      	ldr	r4, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4423      	add	r3, r4
 8002900:	3358      	adds	r3, #88	; 0x58
 8002902:	6018      	str	r0, [r3, #0]
 8002904:	2903      	cmp	r1, #3
 8002906:	d914      	bls.n	8002932 <HCD_HC_OUT_IRQHandler+0x5f8>
        hhcd->hc[chnum].ErrCnt = 0U;
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	440b      	add	r3, r1
 8002916:	3358      	adds	r3, #88	; 0x58
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	440b      	add	r3, r1
 800292a:	335c      	adds	r3, #92	; 0x5c
 800292c:	2204      	movs	r2, #4
 800292e:	701a      	strb	r2, [r3, #0]
 8002930:	e009      	b.n	8002946 <HCD_HC_OUT_IRQHandler+0x60c>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	440b      	add	r3, r1
 8002940:	335c      	adds	r3, #92	; 0x5c
 8002942:	2202      	movs	r2, #2
 8002944:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002946:	78fb      	ldrb	r3, [r7, #3]
 8002948:	015a      	lsls	r2, r3, #5
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4413      	add	r3, r2
 800294e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002952:	461a      	mov	r2, r3
 8002954:	2302      	movs	r3, #2
 8002956:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8002958:	78fa      	ldrb	r2, [r7, #3]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	440b      	add	r3, r1
 8002966:	335c      	adds	r3, #92	; 0x5c
 8002968:	781a      	ldrb	r2, [r3, #0]
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	4619      	mov	r1, r3
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f008 ffc8 	bl	800b904 <HAL_HCD_HC_NotifyURBChange_Callback>
} 
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	bd90      	pop	{r4, r7, pc}

0800297c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	61fb      	str	r3, [r7, #28]
  uint8_t  channelnum = 0;  
 800298a:	2300      	movs	r3, #0
 800298c:	76fb      	strb	r3, [r7, #27]
  uint32_t pktsts;
  uint32_t pktcnt; 
  uint32_t temp = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
  
  temp = hhcd->Instance->GRXSTSP;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	617b      	str	r3, [r7, #20]
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	76fb      	strb	r3, [r7, #27]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17U;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	0c5b      	lsrs	r3, r3, #17
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	60fb      	str	r3, [r7, #12]
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4U;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ba:	60bb      	str	r3, [r7, #8]
  
  switch (pktsts)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d003      	beq.n	80029ca <HCD_RXQLVL_IRQHandler+0x4e>
 80029c2:	2b05      	cmp	r3, #5
 80029c4:	f000 8082 	beq.w	8002acc <HCD_RXQLVL_IRQHandler+0x150>
  case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
    break;
  case GRXSTS_PKTSTS_IN_XFER_COMP:
  case GRXSTS_PKTSTS_CH_HALTED:
  default:
    break;
 80029c8:	e083      	b.n	8002ad2 <HCD_RXQLVL_IRQHandler+0x156>
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d07f      	beq.n	8002ad0 <HCD_RXQLVL_IRQHandler+0x154>
 80029d0:	7efa      	ldrb	r2, [r7, #27]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	440b      	add	r3, r1
 80029de:	3344      	adds	r3, #68	; 0x44
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d074      	beq.n	8002ad0 <HCD_RXQLVL_IRQHandler+0x154>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6818      	ldr	r0, [r3, #0]
 80029ea:	7efa      	ldrb	r2, [r7, #27]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	440b      	add	r3, r1
 80029f8:	3344      	adds	r3, #68	; 0x44
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	b292      	uxth	r2, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	f001 fcc8 	bl	8004396 <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 8002a06:	7efa      	ldrb	r2, [r7, #27]
 8002a08:	7ef9      	ldrb	r1, [r7, #27]
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	4403      	add	r3, r0
 8002a16:	3344      	adds	r3, #68	; 0x44
 8002a18:	6819      	ldr	r1, [r3, #0]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	4419      	add	r1, r3
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4403      	add	r3, r0
 8002a2a:	3344      	adds	r3, #68	; 0x44
 8002a2c:	6019      	str	r1, [r3, #0]
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8002a2e:	7efa      	ldrb	r2, [r7, #27]
 8002a30:	7ef9      	ldrb	r1, [r7, #27]
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4403      	add	r3, r0
 8002a3e:	334c      	adds	r3, #76	; 0x4c
 8002a40:	6819      	ldr	r1, [r3, #0]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	4419      	add	r1, r3
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4403      	add	r3, r0
 8002a52:	334c      	adds	r3, #76	; 0x4c
 8002a54:	6019      	str	r1, [r3, #0]
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8002a56:	7efb      	ldrb	r3, [r7, #27]
 8002a58:	015a      	lsls	r2, r3, #5
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <HCD_RXQLVL_IRQHandler+0x160>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d031      	beq.n	8002ad0 <HCD_RXQLVL_IRQHandler+0x154>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 8002a6c:	7efb      	ldrb	r3, [r7, #27]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a82:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a8a:	613b      	str	r3, [r7, #16]
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 8002a8c:	7efb      	ldrb	r3, [r7, #27]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	461a      	mov	r2, r3
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	6013      	str	r3, [r2, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 8002a9e:	7efa      	ldrb	r2, [r7, #27]
 8002aa0:	7ef9      	ldrb	r1, [r7, #27]
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4403      	add	r3, r0
 8002aae:	3350      	adds	r3, #80	; 0x50
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	f083 0301 	eor.w	r3, r3, #1
 8002ab6:	b2d8      	uxtb	r0, r3
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	440b      	add	r3, r1
 8002ac4:	3350      	adds	r3, #80	; 0x50
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	701a      	strb	r2, [r3, #0]
    break;
 8002aca:	e001      	b.n	8002ad0 <HCD_RXQLVL_IRQHandler+0x154>
    break;
 8002acc:	bf00      	nop
 8002ace:	e000      	b.n	8002ad2 <HCD_RXQLVL_IRQHandler+0x156>
    break;
 8002ad0:	bf00      	nop
  }
}
 8002ad2:	bf00      	nop
 8002ad4:	3720      	adds	r7, #32
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	1ff80000 	.word	0x1ff80000

08002ae0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	617b      	str	r3, [r7, #20]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	613b      	str	r3, [r7, #16]
  hprt0_dup = USBx_HPRT0;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60fb      	str	r3, [r7, #12]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b08:	60fb      	str	r3, [r7, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect Detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d113      	bne.n	8002b3c <HCD_Port_IRQHandler+0x5c>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d10a      	bne.n	8002b34 <HCD_Port_IRQHandler+0x54>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	6992      	ldr	r2, [r2, #24]
 8002b28:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002b2c:	619a      	str	r2, [r3, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f008 fecc 	bl	800b8cc <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f043 0302 	orr.w	r3, r3, #2
 8002b3a:	60fb      	str	r3, [r7, #12]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d142      	bne.n	8002bcc <HCD_Port_IRQHandler+0xec>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f043 0308 	orr.w	r3, r3, #8
 8002b4c:	60fb      	str	r3, [r7, #12]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d126      	bne.n	8002ba6 <HCD_Port_IRQHandler+0xc6>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d113      	bne.n	8002b88 <HCD_Port_IRQHandler+0xa8>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002b66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b6a:	d106      	bne.n	8002b7a <HCD_Port_IRQHandler+0x9a>
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2102      	movs	r1, #2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f001 fd2e 	bl	80045d4 <USB_InitFSLSPClkSel>
 8002b78:	e011      	b.n	8002b9e <HCD_Port_IRQHandler+0xbe>
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4618      	mov	r0, r3
 8002b82:	f001 fd27 	bl	80045d4 <USB_InitFSLSPClkSel>
 8002b86:	e00a      	b.n	8002b9e <HCD_Port_IRQHandler+0xbe>
        }
      }
      else
      {
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d106      	bne.n	8002b9e <HCD_Port_IRQHandler+0xbe>
        {
          USBx_HOST->HFIR = 60000U;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b96:	461a      	mov	r2, r3
 8002b98:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002b9c:	6053      	str	r3, [r2, #4]
        }
      }
      
      HAL_HCD_Connect_Callback(hhcd);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f008 fe94 	bl	800b8cc <HAL_HCD_Connect_Callback>
 8002ba4:	e012      	b.n	8002bcc <HCD_Port_IRQHandler+0xec>
    }
    else
    {
      /* Clean up HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bac:	461a      	mov	r2, r3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002bba:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	6992      	ldr	r2, [r2, #24]
 8002bc6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002bca:	619a      	str	r2, [r3, #24]
    }    
  }
  
  /* Check for an over current */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	d103      	bne.n	8002bde <HCD_Port_IRQHandler+0xfe>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f043 0320 	orr.w	r3, r3, #32
 8002bdc:	60fb      	str	r3, [r7, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002be4:	461a      	mov	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6013      	str	r3, [r2, #0]
}
 8002bea:	bf00      	nop
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0ca      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c08:	4b67      	ldr	r3, [pc, #412]	; (8002da8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 020f 	and.w	r2, r3, #15
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d20c      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b64      	ldr	r3, [pc, #400]	; (8002da8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b62      	ldr	r3, [pc, #392]	; (8002da8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 020f 	and.w	r2, r3, #15
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0b6      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d020      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c48:	4a58      	ldr	r2, [pc, #352]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002c4a:	4b58      	ldr	r3, [pc, #352]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c60:	4a52      	ldr	r2, [pc, #328]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002c62:	4b52      	ldr	r3, [pc, #328]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c6c:	494f      	ldr	r1, [pc, #316]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002c6e:	4b4f      	ldr	r3, [pc, #316]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d044      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	4b46      	ldr	r3, [pc, #280]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d119      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e07d      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d003      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d107      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb2:	4b3e      	ldr	r3, [pc, #248]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e06d      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc2:	4b3a      	ldr	r3, [pc, #232]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e065      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cd2:	4936      	ldr	r1, [pc, #216]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	4b35      	ldr	r3, [pc, #212]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f023 0203 	bic.w	r2, r3, #3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ce4:	f7fd fdcc 	bl	8000880 <HAL_GetTick>
 8002ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cea:	e00a      	b.n	8002d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cec:	f7fd fdc8 	bl	8000880 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e04d      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d02:	4b2a      	ldr	r3, [pc, #168]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 020c 	and.w	r2, r3, #12
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d1eb      	bne.n	8002cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d14:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <HAL_RCC_ClockConfig+0x1b4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 020f 	and.w	r2, r3, #15
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d90c      	bls.n	8002d3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d22:	4b21      	ldr	r3, [pc, #132]	; (8002da8 <HAL_RCC_ClockConfig+0x1b4>)
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2a:	4b1f      	ldr	r3, [pc, #124]	; (8002da8 <HAL_RCC_ClockConfig+0x1b4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 020f 	and.w	r2, r3, #15
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e030      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d48:	4918      	ldr	r1, [pc, #96]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002d4a:	4b18      	ldr	r3, [pc, #96]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d009      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d66:	4911      	ldr	r1, [pc, #68]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002d68:	4b10      	ldr	r3, [pc, #64]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4313      	orrs	r3, r2
 8002d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d7a:	f000 fb7b 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 8002d7e:	4601      	mov	r1, r0
 8002d80:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	4a09      	ldr	r2, [pc, #36]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	5cd3      	ldrb	r3, [r2, r3]
 8002d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8002d92:	4a08      	ldr	r2, [pc, #32]	; (8002db4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d96:	2001      	movs	r0, #1
 8002d98:	f7fd fd2e 	bl	80007f8 <HAL_InitTick>

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40023c00 	.word	0x40023c00
 8002dac:	40023800 	.word	0x40023800
 8002db0:	0800c1a8 	.word	0x0800c1a8
 8002db4:	2000007c 	.word	0x2000007c

08002db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dbc:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	2000007c 	.word	0x2000007c

08002dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dd4:	f7ff fff0 	bl	8002db8 <HAL_RCC_GetHCLKFreq>
 8002dd8:	4601      	mov	r1, r0
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	0a9b      	lsrs	r3, r3, #10
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	4a03      	ldr	r2, [pc, #12]	; (8002df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002de6:	5cd3      	ldrb	r3, [r2, r3]
 8002de8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40023800 	.word	0x40023800
 8002df4:	0800c1b8 	.word	0x0800c1b8

08002df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dfc:	f7ff ffdc 	bl	8002db8 <HAL_RCC_GetHCLKFreq>
 8002e00:	4601      	mov	r1, r0
 8002e02:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	0b5b      	lsrs	r3, r3, #13
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	4a03      	ldr	r2, [pc, #12]	; (8002e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e0e:	5cd3      	ldrb	r3, [r2, r3]
 8002e10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	0800c1b8 	.word	0x0800c1b8

08002e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08c      	sub	sp, #48	; 0x30
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d010      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002e58:	496f      	ldr	r1, [pc, #444]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e5a:	4b6f      	ldr	r3, [pc, #444]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e60:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002e76:	2301      	movs	r3, #1
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d010      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002e86:	4964      	ldr	r1, [pc, #400]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e88:	4b63      	ldr	r3, [pc, #396]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e8e:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d017      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eb4:	4958      	ldr	r1, [pc, #352]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eb6:	4b58      	ldr	r3, [pc, #352]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ebc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d017      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ef0:	4949      	ldr	r1, [pc, #292]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ef2:	4b49      	ldr	r3, [pc, #292]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ef8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002f10:	2301      	movs	r3, #1
 8002f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 808a 	beq.w	8003042 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	4a39      	ldr	r2, [pc, #228]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f34:	4b38      	ldr	r3, [pc, #224]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b36      	ldr	r3, [pc, #216]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002f4a:	4a34      	ldr	r2, [pc, #208]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002f4c:	4b33      	ldr	r3, [pc, #204]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f56:	f7fd fc93 	bl	8000880 <HAL_GetTick>
 8002f5a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f5e:	f7fd fc8f 	bl	8000880 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e278      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f70:	4b2a      	ldr	r3, [pc, #168]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f7c:	4b26      	ldr	r3, [pc, #152]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f84:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d02f      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d028      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f9a:	4b1f      	ldr	r3, [pc, #124]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fa4:	4b1e      	ldr	r3, [pc, #120]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002faa:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002fb0:	4a19      	ldr	r2, [pc, #100]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fb6:	4b18      	ldr	r3, [pc, #96]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d014      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002fc2:	f7fd fc5d 	bl	8000880 <HAL_GetTick>
 8002fc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7fd fc59 	bl	8000880 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e240      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe0:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0ee      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ff8:	d114      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002ffa:	4907      	ldr	r1, [pc, #28]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800300c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003010:	4313      	orrs	r3, r2
 8003012:	608b      	str	r3, [r1, #8]
 8003014:	e00c      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800
 800301c:	40007000 	.word	0x40007000
 8003020:	42470e40 	.word	0x42470e40
 8003024:	4a4a      	ldr	r2, [pc, #296]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003026:	4b4a      	ldr	r3, [pc, #296]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800302e:	6093      	str	r3, [r2, #8]
 8003030:	4947      	ldr	r1, [pc, #284]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003032:	4b47      	ldr	r3, [pc, #284]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003034:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303e:	4313      	orrs	r3, r2
 8003040:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	2b00      	cmp	r3, #0
 800304c:	d004      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800304e:	4a41      	ldr	r2, [pc, #260]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003056:	6013      	str	r3, [r2, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003064:	493a      	ldr	r1, [pc, #232]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003066:	4b3a      	ldr	r3, [pc, #232]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800306c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003086:	4932      	ldr	r1, [pc, #200]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003088:	4b31      	ldr	r3, [pc, #196]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800308a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800308e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d011      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030a8:	4929      	ldr	r1, [pc, #164]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030aa:	4b29      	ldr	r3, [pc, #164]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030c6:	d101      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80030c8:	2301      	movs	r3, #1
 80030ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80030d8:	491d      	ldr	r1, [pc, #116]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030da:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d011      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80030fa:	4915      	ldr	r1, [pc, #84]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030fc:	4b14      	ldr	r3, [pc, #80]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003102:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310a:	4313      	orrs	r3, r2
 800310c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003118:	d101      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800311a:	2301      	movs	r3, #1
 800311c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	2b01      	cmp	r3, #1
 8003122:	d005      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800312c:	f040 80ff 	bne.w	800332e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003136:	f7fd fba3 	bl	8000880 <HAL_GetTick>
 800313a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800313c:	e00e      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800313e:	f7fd fb9f 	bl	8000880 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d907      	bls.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e188      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003150:	40023800 	.word	0x40023800
 8003154:	424711e0 	.word	0x424711e0
 8003158:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800315c:	4b7e      	ldr	r3, [pc, #504]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1ea      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003178:	2b00      	cmp	r3, #0
 800317a:	d009      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003184:	2b00      	cmp	r3, #0
 8003186:	d028      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318c:	2b00      	cmp	r3, #0
 800318e:	d124      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003190:	4b71      	ldr	r3, [pc, #452]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003196:	0c1b      	lsrs	r3, r3, #16
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	3301      	adds	r3, #1
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031a2:	4b6d      	ldr	r3, [pc, #436]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a8:	0e1b      	lsrs	r3, r3, #24
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80031b0:	4969      	ldr	r1, [pc, #420]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	019b      	lsls	r3, r3, #6
 80031bc:	431a      	orrs	r2, r3
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	085b      	lsrs	r3, r3, #1
 80031c2:	3b01      	subs	r3, #1
 80031c4:	041b      	lsls	r3, r3, #16
 80031c6:	431a      	orrs	r2, r3
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	061b      	lsls	r3, r3, #24
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	071b      	lsls	r3, r3, #28
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d004      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ee:	d00a      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d035      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003204:	d130      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003206:	4b54      	ldr	r3, [pc, #336]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800320c:	0c1b      	lsrs	r3, r3, #16
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	3301      	adds	r3, #1
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003218:	4b4f      	ldr	r3, [pc, #316]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800321a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800321e:	0f1b      	lsrs	r3, r3, #28
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003226:	494c      	ldr	r1, [pc, #304]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	019b      	lsls	r3, r3, #6
 8003232:	431a      	orrs	r2, r3
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	085b      	lsrs	r3, r3, #1
 8003238:	3b01      	subs	r3, #1
 800323a:	041b      	lsls	r3, r3, #16
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	061b      	lsls	r3, r3, #24
 8003244:	431a      	orrs	r2, r3
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	071b      	lsls	r3, r3, #28
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003250:	4941      	ldr	r1, [pc, #260]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003252:	4b41      	ldr	r3, [pc, #260]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003258:	f023 021f 	bic.w	r2, r3, #31
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003260:	3b01      	subs	r3, #1
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003270:	2b00      	cmp	r3, #0
 8003272:	d029      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800327c:	d124      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800327e:	4b36      	ldr	r3, [pc, #216]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003284:	0c1b      	lsrs	r3, r3, #16
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	3301      	adds	r3, #1
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003290:	4b31      	ldr	r3, [pc, #196]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003296:	0f1b      	lsrs	r3, r3, #28
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800329e:	492e      	ldr	r1, [pc, #184]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	019b      	lsls	r3, r3, #6
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	085b      	lsrs	r3, r3, #1
 80032b2:	3b01      	subs	r3, #1
 80032b4:	041b      	lsls	r3, r3, #16
 80032b6:	431a      	orrs	r2, r3
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	061b      	lsls	r3, r3, #24
 80032bc:	431a      	orrs	r2, r3
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	071b      	lsls	r3, r3, #28
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d016      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80032d4:	4920      	ldr	r1, [pc, #128]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	019b      	lsls	r3, r3, #6
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	3b01      	subs	r3, #1
 80032ea:	041b      	lsls	r3, r3, #16
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	061b      	lsls	r3, r3, #24
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	071b      	lsls	r3, r3, #28
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003302:	4b16      	ldr	r3, [pc, #88]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003304:	2201      	movs	r2, #1
 8003306:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003308:	f7fd faba 	bl	8000880 <HAL_GetTick>
 800330c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003310:	f7fd fab6 	bl	8000880 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e09f      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003322:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	2b01      	cmp	r3, #1
 8003332:	f040 8095 	bne.w	8003460 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003336:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800333c:	f7fd faa0 	bl	8000880 <HAL_GetTick>
 8003340:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003342:	e00f      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003344:	f7fd fa9c 	bl	8000880 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d908      	bls.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e085      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003356:	bf00      	nop
 8003358:	40023800 	.word	0x40023800
 800335c:	42470068 	.word	0x42470068
 8003360:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003364:	4b41      	ldr	r3, [pc, #260]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800336c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003370:	d0e8      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0304 	and.w	r3, r3, #4
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	2b00      	cmp	r3, #0
 8003384:	d009      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800338e:	2b00      	cmp	r3, #0
 8003390:	d02b      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003396:	2b00      	cmp	r3, #0
 8003398:	d127      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800339a:	4b34      	ldr	r3, [pc, #208]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a0:	0c1b      	lsrs	r3, r3, #16
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	3301      	adds	r3, #1
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80033ac:	492f      	ldr	r1, [pc, #188]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	019b      	lsls	r3, r3, #6
 80033b8:	431a      	orrs	r2, r3
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	085b      	lsrs	r3, r3, #1
 80033be:	3b01      	subs	r3, #1
 80033c0:	041b      	lsls	r3, r3, #16
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	061b      	lsls	r3, r3, #24
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80033d0:	4926      	ldr	r1, [pc, #152]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033d2:	4b26      	ldr	r3, [pc, #152]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	3b01      	subs	r3, #1
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d01d      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033fe:	d118      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003400:	4b1a      	ldr	r3, [pc, #104]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003406:	0e1b      	lsrs	r3, r3, #24
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800340e:	4917      	ldr	r1, [pc, #92]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699a      	ldr	r2, [r3, #24]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	019b      	lsls	r3, r3, #6
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	085b      	lsrs	r3, r3, #1
 8003422:	3b01      	subs	r3, #1
 8003424:	041b      	lsls	r3, r3, #16
 8003426:	431a      	orrs	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	061b      	lsls	r3, r3, #24
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003432:	4b0f      	ldr	r3, [pc, #60]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003434:	2201      	movs	r2, #1
 8003436:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003438:	f7fd fa22 	bl	8000880 <HAL_GetTick>
 800343c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003440:	f7fd fa1e 	bl	8000880 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e007      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003452:	4b06      	ldr	r3, [pc, #24]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800345a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800345e:	d1ef      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3730      	adds	r7, #48	; 0x30
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	42470070 	.word	0x42470070

08003474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003478:	b0a1      	sub	sp, #132	; 0x84
 800347a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003490:	4ba0      	ldr	r3, [pc, #640]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 030c 	and.w	r3, r3, #12
 8003498:	2b0c      	cmp	r3, #12
 800349a:	f200 8193 	bhi.w	80037c4 <HAL_RCC_GetSysClockFreq+0x350>
 800349e:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <HAL_RCC_GetSysClockFreq+0x30>)
 80034a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a4:	080034d9 	.word	0x080034d9
 80034a8:	080037c5 	.word	0x080037c5
 80034ac:	080037c5 	.word	0x080037c5
 80034b0:	080037c5 	.word	0x080037c5
 80034b4:	080034df 	.word	0x080034df
 80034b8:	080037c5 	.word	0x080037c5
 80034bc:	080037c5 	.word	0x080037c5
 80034c0:	080037c5 	.word	0x080037c5
 80034c4:	080034e5 	.word	0x080034e5
 80034c8:	080037c5 	.word	0x080037c5
 80034cc:	080037c5 	.word	0x080037c5
 80034d0:	080037c5 	.word	0x080037c5
 80034d4:	08003661 	.word	0x08003661
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034d8:	4b8f      	ldr	r3, [pc, #572]	; (8003718 <HAL_RCC_GetSysClockFreq+0x2a4>)
 80034da:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 80034dc:	e175      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034de:	4b8f      	ldr	r3, [pc, #572]	; (800371c <HAL_RCC_GetSysClockFreq+0x2a8>)
 80034e0:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80034e2:	e172      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034e4:	4b8b      	ldr	r3, [pc, #556]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034ec:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ee:	4b89      	ldr	r3, [pc, #548]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d056      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034fa:	4b86      	ldr	r3, [pc, #536]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	099b      	lsrs	r3, r3, #6
 8003500:	f04f 0400 	mov.w	r4, #0
 8003504:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	ea01 0103 	and.w	r1, r1, r3
 8003510:	ea02 0204 	and.w	r2, r2, r4
 8003514:	460b      	mov	r3, r1
 8003516:	4614      	mov	r4, r2
 8003518:	0160      	lsls	r0, r4, #5
 800351a:	6678      	str	r0, [r7, #100]	; 0x64
 800351c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800351e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003522:	6678      	str	r0, [r7, #100]	; 0x64
 8003524:	015b      	lsls	r3, r3, #5
 8003526:	663b      	str	r3, [r7, #96]	; 0x60
 8003528:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800352c:	1a5b      	subs	r3, r3, r1
 800352e:	eb64 0402 	sbc.w	r4, r4, r2
 8003532:	01a0      	lsls	r0, r4, #6
 8003534:	65f8      	str	r0, [r7, #92]	; 0x5c
 8003536:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003538:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 800353c:	65f8      	str	r0, [r7, #92]	; 0x5c
 800353e:	0198      	lsls	r0, r3, #6
 8003540:	65b8      	str	r0, [r7, #88]	; 0x58
 8003542:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8003546:	1aed      	subs	r5, r5, r3
 8003548:	eb66 0604 	sbc.w	r6, r6, r4
 800354c:	4633      	mov	r3, r6
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	657b      	str	r3, [r7, #84]	; 0x54
 8003552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003554:	4628      	mov	r0, r5
 8003556:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800355a:	657b      	str	r3, [r7, #84]	; 0x54
 800355c:	462b      	mov	r3, r5
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	653b      	str	r3, [r7, #80]	; 0x50
 8003562:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8003566:	461d      	mov	r5, r3
 8003568:	4626      	mov	r6, r4
 800356a:	186b      	adds	r3, r5, r1
 800356c:	eb46 0402 	adc.w	r4, r6, r2
 8003570:	4618      	mov	r0, r3
 8003572:	4621      	mov	r1, r4
 8003574:	460b      	mov	r3, r1
 8003576:	025b      	lsls	r3, r3, #9
 8003578:	64fb      	str	r3, [r7, #76]	; 0x4c
 800357a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800357c:	4602      	mov	r2, r0
 800357e:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 8003582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003584:	4603      	mov	r3, r0
 8003586:	025b      	lsls	r3, r3, #9
 8003588:	64bb      	str	r3, [r7, #72]	; 0x48
 800358a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800358e:	4618      	mov	r0, r3
 8003590:	4621      	mov	r1, r4
 8003592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003594:	f04f 0400 	mov.w	r4, #0
 8003598:	461a      	mov	r2, r3
 800359a:	4623      	mov	r3, r4
 800359c:	f7fc ff82 	bl	80004a4 <__aeabi_uldivmod>
 80035a0:	4603      	mov	r3, r0
 80035a2:	460c      	mov	r4, r1
 80035a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80035a6:	e04d      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a8:	4b5a      	ldr	r3, [pc, #360]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	099b      	lsrs	r3, r3, #6
 80035ae:	f04f 0400 	mov.w	r4, #0
 80035b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	ea01 0103 	and.w	r1, r1, r3
 80035be:	ea02 0204 	and.w	r2, r2, r4
 80035c2:	460b      	mov	r3, r1
 80035c4:	4614      	mov	r4, r2
 80035c6:	0160      	lsls	r0, r4, #5
 80035c8:	6478      	str	r0, [r7, #68]	; 0x44
 80035ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80035cc:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80035d0:	6478      	str	r0, [r7, #68]	; 0x44
 80035d2:	015b      	lsls	r3, r3, #5
 80035d4:	643b      	str	r3, [r7, #64]	; 0x40
 80035d6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80035da:	1a5b      	subs	r3, r3, r1
 80035dc:	eb64 0402 	sbc.w	r4, r4, r2
 80035e0:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 80035e4:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 80035e8:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 80035ec:	ebba 0a03 	subs.w	sl, sl, r3
 80035f0:	eb6b 0b04 	sbc.w	fp, fp, r4
 80035f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003600:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003602:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8003606:	63bb      	str	r3, [r7, #56]	; 0x38
 8003608:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 800360c:	eb1a 0a01 	adds.w	sl, sl, r1
 8003610:	eb4b 0b02 	adc.w	fp, fp, r2
 8003614:	ea4f 238b 	mov.w	r3, fp, lsl #10
 8003618:	637b      	str	r3, [r7, #52]	; 0x34
 800361a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800361c:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 8003620:	637b      	str	r3, [r7, #52]	; 0x34
 8003622:	ea4f 238a 	mov.w	r3, sl, lsl #10
 8003626:	633b      	str	r3, [r7, #48]	; 0x30
 8003628:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800362c:	4650      	mov	r0, sl
 800362e:	4659      	mov	r1, fp
 8003630:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003632:	f04f 0400 	mov.w	r4, #0
 8003636:	461a      	mov	r2, r3
 8003638:	4623      	mov	r3, r4
 800363a:	f7fc ff33 	bl	80004a4 <__aeabi_uldivmod>
 800363e:	4603      	mov	r3, r0
 8003640:	460c      	mov	r4, r1
 8003642:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003644:	4b33      	ldr	r3, [pc, #204]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	0c1b      	lsrs	r3, r3, #16
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	3301      	adds	r3, #1
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 8003654:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003658:	fbb2 f3f3 	udiv	r3, r2, r3
 800365c:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800365e:	e0b4      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003660:	4b2c      	ldr	r3, [pc, #176]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003668:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800366a:	4b2a      	ldr	r3, [pc, #168]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d054      	beq.n	8003720 <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003676:	4b27      	ldr	r3, [pc, #156]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	099b      	lsrs	r3, r3, #6
 800367c:	f04f 0400 	mov.w	r4, #0
 8003680:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	ea01 0103 	and.w	r1, r1, r3
 800368c:	ea02 0204 	and.w	r2, r2, r4
 8003690:	460b      	mov	r3, r1
 8003692:	4614      	mov	r4, r2
 8003694:	0160      	lsls	r0, r4, #5
 8003696:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003698:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800369a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800369e:	62f8      	str	r0, [r7, #44]	; 0x2c
 80036a0:	015b      	lsls	r3, r3, #5
 80036a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80036a4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80036a8:	1a5b      	subs	r3, r3, r1
 80036aa:	eb64 0402 	sbc.w	r4, r4, r2
 80036ae:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80036b2:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80036b6:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80036ba:	ebb8 0803 	subs.w	r8, r8, r3
 80036be:	eb69 0904 	sbc.w	r9, r9, r4
 80036c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
 80036d0:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80036d4:	623b      	str	r3, [r7, #32]
 80036d6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036da:	eb18 0801 	adds.w	r8, r8, r1
 80036de:	eb49 0902 	adc.w	r9, r9, r2
 80036e2:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80036e6:	61fb      	str	r3, [r7, #28]
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80036fa:	4640      	mov	r0, r8
 80036fc:	4649      	mov	r1, r9
 80036fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003700:	f04f 0400 	mov.w	r4, #0
 8003704:	461a      	mov	r2, r3
 8003706:	4623      	mov	r3, r4
 8003708:	f7fc fecc 	bl	80004a4 <__aeabi_uldivmod>
 800370c:	4603      	mov	r3, r0
 800370e:	460c      	mov	r4, r1
 8003710:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003712:	e04b      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x338>
 8003714:	40023800 	.word	0x40023800
 8003718:	00f42400 	.word	0x00f42400
 800371c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003720:	4b2d      	ldr	r3, [pc, #180]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x364>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	099b      	lsrs	r3, r3, #6
 8003726:	f04f 0400 	mov.w	r4, #0
 800372a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	ea01 0103 	and.w	r1, r1, r3
 8003736:	ea02 0204 	and.w	r2, r2, r4
 800373a:	460b      	mov	r3, r1
 800373c:	4614      	mov	r4, r2
 800373e:	0160      	lsls	r0, r4, #5
 8003740:	6178      	str	r0, [r7, #20]
 8003742:	6978      	ldr	r0, [r7, #20]
 8003744:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003748:	6178      	str	r0, [r7, #20]
 800374a:	015b      	lsls	r3, r3, #5
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003752:	1a5b      	subs	r3, r3, r1
 8003754:	eb64 0402 	sbc.w	r4, r4, r2
 8003758:	01a6      	lsls	r6, r4, #6
 800375a:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800375e:	019d      	lsls	r5, r3, #6
 8003760:	1aed      	subs	r5, r5, r3
 8003762:	eb66 0604 	sbc.w	r6, r6, r4
 8003766:	00f3      	lsls	r3, r6, #3
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	00eb      	lsls	r3, r5, #3
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800377a:	186d      	adds	r5, r5, r1
 800377c:	eb46 0602 	adc.w	r6, r6, r2
 8003780:	02b3      	lsls	r3, r6, #10
 8003782:	607b      	str	r3, [r7, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 800378a:	607b      	str	r3, [r7, #4]
 800378c:	02ab      	lsls	r3, r5, #10
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	e897 0060 	ldmia.w	r7, {r5, r6}
 8003794:	4628      	mov	r0, r5
 8003796:	4631      	mov	r1, r6
 8003798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800379a:	f04f 0400 	mov.w	r4, #0
 800379e:	461a      	mov	r2, r3
 80037a0:	4623      	mov	r3, r4
 80037a2:	f7fc fe7f 	bl	80004a4 <__aeabi_uldivmod>
 80037a6:	4603      	mov	r3, r0
 80037a8:	460c      	mov	r4, r1
 80037aa:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80037ac:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x364>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	0f1b      	lsrs	r3, r3, #28
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 80037b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80037ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c0:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80037c2:	e002      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <HAL_RCC_GetSysClockFreq+0x368>)
 80037c6:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80037c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3784      	adds	r7, #132	; 0x84
 80037d0:	46bd      	mov	sp, r7
 80037d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037d6:	bf00      	nop
 80037d8:	40023800 	.word	0x40023800
 80037dc:	00f42400 	.word	0x00f42400

080037e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8083 	beq.w	8003900 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80037fa:	4b95      	ldr	r3, [pc, #596]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b04      	cmp	r3, #4
 8003804:	d019      	beq.n	800383a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003806:	4b92      	ldr	r3, [pc, #584]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800380e:	2b08      	cmp	r3, #8
 8003810:	d106      	bne.n	8003820 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003812:	4b8f      	ldr	r3, [pc, #572]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800381e:	d00c      	beq.n	800383a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003820:	4b8b      	ldr	r3, [pc, #556]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003828:	2b0c      	cmp	r3, #12
 800382a:	d112      	bne.n	8003852 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800382c:	4b88      	ldr	r3, [pc, #544]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003834:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003838:	d10b      	bne.n	8003852 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383a:	4b85      	ldr	r3, [pc, #532]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d05b      	beq.n	80038fe <HAL_RCC_OscConfig+0x11e>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d157      	bne.n	80038fe <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e216      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385a:	d106      	bne.n	800386a <HAL_RCC_OscConfig+0x8a>
 800385c:	4a7c      	ldr	r2, [pc, #496]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 800385e:	4b7c      	ldr	r3, [pc, #496]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	e01d      	b.n	80038a6 <HAL_RCC_OscConfig+0xc6>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003872:	d10c      	bne.n	800388e <HAL_RCC_OscConfig+0xae>
 8003874:	4a76      	ldr	r2, [pc, #472]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003876:	4b76      	ldr	r3, [pc, #472]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800387e:	6013      	str	r3, [r2, #0]
 8003880:	4a73      	ldr	r2, [pc, #460]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003882:	4b73      	ldr	r3, [pc, #460]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	e00b      	b.n	80038a6 <HAL_RCC_OscConfig+0xc6>
 800388e:	4a70      	ldr	r2, [pc, #448]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003890:	4b6f      	ldr	r3, [pc, #444]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	4a6d      	ldr	r2, [pc, #436]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 800389c:	4b6c      	ldr	r3, [pc, #432]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d013      	beq.n	80038d6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ae:	f7fc ffe7 	bl	8000880 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b6:	f7fc ffe3 	bl	8000880 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b64      	cmp	r3, #100	; 0x64
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e1db      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c8:	4b61      	ldr	r3, [pc, #388]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f0      	beq.n	80038b6 <HAL_RCC_OscConfig+0xd6>
 80038d4:	e014      	b.n	8003900 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d6:	f7fc ffd3 	bl	8000880 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038de:	f7fc ffcf 	bl	8000880 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b64      	cmp	r3, #100	; 0x64
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e1c7      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f0:	4b57      	ldr	r3, [pc, #348]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1f0      	bne.n	80038de <HAL_RCC_OscConfig+0xfe>
 80038fc:	e000      	b.n	8003900 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d06f      	beq.n	80039ec <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800390c:	4b50      	ldr	r3, [pc, #320]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 030c 	and.w	r3, r3, #12
 8003914:	2b00      	cmp	r3, #0
 8003916:	d017      	beq.n	8003948 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003918:	4b4d      	ldr	r3, [pc, #308]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003920:	2b08      	cmp	r3, #8
 8003922:	d105      	bne.n	8003930 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003924:	4b4a      	ldr	r3, [pc, #296]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00b      	beq.n	8003948 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003930:	4b47      	ldr	r3, [pc, #284]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003938:	2b0c      	cmp	r3, #12
 800393a:	d11c      	bne.n	8003976 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800393c:	4b44      	ldr	r3, [pc, #272]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d116      	bne.n	8003976 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003948:	4b41      	ldr	r3, [pc, #260]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_RCC_OscConfig+0x180>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d001      	beq.n	8003960 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e18f      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003960:	493b      	ldr	r1, [pc, #236]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003962:	4b3b      	ldr	r3, [pc, #236]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4313      	orrs	r3, r2
 8003972:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003974:	e03a      	b.n	80039ec <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d020      	beq.n	80039c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800397e:	4b35      	ldr	r3, [pc, #212]	; (8003a54 <HAL_RCC_OscConfig+0x274>)
 8003980:	2201      	movs	r2, #1
 8003982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fc ff7c 	bl	8000880 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800398c:	f7fc ff78 	bl	8000880 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e170      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399e:	4b2c      	ldr	r3, [pc, #176]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039aa:	4929      	ldr	r1, [pc, #164]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 80039ac:	4b28      	ldr	r3, [pc, #160]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4313      	orrs	r3, r2
 80039bc:	600b      	str	r3, [r1, #0]
 80039be:	e015      	b.n	80039ec <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039c0:	4b24      	ldr	r3, [pc, #144]	; (8003a54 <HAL_RCC_OscConfig+0x274>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c6:	f7fc ff5b 	bl	8000880 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039ce:	f7fc ff57 	bl	8000880 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e14f      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e0:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1f0      	bne.n	80039ce <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d037      	beq.n	8003a68 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d016      	beq.n	8003a2e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a00:	4b15      	ldr	r3, [pc, #84]	; (8003a58 <HAL_RCC_OscConfig+0x278>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a06:	f7fc ff3b 	bl	8000880 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a0e:	f7fc ff37 	bl	8000880 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e12f      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCC_OscConfig+0x22e>
 8003a2c:	e01c      	b.n	8003a68 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <HAL_RCC_OscConfig+0x278>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a34:	f7fc ff24 	bl	8000880 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a3a:	e00f      	b.n	8003a5c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a3c:	f7fc ff20 	bl	8000880 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d908      	bls.n	8003a5c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e118      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
 8003a4e:	bf00      	nop
 8003a50:	40023800 	.word	0x40023800
 8003a54:	42470000 	.word	0x42470000
 8003a58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a5c:	4b8a      	ldr	r3, [pc, #552]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1e9      	bne.n	8003a3c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 8097 	beq.w	8003ba4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a76:	2300      	movs	r3, #0
 8003a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a7a:	4b83      	ldr	r3, [pc, #524]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10f      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	4a7f      	ldr	r2, [pc, #508]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003a8c:	4b7e      	ldr	r3, [pc, #504]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a94:	6413      	str	r3, [r2, #64]	; 0x40
 8003a96:	4b7c      	ldr	r3, [pc, #496]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa6:	4b79      	ldr	r3, [pc, #484]	; (8003c8c <HAL_RCC_OscConfig+0x4ac>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d118      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ab2:	4a76      	ldr	r2, [pc, #472]	; (8003c8c <HAL_RCC_OscConfig+0x4ac>)
 8003ab4:	4b75      	ldr	r3, [pc, #468]	; (8003c8c <HAL_RCC_OscConfig+0x4ac>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003abe:	f7fc fedf 	bl	8000880 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac6:	f7fc fedb 	bl	8000880 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e0d3      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad8:	4b6c      	ldr	r3, [pc, #432]	; (8003c8c <HAL_RCC_OscConfig+0x4ac>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d106      	bne.n	8003afa <HAL_RCC_OscConfig+0x31a>
 8003aec:	4a66      	ldr	r2, [pc, #408]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003aee:	4b66      	ldr	r3, [pc, #408]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	6713      	str	r3, [r2, #112]	; 0x70
 8003af8:	e01c      	b.n	8003b34 <HAL_RCC_OscConfig+0x354>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b05      	cmp	r3, #5
 8003b00:	d10c      	bne.n	8003b1c <HAL_RCC_OscConfig+0x33c>
 8003b02:	4a61      	ldr	r2, [pc, #388]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b04:	4b60      	ldr	r3, [pc, #384]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b08:	f043 0304 	orr.w	r3, r3, #4
 8003b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b0e:	4a5e      	ldr	r2, [pc, #376]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b10:	4b5d      	ldr	r3, [pc, #372]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1a:	e00b      	b.n	8003b34 <HAL_RCC_OscConfig+0x354>
 8003b1c:	4a5a      	ldr	r2, [pc, #360]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b1e:	4b5a      	ldr	r3, [pc, #360]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	f023 0301 	bic.w	r3, r3, #1
 8003b26:	6713      	str	r3, [r2, #112]	; 0x70
 8003b28:	4a57      	ldr	r2, [pc, #348]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b2a:	4b57      	ldr	r3, [pc, #348]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2e:	f023 0304 	bic.w	r3, r3, #4
 8003b32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d015      	beq.n	8003b68 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3c:	f7fc fea0 	bl	8000880 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b42:	e00a      	b.n	8003b5a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b44:	f7fc fe9c 	bl	8000880 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e092      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5a:	4b4b      	ldr	r3, [pc, #300]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0ee      	beq.n	8003b44 <HAL_RCC_OscConfig+0x364>
 8003b66:	e014      	b.n	8003b92 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b68:	f7fc fe8a 	bl	8000880 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b6e:	e00a      	b.n	8003b86 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b70:	f7fc fe86 	bl	8000880 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e07c      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b86:	4b40      	ldr	r3, [pc, #256]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1ee      	bne.n	8003b70 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b92:	7dfb      	ldrb	r3, [r7, #23]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d105      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b98:	4a3b      	ldr	r2, [pc, #236]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b9a:	4b3b      	ldr	r3, [pc, #236]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d068      	beq.n	8003c7e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bac:	4b36      	ldr	r3, [pc, #216]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 030c 	and.w	r3, r3, #12
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d060      	beq.n	8003c7a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d145      	bne.n	8003c4c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc0:	4b33      	ldr	r3, [pc, #204]	; (8003c90 <HAL_RCC_OscConfig+0x4b0>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc6:	f7fc fe5b 	bl	8000880 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bce:	f7fc fe57 	bl	8000880 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e04f      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be0:	4b29      	ldr	r3, [pc, #164]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1f0      	bne.n	8003bce <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bec:	4926      	ldr	r1, [pc, #152]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69da      	ldr	r2, [r3, #28]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	019b      	lsls	r3, r3, #6
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c04:	085b      	lsrs	r3, r3, #1
 8003c06:	3b01      	subs	r3, #1
 8003c08:	041b      	lsls	r3, r3, #16
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	061b      	lsls	r3, r3, #24
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c18:	071b      	lsls	r3, r3, #28
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c1e:	4b1c      	ldr	r3, [pc, #112]	; (8003c90 <HAL_RCC_OscConfig+0x4b0>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c24:	f7fc fe2c 	bl	8000880 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c2c:	f7fc fe28 	bl	8000880 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e020      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3e:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x44c>
 8003c4a:	e018      	b.n	8003c7e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4c:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <HAL_RCC_OscConfig+0x4b0>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c52:	f7fc fe15 	bl	8000880 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c5a:	f7fc fe11 	bl	8000880 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e009      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6c:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1f0      	bne.n	8003c5a <HAL_RCC_OscConfig+0x47a>
 8003c78:	e001      	b.n	8003c7e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	40007000 	.word	0x40007000
 8003c90:	42470060 	.word	0x42470060

08003c94 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e03f      	b.n	8003d26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d106      	bne.n	8003cc0 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f007 fc86 	bl	800b5cc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2224      	movs	r2, #36	; 0x24
 8003cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	68d2      	ldr	r2, [r2, #12]
 8003cd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cd6:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f829 	bl	8003d30 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6812      	ldr	r2, [r2, #0]
 8003ce6:	6912      	ldr	r2, [r2, #16]
 8003ce8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6812      	ldr	r2, [r2, #0]
 8003cf6:	6952      	ldr	r2, [r2, #20]
 8003cf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cfc:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	68d2      	ldr	r2, [r2, #12]
 8003d08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d0c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d6c:	f023 030c 	bic.w	r3, r3, #12
 8003d70:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da4:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc0:	f040 80e4 	bne.w	8003f8c <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4aab      	ldr	r2, [pc, #684]	; (8004078 <UART_SetConfig+0x348>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d004      	beq.n	8003dd8 <UART_SetConfig+0xa8>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4aaa      	ldr	r2, [pc, #680]	; (800407c <UART_SetConfig+0x34c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d16c      	bne.n	8003eb2 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681c      	ldr	r4, [r3, #0]
 8003ddc:	f7ff f80c 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 8003de0:	4602      	mov	r2, r0
 8003de2:	4613      	mov	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	009a      	lsls	r2, r3, #2
 8003dea:	441a      	add	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df6:	4aa2      	ldr	r2, [pc, #648]	; (8004080 <UART_SetConfig+0x350>)
 8003df8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	011d      	lsls	r5, r3, #4
 8003e00:	f7fe fffa 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 8003e04:	4602      	mov	r2, r0
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009a      	lsls	r2, r3, #2
 8003e0e:	441a      	add	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	fbb2 f6f3 	udiv	r6, r2, r3
 8003e1a:	f7fe ffed 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	009a      	lsls	r2, r3, #2
 8003e28:	441a      	add	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e34:	4a92      	ldr	r2, [pc, #584]	; (8004080 <UART_SetConfig+0x350>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	2264      	movs	r2, #100	; 0x64
 8003e3e:	fb02 f303 	mul.w	r3, r2, r3
 8003e42:	1af3      	subs	r3, r6, r3
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	3332      	adds	r3, #50	; 0x32
 8003e48:	4a8d      	ldr	r2, [pc, #564]	; (8004080 <UART_SetConfig+0x350>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e56:	441d      	add	r5, r3
 8003e58:	f7fe ffce 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	4613      	mov	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	009a      	lsls	r2, r3, #2
 8003e66:	441a      	add	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	fbb2 f6f3 	udiv	r6, r2, r3
 8003e72:	f7fe ffc1 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 8003e76:	4602      	mov	r2, r0
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009a      	lsls	r2, r3, #2
 8003e80:	441a      	add	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8c:	4a7c      	ldr	r2, [pc, #496]	; (8004080 <UART_SetConfig+0x350>)
 8003e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	2264      	movs	r2, #100	; 0x64
 8003e96:	fb02 f303 	mul.w	r3, r2, r3
 8003e9a:	1af3      	subs	r3, r6, r3
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	3332      	adds	r3, #50	; 0x32
 8003ea0:	4a77      	ldr	r2, [pc, #476]	; (8004080 <UART_SetConfig+0x350>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	442b      	add	r3, r5
 8003eae:	60a3      	str	r3, [r4, #8]
 8003eb0:	e154      	b.n	800415c <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681c      	ldr	r4, [r3, #0]
 8003eb6:	f7fe ff8b 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009a      	lsls	r2, r3, #2
 8003ec4:	441a      	add	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed0:	4a6b      	ldr	r2, [pc, #428]	; (8004080 <UART_SetConfig+0x350>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	011d      	lsls	r5, r3, #4
 8003eda:	f7fe ff79 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009a      	lsls	r2, r3, #2
 8003ee8:	441a      	add	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003ef4:	f7fe ff6c 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	4613      	mov	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	009a      	lsls	r2, r3, #2
 8003f02:	441a      	add	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0e:	4a5c      	ldr	r2, [pc, #368]	; (8004080 <UART_SetConfig+0x350>)
 8003f10:	fba2 2303 	umull	r2, r3, r2, r3
 8003f14:	095b      	lsrs	r3, r3, #5
 8003f16:	2264      	movs	r2, #100	; 0x64
 8003f18:	fb02 f303 	mul.w	r3, r2, r3
 8003f1c:	1af3      	subs	r3, r6, r3
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	3332      	adds	r3, #50	; 0x32
 8003f22:	4a57      	ldr	r2, [pc, #348]	; (8004080 <UART_SetConfig+0x350>)
 8003f24:	fba2 2303 	umull	r2, r3, r2, r3
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f30:	441d      	add	r5, r3
 8003f32:	f7fe ff4d 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8003f36:	4602      	mov	r2, r0
 8003f38:	4613      	mov	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009a      	lsls	r2, r3, #2
 8003f40:	441a      	add	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	fbb2 f6f3 	udiv	r6, r2, r3
 8003f4c:	f7fe ff40 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8003f50:	4602      	mov	r2, r0
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	009a      	lsls	r2, r3, #2
 8003f5a:	441a      	add	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f66:	4a46      	ldr	r2, [pc, #280]	; (8004080 <UART_SetConfig+0x350>)
 8003f68:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6c:	095b      	lsrs	r3, r3, #5
 8003f6e:	2264      	movs	r2, #100	; 0x64
 8003f70:	fb02 f303 	mul.w	r3, r2, r3
 8003f74:	1af3      	subs	r3, r6, r3
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	3332      	adds	r3, #50	; 0x32
 8003f7a:	4a41      	ldr	r2, [pc, #260]	; (8004080 <UART_SetConfig+0x350>)
 8003f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	442b      	add	r3, r5
 8003f88:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003f8a:	e0e7      	b.n	800415c <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a39      	ldr	r2, [pc, #228]	; (8004078 <UART_SetConfig+0x348>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d004      	beq.n	8003fa0 <UART_SetConfig+0x270>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a38      	ldr	r2, [pc, #224]	; (800407c <UART_SetConfig+0x34c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d171      	bne.n	8004084 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681c      	ldr	r4, [r3, #0]
 8003fa4:	f7fe ff28 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	4613      	mov	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	009a      	lsls	r2, r3, #2
 8003fb2:	441a      	add	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbe:	4a30      	ldr	r2, [pc, #192]	; (8004080 <UART_SetConfig+0x350>)
 8003fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc4:	095b      	lsrs	r3, r3, #5
 8003fc6:	011d      	lsls	r5, r3, #4
 8003fc8:	f7fe ff16 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	4613      	mov	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009a      	lsls	r2, r3, #2
 8003fd6:	441a      	add	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	fbb2 f6f3 	udiv	r6, r2, r3
 8003fe2:	f7fe ff09 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	009a      	lsls	r2, r3, #2
 8003ff0:	441a      	add	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffc:	4a20      	ldr	r2, [pc, #128]	; (8004080 <UART_SetConfig+0x350>)
 8003ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8004002:	095b      	lsrs	r3, r3, #5
 8004004:	2264      	movs	r2, #100	; 0x64
 8004006:	fb02 f303 	mul.w	r3, r2, r3
 800400a:	1af3      	subs	r3, r6, r3
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	3332      	adds	r3, #50	; 0x32
 8004010:	4a1b      	ldr	r2, [pc, #108]	; (8004080 <UART_SetConfig+0x350>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800401c:	441d      	add	r5, r3
 800401e:	f7fe feeb 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 8004022:	4602      	mov	r2, r0
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	009a      	lsls	r2, r3, #2
 800402c:	441a      	add	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	fbb2 f6f3 	udiv	r6, r2, r3
 8004038:	f7fe fede 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 800403c:	4602      	mov	r2, r0
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	009a      	lsls	r2, r3, #2
 8004046:	441a      	add	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004052:	4a0b      	ldr	r2, [pc, #44]	; (8004080 <UART_SetConfig+0x350>)
 8004054:	fba2 2303 	umull	r2, r3, r2, r3
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	2264      	movs	r2, #100	; 0x64
 800405c:	fb02 f303 	mul.w	r3, r2, r3
 8004060:	1af3      	subs	r3, r6, r3
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	3332      	adds	r3, #50	; 0x32
 8004066:	4a06      	ldr	r2, [pc, #24]	; (8004080 <UART_SetConfig+0x350>)
 8004068:	fba2 2303 	umull	r2, r3, r2, r3
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	442b      	add	r3, r5
 8004074:	60a3      	str	r3, [r4, #8]
 8004076:	e071      	b.n	800415c <UART_SetConfig+0x42c>
 8004078:	40011000 	.word	0x40011000
 800407c:	40011400 	.word	0x40011400
 8004080:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681c      	ldr	r4, [r3, #0]
 8004088:	f7fe fea2 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 800408c:	4602      	mov	r2, r0
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	009a      	lsls	r2, r3, #2
 8004096:	441a      	add	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a2:	4a30      	ldr	r2, [pc, #192]	; (8004164 <UART_SetConfig+0x434>)
 80040a4:	fba2 2303 	umull	r2, r3, r2, r3
 80040a8:	095b      	lsrs	r3, r3, #5
 80040aa:	011d      	lsls	r5, r3, #4
 80040ac:	f7fe fe90 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	009a      	lsls	r2, r3, #2
 80040ba:	441a      	add	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80040c6:	f7fe fe83 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 80040ca:	4602      	mov	r2, r0
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	009a      	lsls	r2, r3, #2
 80040d4:	441a      	add	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	4a20      	ldr	r2, [pc, #128]	; (8004164 <UART_SetConfig+0x434>)
 80040e2:	fba2 2303 	umull	r2, r3, r2, r3
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	2264      	movs	r2, #100	; 0x64
 80040ea:	fb02 f303 	mul.w	r3, r2, r3
 80040ee:	1af3      	subs	r3, r6, r3
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	3332      	adds	r3, #50	; 0x32
 80040f4:	4a1b      	ldr	r2, [pc, #108]	; (8004164 <UART_SetConfig+0x434>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004100:	441d      	add	r5, r3
 8004102:	f7fe fe65 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8004106:	4602      	mov	r2, r0
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	009a      	lsls	r2, r3, #2
 8004110:	441a      	add	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	fbb2 f6f3 	udiv	r6, r2, r3
 800411c:	f7fe fe58 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8004120:	4602      	mov	r2, r0
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	009a      	lsls	r2, r3, #2
 800412a:	441a      	add	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	fbb2 f3f3 	udiv	r3, r2, r3
 8004136:	4a0b      	ldr	r2, [pc, #44]	; (8004164 <UART_SetConfig+0x434>)
 8004138:	fba2 2303 	umull	r2, r3, r2, r3
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	2264      	movs	r2, #100	; 0x64
 8004140:	fb02 f303 	mul.w	r3, r2, r3
 8004144:	1af3      	subs	r3, r6, r3
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	3332      	adds	r3, #50	; 0x32
 800414a:	4a06      	ldr	r2, [pc, #24]	; (8004164 <UART_SetConfig+0x434>)
 800414c:	fba2 2303 	umull	r2, r3, r2, r3
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	442b      	add	r3, r5
 8004158:	60a3      	str	r3, [r4, #8]
}
 800415a:	e7ff      	b.n	800415c <UART_SetConfig+0x42c>
 800415c:	bf00      	nop
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004164:	51eb851f 	.word	0x51eb851f

08004168 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004168:	b084      	sub	sp, #16
 800416a:	b580      	push	{r7, lr}
 800416c:	b082      	sub	sp, #8
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	f107 0014 	add.w	r0, r7, #20
 8004176:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417c:	2b01      	cmp	r3, #1
 800417e:	d120      	bne.n	80041c2 <USB_CoreInit+0x5a>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	60d3      	str	r3, [r2, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1U)
 80041a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d105      	bne.n	80041ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f936 	bl	800442c <USB_CoreReset>
 80041c0:	e00c      	b.n	80041dc <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f92c 	bl	800442c <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80041da:	639a      	str	r2, [r3, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d10b      	bne.n	80041fa <USB_CoreInit+0x92>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f043 0206 	orr.w	r2, r3, #6
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f043 0220 	orr.w	r2, r3, #32
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	609a      	str	r2, [r3, #8]
  }  

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004206:	b004      	add	sp, #16
 8004208:	4770      	bx	lr

0800420a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f043 0201 	orr.w	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f023 0201 	bic.w	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b082      	sub	sp, #8
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	460b      	mov	r3, r1
 8004258:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8004266:	78fb      	ldrb	r3, [r7, #3]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d106      	bne.n	800427a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	60da      	str	r2, [r3, #12]
 8004278:	e008      	b.n	800428c <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 800427a:	78fb      	ldrb	r3, [r7, #3]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d105      	bne.n	800428c <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50U);
 800428c:	2032      	movs	r0, #50	; 0x32
 800428e:	f7fc fb03 	bl	8000898 <HAL_Delay>
  
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	019b      	lsls	r3, r3, #6
 80042ae:	f043 0220 	orr.w	r2, r3, #32
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3301      	adds	r3, #1
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4a09      	ldr	r2, [pc, #36]	; (80042e4 <USB_FlushTxFifo+0x48>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d901      	bls.n	80042c8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e006      	b.n	80042d6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b20      	cmp	r3, #32
 80042d2:	d0f0      	beq.n	80042b6 <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	00030d40 	.word	0x00030d40

080042e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2210      	movs	r2, #16
 80042f8:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	3301      	adds	r3, #1
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4a09      	ldr	r2, [pc, #36]	; (8004328 <USB_FlushRxFifo+0x40>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d901      	bls.n	800430c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e006      	b.n	800431a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	2b10      	cmp	r3, #16
 8004316:	d0f0      	beq.n	80042fa <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	00030d40 	.word	0x00030d40

0800432c <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	4611      	mov	r1, r2
 8004338:	461a      	mov	r2, r3
 800433a:	460b      	mov	r3, r1
 800433c:	71fb      	strb	r3, [r7, #7]
 800433e:	4613      	mov	r3, r2
 8004340:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0U , i = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
  
  if (dma == 0U)
 800434a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d11a      	bne.n	8004388 <USB_WritePacket+0x5c>
  {
    count32b =  (len + 3U) / 4U;
 8004352:	88bb      	ldrh	r3, [r7, #4]
 8004354:	3303      	adds	r3, #3
 8004356:	089b      	lsrs	r3, r3, #2
 8004358:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++, src += 4U)
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	e00f      	b.n	8004380 <USB_WritePacket+0x54>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8004360:	79fb      	ldrb	r3, [r7, #7]
 8004362:	031a      	lsls	r2, r3, #12
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4413      	add	r3, r2
 8004368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800436c:	461a      	mov	r2, r3
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6013      	str	r3, [r2, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	3301      	adds	r3, #1
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	3304      	adds	r3, #4
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	429a      	cmp	r2, r3
 8004386:	d3eb      	bcc.n	8004360 <USB_WritePacket+0x34>
    }
  }
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004396:	b480      	push	{r7}
 8004398:	b087      	sub	sp, #28
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	4613      	mov	r3, r2
 80043a2:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3U) / 4U;
 80043a8:	88fb      	ldrh	r3, [r7, #6]
 80043aa:	3303      	adds	r3, #3
 80043ac:	089b      	lsrs	r3, r3, #2
 80043ae:	613b      	str	r3, [r7, #16]
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	e00b      	b.n	80043ce <USB_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	601a      	str	r2, [r3, #0]
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	3301      	adds	r3, #1
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	3304      	adds	r3, #4
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d3ef      	bcc.n	80043b6 <USB_ReadPacket+0x20>
    
  }
  return ((void *)dest);
 80043d6:	68bb      	ldr	r3, [r7, #8]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	371c      	adds	r7, #28
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t v = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4013      	ands	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
  return v;  
 8004400:	68fb      	ldr	r3, [r7, #12]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1U);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f003 0301 	and.w	r3, r3, #1
}
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3301      	adds	r3, #1
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4a13      	ldr	r2, [pc, #76]	; (8004490 <USB_CoreReset+0x64>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e01b      	b.n	8004482 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	daf2      	bge.n	8004438 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0U;
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f043 0201 	orr.w	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	3301      	adds	r3, #1
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4a09      	ldr	r2, [pc, #36]	; (8004490 <USB_CoreReset+0x64>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d901      	bls.n	8004474 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e006      	b.n	8004482 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b01      	cmp	r3, #1
 800447e:	d0f0      	beq.n	8004462 <USB_CoreReset+0x36>
  
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	00030d40 	.word	0x00030d40

08004494 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004494:	b084      	sub	sp, #16
 8004496:	b580      	push	{r7, lr}
 8004498:	b084      	sub	sp, #16
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	f107 001c 	add.w	r0, r7, #28
 80044a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i;
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044ac:	461a      	mov	r2, r3
 80044ae:	2300      	movs	r3, #0
 80044b0:	6013      	str	r3, [r2, #0]
  
  /* Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d10f      	bne.n	80044e4 <USB_HostInit+0x50>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044ca:	d00b      	beq.n	80044e4 <USB_HostInit+0x50>
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044d2:	461a      	mov	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f043 0304 	orr.w	r3, r3, #4
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	e00a      	b.n	80044fa <USB_HostInit+0x66>
  }
  else
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044ea:	461a      	mov	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f023 0304 	bic.w	r3, r3, #4
 80044f8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80044fa:	2110      	movs	r1, #16
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff fecd 	bl	800429c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff fef0 	bl	80042e8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	e015      	b.n	800453a <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4413      	add	r3, r2
 8004516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800451a:	461a      	mov	r2, r3
 800451c:	f04f 33ff 	mov.w	r3, #4294967295
 8004520:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4413      	add	r3, r2
 800452a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452e:	461a      	mov	r2, r3
 8004530:	2300      	movs	r3, #0
 8004532:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3301      	adds	r3, #1
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	6a3a      	ldr	r2, [r7, #32]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	429a      	cmp	r2, r3
 8004540:	d8e5      	bhi.n	800450e <USB_HostInit+0x7a>
  }
  
  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1U);
 8004542:	2101      	movs	r1, #1
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f8a4 	bl	8004692 <USB_DriveVbus>
  
  HAL_Delay(200U);
 800454a:	20c8      	movs	r0, #200	; 0xc8
 800454c:	f7fc f9a4 	bl	8000898 <HAL_Delay>
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f04f 32ff 	mov.w	r2, #4294967295
 800455c:	615a      	str	r2, [r3, #20]
  
  if(USBx == USB_OTG_FS)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004564:	d10a      	bne.n	800457c <USB_HostInit+0xe8>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U; 
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2280      	movs	r2, #128	; 0x80
 800456a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a14      	ldr	r2, [pc, #80]	; (80045c0 <USB_HostInit+0x12c>)
 8004570:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a13      	ldr	r2, [pc, #76]	; (80045c4 <USB_HostInit+0x130>)
 8004576:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800457a:	e00a      	b.n	8004592 <USB_HostInit+0xfe>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U; 
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004582:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a10      	ldr	r2, [pc, #64]	; (80045c8 <USB_HostInit+0x134>)
 8004588:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a0f      	ldr	r2, [pc, #60]	; (80045cc <USB_HostInit+0x138>)
 800458e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }
  
  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004594:	2b00      	cmp	r3, #0
 8004596:	d105      	bne.n	80045a4 <USB_HostInit+0x110>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	f043 0210 	orr.w	r2, r3, #16
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699a      	ldr	r2, [r3, #24]
 80045a8:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <USB_HostInit+0x13c>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045bc:	b004      	add	sp, #16
 80045be:	4770      	bx	lr
 80045c0:	00600080 	.word	0x00600080
 80045c4:	004000e0 	.word	0x004000e0
 80045c8:	01000200 	.word	0x01000200
 80045cc:	00e00300 	.word	0x00e00300
 80045d0:	a3200008 	.word	0xa3200008

080045d4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock 
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	460b      	mov	r3, r1
 80045de:	70fb      	strb	r3, [r7, #3]
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045e6:	461a      	mov	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f023 0303 	bic.w	r3, r3, #3
 80045f4:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045fc:	4619      	mov	r1, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	78fb      	ldrb	r3, [r7, #3]
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	4313      	orrs	r3, r2
 800460e:	600b      	str	r3, [r1, #0]
  
  if (freq ==  HCFG_48_MHZ)
 8004610:	78fb      	ldrb	r3, [r7, #3]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d107      	bne.n	8004626 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800461c:	461a      	mov	r2, r3
 800461e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004622:	6053      	str	r3, [r2, #4]
 8004624:	e009      	b.n	800463a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq ==  HCFG_6_MHZ)
 8004626:	78fb      	ldrb	r3, [r7, #3]
 8004628:	2b02      	cmp	r3, #2
 800462a:	d106      	bne.n	800463a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004632:	461a      	mov	r2, r3
 8004634:	f241 7370 	movw	r3, #6000	; 0x1770
 8004638:	6053      	str	r3, [r2, #4]
  } 
  return HAL_OK;  
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <USB_ResetPort>:
  * @retval HAL status
  * @note   (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	60fb      	str	r3, [r7, #12]
  
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004660:	60fb      	str	r3, [r7, #12]
    USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004668:	461a      	mov	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004670:	6013      	str	r3, [r2, #0]
  HAL_Delay (10U);                                /* See Note #1 */
 8004672:	200a      	movs	r0, #10
 8004674:	f7fc f910 	bl	8000898 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800467e:	461a      	mov	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004686:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004692:	b480      	push	{r7}
 8004694:	b085      	sub	sp, #20
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	460b      	mov	r3, r1
 800469c:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80046ae:	60fb      	str	r3, [r7, #12]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10a      	bne.n	80046d0 <USB_DriveVbus+0x3e>
 80046ba:	78fb      	ldrb	r3, [r7, #3]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d107      	bne.n	80046d0 <USB_DriveVbus+0x3e>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046c6:	461a      	mov	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046ce:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046da:	d10a      	bne.n	80046f2 <USB_DriveVbus+0x60>
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d107      	bne.n	80046f2 <USB_DriveVbus+0x60>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046e8:	461a      	mov	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046f0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK; 
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	60fb      	str	r3, [r7, #12]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17U);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	0c5b      	lsrs	r3, r3, #17
 8004716:	f003 0303 	and.w	r3, r3, #3
}
 800471a:	4618      	mov	r0, r3
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	b29b      	uxth	r3, r3
}
 8004738:	4618      	mov	r0, r3
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	4608      	mov	r0, r1
 800474e:	4611      	mov	r1, r2
 8004750:	461a      	mov	r2, r3
 8004752:	4603      	mov	r3, r0
 8004754:	70fb      	strb	r3, [r7, #3]
 8004756:	460b      	mov	r3, r1
 8004758:	70bb      	strb	r3, [r7, #2]
 800475a:	4613      	mov	r3, r2
 800475c:	707b      	strb	r3, [r7, #1]
    
  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 800475e:	78fb      	ldrb	r3, [r7, #3]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4413      	add	r3, r2
 8004766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476a:	461a      	mov	r2, r3
 800476c:	f04f 33ff 	mov.w	r3, #4294967295
 8004770:	6093      	str	r3, [r2, #8]
  
  /* Enable channel interrupts required for this transfer. */
  switch (ep_type) 
 8004772:	7d3b      	ldrb	r3, [r7, #20]
 8004774:	2b03      	cmp	r3, #3
 8004776:	f200 8086 	bhi.w	8004886 <USB_HC_Init+0x142>
 800477a:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <USB_HC_Init+0x3c>)
 800477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004780:	08004791 	.word	0x08004791
 8004784:	0800483d 	.word	0x0800483d
 8004788:	08004791 	.word	0x08004791
 800478c:	080047fd 	.word	0x080047fd
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8004790:	78fb      	ldrb	r3, [r7, #3]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4413      	add	r3, r2
 8004798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800479c:	461a      	mov	r2, r3
 800479e:	f240 439d 	movw	r3, #1181	; 0x49d
 80047a2:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;
 
    if (epnum & 0x80U) 
 80047a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	da11      	bge.n	80047d0 <USB_HC_Init+0x8c>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b8:	4619      	mov	r1, r3
 80047ba:	78fb      	ldrb	r3, [r7, #3]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047cc:	60cb      	str	r3, [r1, #12]
      if(USBx != USB_OTG_FS)
      {
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
      }
    }
    break;
 80047ce:	e055      	b.n	800487c <USB_HC_Init+0x138>
      if(USBx != USB_OTG_FS)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047d6:	d051      	beq.n	800487c <USB_HC_Init+0x138>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e4:	4619      	mov	r1, r3
 80047e6:	78fb      	ldrb	r3, [r7, #3]
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80047f8:	60cb      	str	r3, [r1, #12]
    break;
 80047fa:	e03f      	b.n	800487c <USB_HC_Init+0x138>
    
  case EP_TYPE_INTR:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4413      	add	r3, r2
 8004804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004808:	461a      	mov	r2, r3
 800480a:	f240 639d 	movw	r3, #1693	; 0x69d
 800480e:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_NAKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
 8004810:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004814:	2b00      	cmp	r3, #0
 8004816:	da33      	bge.n	8004880 <USB_HC_Init+0x13c>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4413      	add	r3, r2
 8004820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004824:	4619      	mov	r1, r3
 8004826:	78fb      	ldrb	r3, [r7, #3]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4413      	add	r3, r2
 800482e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004838:	60cb      	str	r3, [r1, #12]
    }
    
    break;
 800483a:	e021      	b.n	8004880 <USB_HC_Init+0x13c>
  case EP_TYPE_ISOC:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 800483c:	78fb      	ldrb	r3, [r7, #3]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4413      	add	r3, r2
 8004844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004848:	461a      	mov	r2, r3
 800484a:	f240 2325 	movw	r3, #549	; 0x225
 800484e:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_ACKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;   
    
    if (epnum & 0x80U) 
 8004850:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004854:	2b00      	cmp	r3, #0
 8004856:	da15      	bge.n	8004884 <USB_HC_Init+0x140>
    {
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);      
 8004858:	78fb      	ldrb	r3, [r7, #3]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4413      	add	r3, r2
 8004860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004864:	4619      	mov	r1, r3
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4413      	add	r3, r2
 800486e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004878:	60cb      	str	r3, [r1, #12]
    }
    break;
 800487a:	e003      	b.n	8004884 <USB_HC_Init+0x140>
    break;
 800487c:	bf00      	nop
 800487e:	e002      	b.n	8004886 <USB_HC_Init+0x142>
    break;
 8004880:	bf00      	nop
 8004882:	e000      	b.n	8004886 <USB_HC_Init+0x142>
    break;
 8004884:	bf00      	nop
  }
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800488c:	4618      	mov	r0, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	78fa      	ldrb	r2, [r7, #3]
 8004898:	2101      	movs	r1, #1
 800489a:	fa01 f202 	lsl.w	r2, r1, r2
 800489e:	4313      	orrs	r3, r2
 80048a0:	6183      	str	r3, [r0, #24]
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	619a      	str	r2, [r3, #24]
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80048ae:	78fb      	ldrb	r3, [r7, #3]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ba:	4619      	mov	r1, r3
 80048bc:	787b      	ldrb	r3, [r7, #1]
 80048be:	059b      	lsls	r3, r3, #22
 80048c0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 80048c4:	78bb      	ldrb	r3, [r7, #2]
 80048c6:	02db      	lsls	r3, r3, #11
 80048c8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80048cc:	431a      	orrs	r2, r3
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 80048ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	da02      	bge.n	80048dc <USB_HC_Init+0x198>
 80048d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048da:	e000      	b.n	80048de <USB_HC_Init+0x19a>
 80048dc:	2300      	movs	r3, #0
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 80048de:	431a      	orrs	r2, r3
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80048e0:	7c3b      	ldrb	r3, [r7, #16]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d102      	bne.n	80048ec <USB_HC_Init+0x1a8>
 80048e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048ea:	e000      	b.n	80048ee <USB_HC_Init+0x1aa>
 80048ec:	2300      	movs	r3, #0
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 80048ee:	431a      	orrs	r2, r3
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 80048f0:	7d3b      	ldrb	r3, [r7, #20]
 80048f2:	049b      	lsls	r3, r3, #18
 80048f4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80048f8:	431a      	orrs	r2, r3
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 80048fa:	8b3b      	ldrh	r3, [r7, #24]
 80048fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8004900:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8004902:	600b      	str	r3, [r1, #0]
    
  if (ep_type == EP_TYPE_INTR)
 8004904:	7d3b      	ldrb	r3, [r7, #20]
 8004906:	2b03      	cmp	r3, #3
 8004908:	d110      	bne.n	800492c <USB_HC_Init+0x1e8>
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800490a:	78fb      	ldrb	r3, [r7, #3]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4413      	add	r3, r2
 8004912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004916:	4619      	mov	r1, r3
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4413      	add	r3, r2
 8004920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800492a:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK; 
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop

0800493c <USB_HC_StartXfer>:
#pragma O0
#elif defined (__GNUC__) /*!< GNU Compiler */
#pragma GCC optimize ("O0")
#endif /* __CC_ARM */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08a      	sub	sp, #40	; 0x28
 8004940:	af02      	add	r7, sp, #8
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	4613      	mov	r3, r2
 8004948:	71fb      	strb	r3, [r7, #7]
  uint8_t  is_oddframe = 0; 
 800494a:	2300      	movs	r3, #0
 800494c:	777b      	strb	r3, [r7, #29]
  uint16_t len_words = 0;   
 800494e:	2300      	movs	r3, #0
 8004950:	837b      	strh	r3, [r7, #26]
  uint16_t num_packets = 0;
 8004952:	2300      	movs	r3, #0
 8004954:	83fb      	strh	r3, [r7, #30]
  uint16_t max_hc_pkt_count = 256;
 8004956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800495a:	833b      	strh	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]
    
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004966:	d02b      	beq.n	80049c0 <USB_HC_StartXfer+0x84>
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	791b      	ldrb	r3, [r3, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d127      	bne.n	80049c0 <USB_HC_StartXfer+0x84>
  {
    if((dma == 0) && (hc->do_ping == 1U))
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10b      	bne.n	800498e <USB_HC_StartXfer+0x52>
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	795b      	ldrb	r3, [r3, #5]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d107      	bne.n	800498e <USB_HC_StartXfer+0x52>
    {
      USB_DoPing(USBx, hc->ch_num);
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	785b      	ldrb	r3, [r3, #1]
 8004982:	4619      	mov	r1, r3
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 fa0f 	bl	8004da8 <USB_DoPing>
      return HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	e10d      	b.n	8004baa <USB_HC_StartXfer+0x26e>
    }
    else if(dma == 1)
 800498e:	79fb      	ldrb	r3, [r7, #7]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d115      	bne.n	80049c0 <USB_HC_StartXfer+0x84>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	785b      	ldrb	r3, [r3, #1]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4413      	add	r3, r2
 800499e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a2:	4619      	mov	r1, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	785b      	ldrb	r3, [r3, #1]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80049b8:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0U;
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2200      	movs	r2, #0
 80049be:	715a      	strb	r2, [r3, #5]
    }
  }
  
  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d019      	beq.n	80049fc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1U) / hc->max_packet;
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	8912      	ldrh	r2, [r2, #8]
 80049d0:	4413      	add	r3, r2
 80049d2:	3b01      	subs	r3, #1
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	8912      	ldrh	r2, [r2, #8]
 80049d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80049dc:	83fb      	strh	r3, [r7, #30]
    
    if (num_packets > max_hc_pkt_count)
 80049de:	8bfa      	ldrh	r2, [r7, #30]
 80049e0:	8b3b      	ldrh	r3, [r7, #24]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d90c      	bls.n	8004a00 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80049e6:	8b3b      	ldrh	r3, [r7, #24]
 80049e8:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = num_packets * hc->max_packet;
 80049ea:	8bfb      	ldrh	r3, [r7, #30]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	8912      	ldrh	r2, [r2, #8]
 80049f0:	fb02 f303 	mul.w	r3, r2, r3
 80049f4:	461a      	mov	r2, r3
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	611a      	str	r2, [r3, #16]
 80049fa:	e001      	b.n	8004a00 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1;
 80049fc:	2301      	movs	r3, #1
 80049fe:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	78db      	ldrb	r3, [r3, #3]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <USB_HC_StartXfer+0xdc>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 8004a08:	8bfb      	ldrh	r3, [r7, #30]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	8912      	ldrh	r2, [r2, #8]
 8004a0e:	fb02 f303 	mul.w	r3, r2, r3
 8004a12:	461a      	mov	r2, r3
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	611a      	str	r2, [r3, #16]
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	785b      	ldrb	r3, [r3, #1]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a26:	4619      	mov	r1, r3
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8004a30:	8bfb      	ldrh	r3, [r7, #30]
 8004a32:	04db      	lsls	r3, r3, #19
 8004a34:	4618      	mov	r0, r3
 8004a36:	4b5f      	ldr	r3, [pc, #380]	; (8004bb4 <USB_HC_StartXfer+0x278>)
 8004a38:	4003      	ands	r3, r0
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004a3a:	431a      	orrs	r2, r3
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	7a9b      	ldrb	r3, [r3, #10]
 8004a40:	075b      	lsls	r3, r3, #29
 8004a42:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8004a46:	4313      	orrs	r3, r2
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004a48:	610b      	str	r3, [r1, #16]
  
  if (dma)
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00a      	beq.n	8004a66 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	785b      	ldrb	r3, [r3, #1]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5e:	461a      	mov	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	6153      	str	r3, [r2, #20]
  }
  
  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	bf0c      	ite	eq
 8004a76:	2301      	moveq	r3, #1
 8004a78:	2300      	movne	r3, #0
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	777b      	strb	r3, [r7, #29]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	785b      	ldrb	r3, [r3, #1]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	785b      	ldrb	r3, [r3, #1]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004aa2:	600b      	str	r3, [r1, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	785b      	ldrb	r3, [r3, #1]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	785b      	ldrb	r3, [r3, #1]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	7f7a      	ldrb	r2, [r7, #29]
 8004ac6:	0752      	lsls	r2, r2, #29
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	600b      	str	r3, [r1, #0]
  
  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	785b      	ldrb	r3, [r3, #1]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	617b      	str	r3, [r7, #20]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ae4:	617b      	str	r3, [r7, #20]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004aec:	617b      	str	r3, [r7, #20]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	785b      	ldrb	r3, [r3, #1]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afc:	461a      	mov	r2, r3
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	6013      	str	r3, [r2, #0]
  
  if (dma == 0) /* Slave mode */
 8004b02:	79fb      	ldrb	r3, [r7, #7]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d14f      	bne.n	8004ba8 <USB_HC_StartXfer+0x26c>
  {  
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	78db      	ldrb	r3, [r3, #3]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d14b      	bne.n	8004ba8 <USB_HC_StartXfer+0x26c>
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d047      	beq.n	8004ba8 <USB_HC_StartXfer+0x26c>
    {
      switch(hc->ep_type) 
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	79db      	ldrb	r3, [r3, #7]
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d831      	bhi.n	8004b84 <USB_HC_StartXfer+0x248>
 8004b20:	a201      	add	r2, pc, #4	; (adr r2, 8004b28 <USB_HC_StartXfer+0x1ec>)
 8004b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b26:	bf00      	nop
 8004b28:	08004b39 	.word	0x08004b39
 8004b2c:	08004b5d 	.word	0x08004b5d
 8004b30:	08004b39 	.word	0x08004b39
 8004b34:	08004b5d 	.word	0x08004b5d
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        len_words = (hc->xfer_len + 3) / 4;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	3303      	adds	r3, #3
 8004b3e:	089b      	lsrs	r3, r3, #2
 8004b40:	837b      	strh	r3, [r7, #26]
        
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 8004b42:	8b7a      	ldrh	r2, [r7, #26]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d91c      	bls.n	8004b88 <USB_HC_StartXfer+0x24c>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	f043 0220 	orr.w	r2, r3, #32
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	619a      	str	r2, [r3, #24]
        }
        break;
 8004b5a:	e015      	b.n	8004b88 <USB_HC_StartXfer+0x24c>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3) / 4;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	3303      	adds	r3, #3
 8004b62:	089b      	lsrs	r3, r3, #2
 8004b64:	837b      	strh	r3, [r7, #26]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 8004b66:	8b7a      	ldrh	r2, [r7, #26]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d90a      	bls.n	8004b8c <USB_HC_StartXfer+0x250>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	619a      	str	r2, [r3, #24]
        }
        break;
 8004b82:	e003      	b.n	8004b8c <USB_HC_StartXfer+0x250>
        
      default:
        break;
 8004b84:	bf00      	nop
 8004b86:	e002      	b.n	8004b8e <USB_HC_StartXfer+0x252>
        break;
 8004b88:	bf00      	nop
 8004b8a:	e000      	b.n	8004b8e <USB_HC_StartXfer+0x252>
        break;
 8004b8c:	bf00      	nop
      }
      
      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	68d9      	ldr	r1, [r3, #12]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	785a      	ldrb	r2, [r3, #1]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	b298      	uxth	r0, r3
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f7ff fbc2 	bl	800432c <USB_WritePacket>
    }
  }
  
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3720      	adds	r7, #32
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	1ff80000 	.word	0x1ff80000

08004bb8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	b29b      	uxth	r3, r3
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	460b      	mov	r3, r1
 8004be0:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	0c9b      	lsrs	r3, r3, #18
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00b      	beq.n	8004c16 <USB_HC_Halt+0x40>
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c0a:	681b      	ldr	r3, [r3, #0]
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 8004c0c:	0c9b      	lsrs	r3, r3, #18
 8004c0e:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d160      	bne.n	8004cd8 <USB_HC_Halt+0x102>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004c16:	78fb      	ldrb	r3, [r7, #3]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c22:	4619      	mov	r1, r3
 8004c24:	78fb      	ldrb	r3, [r7, #3]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c36:	600b      	str	r3, [r1, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d135      	bne.n	8004cb0 <USB_HC_Halt+0xda>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004c44:	78fb      	ldrb	r3, [r7, #3]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c50:	4619      	mov	r1, r3
 8004c52:	78fb      	ldrb	r3, [r7, #3]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c64:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8004c66:	78fb      	ldrb	r3, [r7, #3]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c72:	4619      	mov	r1, r3
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c86:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c94:	d81e      	bhi.n	8004cd4 <USB_HC_Halt+0xfe>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8004c96:	78fb      	ldrb	r3, [r7, #3]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cac:	d0ec      	beq.n	8004c88 <USB_HC_Halt+0xb2>
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8004cae:	e074      	b.n	8004d9a <USB_HC_Halt+0x1c4>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	78fb      	ldrb	r3, [r7, #3]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cd0:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8004cd2:	e062      	b.n	8004d9a <USB_HC_Halt+0x1c4>
          break;
 8004cd4:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8004cd6:	e060      	b.n	8004d9a <USB_HC_Halt+0x1c4>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004cd8:	78fb      	ldrb	r3, [r7, #3]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	78fb      	ldrb	r3, [r7, #3]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cf8:	600b      	str	r3, [r1, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d135      	bne.n	8004d74 <USB_HC_Halt+0x19e>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d14:	4619      	mov	r1, r3
 8004d16:	78fb      	ldrb	r3, [r7, #3]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d28:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d36:	4619      	mov	r1, r3
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d4a:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d58:	d81e      	bhi.n	8004d98 <USB_HC_Halt+0x1c2>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8004d5a:	78fb      	ldrb	r3, [r7, #3]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d70:	d0ec      	beq.n	8004d4c <USB_HC_Halt+0x176>
 8004d72:	e012      	b.n	8004d9a <USB_HC_Halt+0x1c4>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8004d74:	78fb      	ldrb	r3, [r7, #3]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d80:	4619      	mov	r1, r3
 8004d82:	78fb      	ldrb	r3, [r7, #3]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d94:	600b      	str	r3, [r1, #0]
 8004d96:	e000      	b.n	8004d9a <USB_HC_Halt+0x1c4>
          break;
 8004d98:	bf00      	nop
    }
  }
  
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1U;
 8004db4:	2301      	movs	r3, #1
 8004db6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc8:	461a      	mov	r2, r3
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	04db      	lsls	r3, r3, #19
 8004dce:	4619      	mov	r1, r3
 8004dd0:	4b12      	ldr	r3, [pc, #72]	; (8004e1c <USB_DoPing+0x74>)
 8004dd2:	400b      	ands	r3, r1
 8004dd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004dd8:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;
  
  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004dda:	78fb      	ldrb	r3, [r7, #3]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004df0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004df8:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e06:	461a      	mov	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;  
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	1ff80000 	.word	0x1ff80000

08004e20 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff f9fd 	bl	800422c <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
 8004e32:	2110      	movs	r1, #16
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff fa31 	bl	800429c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff fa54 	bl	80042e8 <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 8004e40:	2300      	movs	r3, #0
 8004e42:	75fb      	strb	r3, [r7, #23]
 8004e44:	e01f      	b.n	8004e86 <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 8004e46:	7dfb      	ldrb	r3, [r7, #23]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e5c:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e64:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e6c:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 8004e6e:	7dfb      	ldrb	r3, [r7, #23]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 8004e80:	7dfb      	ldrb	r3, [r7, #23]
 8004e82:	3301      	adds	r3, #1
 8004e84:	75fb      	strb	r3, [r7, #23]
 8004e86:	7dfb      	ldrb	r3, [r7, #23]
 8004e88:	2b0f      	cmp	r3, #15
 8004e8a:	d9dc      	bls.n	8004e46 <USB_StopHost+0x26>
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0; i <= 15; i++)
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	75fb      	strb	r3, [r7, #23]
 8004e90:	e034      	b.n	8004efc <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 8004e92:	7dfb      	ldrb	r3, [r7, #23]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ea8:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004eb0:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004eb8:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 8004eba:	7dfb      	ldrb	r3, [r7, #23]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000U) 
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	613b      	str	r3, [r7, #16]
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ed8:	d80c      	bhi.n	8004ef4 <USB_StopHost+0xd4>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004eda:	7dfb      	ldrb	r3, [r7, #23]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ef0:	d0ec      	beq.n	8004ecc <USB_StopHost+0xac>
 8004ef2:	e000      	b.n	8004ef6 <USB_StopHost+0xd6>
        break;
 8004ef4:	bf00      	nop
  for (i = 0; i <= 15; i++)
 8004ef6:	7dfb      	ldrb	r3, [r7, #23]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	75fb      	strb	r3, [r7, #23]
 8004efc:	7dfb      	ldrb	r3, [r7, #23]
 8004efe:	2b0f      	cmp	r3, #15
 8004f00:	d9c7      	bls.n	8004e92 <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */  
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f08:	461a      	mov	r2, r3
 8004f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f0e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f04f 32ff 	mov.w	r2, #4294967295
 8004f16:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7ff f976 	bl	800420a <USB_EnableGlobalInt>
  return HAL_OK;  
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <DetectButtonDS3>:
  USBH_HID_SOFProcess,
  NULL,
};

uint64_t DetectButtonDS3(uint64_t buttons_and_triggers)
{
 8004f28:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f2c:	b084      	sub	sp, #16
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	e9c7 0102 	strd	r0, r1, [r7, #8]
	// bit smearing so all bits to the right of the first 1 are also 1
	buttons_and_triggers |= buttons_and_triggers >> 32;
 8004f34:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f38:	0012      	movs	r2, r2
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	4614      	mov	r4, r2
 8004f40:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f44:	ea43 0301 	orr.w	r3, r3, r1
 8004f48:	ea44 0402 	orr.w	r4, r4, r2
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4622      	mov	r2, r4
 8004f50:	e9c7 1202 	strd	r1, r2, [r7, #8]
	buttons_and_triggers |= buttons_and_triggers >> 16;
 8004f54:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004f5c:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
 8004f60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004f64:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f68:	ea41 010a 	orr.w	r1, r1, sl
 8004f6c:	ea42 020b 	orr.w	r2, r2, fp
 8004f70:	e9c7 1202 	strd	r1, r2, [r7, #8]
	buttons_and_triggers |= buttons_and_triggers >> 8;
 8004f74:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f78:	ea4f 2811 	mov.w	r8, r1, lsr #8
 8004f7c:	ea48 6802 	orr.w	r8, r8, r2, lsl #24
 8004f80:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8004f84:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f88:	ea41 0108 	orr.w	r1, r1, r8
 8004f8c:	ea42 0209 	orr.w	r2, r2, r9
 8004f90:	e9c7 1202 	strd	r1, r2, [r7, #8]
	buttons_and_triggers |= buttons_and_triggers >> 4;
 8004f94:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f98:	090d      	lsrs	r5, r1, #4
 8004f9a:	ea45 7502 	orr.w	r5, r5, r2, lsl #28
 8004f9e:	0916      	lsrs	r6, r2, #4
 8004fa0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004fa4:	ea41 0105 	orr.w	r1, r1, r5
 8004fa8:	ea42 0206 	orr.w	r2, r2, r6
 8004fac:	e9c7 1202 	strd	r1, r2, [r7, #8]
	buttons_and_triggers |= buttons_and_triggers >> 2;
 8004fb0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004fb4:	088b      	lsrs	r3, r1, #2
 8004fb6:	603b      	str	r3, [r7, #0]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	0893      	lsrs	r3, r2, #2
 8004fc2:	607b      	str	r3, [r7, #4]
 8004fc4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004fc8:	e897 0018 	ldmia.w	r7, {r3, r4}
 8004fcc:	ea43 0301 	orr.w	r3, r3, r1
 8004fd0:	ea44 0402 	orr.w	r4, r4, r2
 8004fd4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	buttons_and_triggers |= buttons_and_triggers >> 1;
 8004fd8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004fdc:	0864      	lsrs	r4, r4, #1
 8004fde:	ea4f 0333 	mov.w	r3, r3, rrx
 8004fe2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004fe6:	ea43 0301 	orr.w	r3, r3, r1
 8004fea:	ea44 0402 	orr.w	r4, r4, r2
 8004fee:	e9c7 3402 	strd	r3, r4, [r7, #8]

	// only leave the highest 1 set
	buttons_and_triggers ^= buttons_and_triggers >> 1;
 8004ff2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004ff6:	0864      	lsrs	r4, r4, #1
 8004ff8:	ea4f 0333 	mov.w	r3, r3, rrx
 8004ffc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005000:	ea83 0301 	eor.w	r3, r3, r1
 8005004:	ea84 0402 	eor.w	r4, r4, r2
 8005008:	e9c7 3402 	strd	r3, r4, [r7, #8]

	// now it is the same as the bitmask we want to return
	return buttons_and_triggers;
 800500c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8005010:	4618      	mov	r0, r3
 8005012:	4621      	mov	r1, r4
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800501c:	4770      	bx	lr
	...

08005020 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit (USBH_HandleTypeDef *phost)
{	
 8005020:	b590      	push	{r4, r7, lr}
 8005022:	b08b      	sub	sp, #44	; 0x2c
 8005024:	af04      	add	r7, sp, #16
 8005026:	6078      	str	r0, [r7, #4]
  uint8_t max_ep;
  uint8_t num = 0;
 8005028:	2300      	movs	r3, #0
 800502a:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;
  
  USBH_StatusTypeDef status = USBH_FAIL ;
 800502c:	2302      	movs	r3, #2
 800502e:	757b      	strb	r3, [r7, #21]
  HID_HandleTypeDef *HID_Handle;
  
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFF);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8005036:	7919      	ldrb	r1, [r3, #4]
 8005038:	23ff      	movs	r3, #255	; 0xff
 800503a:	2201      	movs	r2, #1
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f004 fb6c 	bl	800971a <USBH_FindInterface>
 8005042:	4603      	mov	r3, r0
 8005044:	75bb      	strb	r3, [r7, #22]

  if (interface == 0xFF) // did not find KB or mouse
 8005046:	7dbb      	ldrb	r3, [r7, #22]
 8005048:	2bff      	cmp	r3, #255	; 0xff
 800504a:	d10a      	bne.n	8005062 <USBH_HID_InterfaceInit+0x42>
	  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0, 0xFF); // try looking for ds3 and ds4
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8005052:	7919      	ldrb	r1, [r3, #4]
 8005054:	23ff      	movs	r3, #255	; 0xff
 8005056:	2200      	movs	r2, #0
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f004 fb5e 	bl	800971a <USBH_FindInterface>
 800505e:	4603      	mov	r3, r0
 8005060:	75bb      	strb	r3, [r7, #22]
  
  if(interface == 0xFF) /* No Valid Interface */
 8005062:	7dbb      	ldrb	r3, [r7, #22]
 8005064:	2bff      	cmp	r3, #255	; 0xff
 8005066:	d102      	bne.n	800506e <USBH_HID_InterfaceInit+0x4e>
  {
    status = USBH_FAIL;  
 8005068:	2302      	movs	r3, #2
 800506a:	757b      	strb	r3, [r7, #21]
 800506c:	e16c      	b.n	8005348 <USBH_HID_InterfaceInit+0x328>
    USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);         
  }
  else // something was found!
  {
    USBH_SelectInterface (phost, interface);
 800506e:	7dbb      	ldrb	r3, [r7, #22]
 8005070:	4619      	mov	r1, r3
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f004 fb3e 	bl	80096f4 <USBH_SelectInterface>
    phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc (sizeof(HID_HandleTypeDef));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 4714 	ldr.w	r4, [r3, #1812]	; 0x714
 800507e:	2034      	movs	r0, #52	; 0x34
 8005080:	f006 febc 	bl	800bdfc <malloc>
 8005084:	4603      	mov	r3, r0
 8005086:	61e3      	str	r3, [r4, #28]
    HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData; 
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	613b      	str	r3, [r7, #16]
    HID_Handle->state = HID_ERROR;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2207      	movs	r2, #7
 8005096:	709a      	strb	r2, [r3, #2]
    
    /*Decode Bootclass Protocol: Mouse or Keyboard*/
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 361f 	ldrb.w	r3, [r3, #1567]	; 0x61f
 800509e:	4619      	mov	r1, r3
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	231a      	movs	r3, #26
 80050a4:	fb03 f301 	mul.w	r3, r3, r1
 80050a8:	4413      	add	r3, r2
 80050aa:	f203 6343 	addw	r3, r3, #1603	; 0x643
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d106      	bne.n	80050c2 <USBH_HID_InterfaceInit+0xa2>
    {
      USBH_UsrLog ("KeyBoard device found!"); 
      HID_Handle->Init =  USBH_HID_KeybdInit;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	4aa7      	ldr	r2, [pc, #668]	; (8005354 <USBH_HID_InterfaceInit+0x334>)
 80050b8:	631a      	str	r2, [r3, #48]	; 0x30
      type = CONTROLLER_KB;
 80050ba:	4ba7      	ldr	r3, [pc, #668]	; (8005358 <USBH_HID_InterfaceInit+0x338>)
 80050bc:	2204      	movs	r2, #4
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	e06b      	b.n	800519a <USBH_HID_InterfaceInit+0x17a>
    }
    else if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol == HID_MOUSE_BOOT_CODE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 361f 	ldrb.w	r3, [r3, #1567]	; 0x61f
 80050c8:	4619      	mov	r1, r3
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	231a      	movs	r3, #26
 80050ce:	fb03 f301 	mul.w	r3, r3, r1
 80050d2:	4413      	add	r3, r2
 80050d4:	f203 6343 	addw	r3, r3, #1603	; 0x643
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d103      	bne.n	80050e6 <USBH_HID_InterfaceInit+0xc6>
    {
      USBH_UsrLog ("Mouse device found!");         
      HID_Handle->Init =  USBH_HID_MouseInit;     
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	4a9e      	ldr	r2, [pc, #632]	; (800535c <USBH_HID_InterfaceInit+0x33c>)
 80050e2:	631a      	str	r2, [r3, #48]	; 0x30
 80050e4:	e059      	b.n	800519a <USBH_HID_InterfaceInit+0x17a>
    }
    else if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol == HID_DS3_BOOT_CODE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 361f 	ldrb.w	r3, [r3, #1567]	; 0x61f
 80050ec:	4619      	mov	r1, r3
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	231a      	movs	r3, #26
 80050f2:	fb03 f301 	mul.w	r3, r3, r1
 80050f6:	4413      	add	r3, r2
 80050f8:	f203 6343 	addw	r3, r3, #1603	; 0x643
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d149      	bne.n	8005196 <USBH_HID_InterfaceInit+0x176>
	{
    	if((phost->device.DevDesc.idVendor == 0x054C && phost->device.DevDesc.idProduct == 0x0268) || \
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 8005108:	f240 524c 	movw	r2, #1356	; 0x54c
 800510c:	4293      	cmp	r3, r2
 800510e:	d105      	bne.n	800511c <USBH_HID_InterfaceInit+0xfc>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8005116:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800511a:	d00d      	beq.n	8005138 <USBH_HID_InterfaceInit+0x118>
    			(phost->device.DevDesc.idVendor == 0x20D6 && phost->device.DevDesc.idProduct == 0xCA6D)/*Pro Ex*/)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
    	if((phost->device.DevDesc.idVendor == 0x054C && phost->device.DevDesc.idProduct == 0x0268) || \
 8005122:	f242 02d6 	movw	r2, #8406	; 0x20d6
 8005126:	4293      	cmp	r3, r2
 8005128:	d10d      	bne.n	8005146 <USBH_HID_InterfaceInit+0x126>
    			(phost->device.DevDesc.idVendor == 0x20D6 && phost->device.DevDesc.idProduct == 0xCA6D)/*Pro Ex*/)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8005130:	f64c 226d 	movw	r2, #51821	; 0xca6d
 8005134:	4293      	cmp	r3, r2
 8005136:	d106      	bne.n	8005146 <USBH_HID_InterfaceInit+0x126>
    	{
			USBH_UsrLog ("DS3 device found!");
			HID_Handle->Init =  USBH_HID_DS3Init;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	4a89      	ldr	r2, [pc, #548]	; (8005360 <USBH_HID_InterfaceInit+0x340>)
 800513c:	631a      	str	r2, [r3, #48]	; 0x30
			type = CONTROLLER_DS3;
 800513e:	4b86      	ldr	r3, [pc, #536]	; (8005358 <USBH_HID_InterfaceInit+0x338>)
 8005140:	2202      	movs	r2, #2
 8005142:	701a      	strb	r2, [r3, #0]
 8005144:	e029      	b.n	800519a <USBH_HID_InterfaceInit+0x17a>
    	}
    	else if((phost->device.DevDesc.idVendor == 0x054C && \
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800514c:	f240 524c 	movw	r2, #1356	; 0x54c
 8005150:	4293      	cmp	r3, r2
 8005152:	d10d      	bne.n	8005170 <USBH_HID_InterfaceInit+0x150>
    			(phost->device.DevDesc.idProduct == 0x05C4/*regular*/|| phost->device.DevDesc.idProduct == 0x09CC/*slim*/)) ||
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
    	else if((phost->device.DevDesc.idVendor == 0x054C && \
 800515a:	f240 52c4 	movw	r2, #1476	; 0x5c4
 800515e:	4293      	cmp	r3, r2
 8005160:	d012      	beq.n	8005188 <USBH_HID_InterfaceInit+0x168>
    			(phost->device.DevDesc.idProduct == 0x05C4/*regular*/|| phost->device.DevDesc.idProduct == 0x09CC/*slim*/)) ||
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8005168:	f640 12cc 	movw	r2, #2508	; 0x9cc
 800516c:	4293      	cmp	r3, r2
 800516e:	d00b      	beq.n	8005188 <USBH_HID_InterfaceInit+0x168>
				(phost->device.DevDesc.idVendor == 0x0F0D && phost->device.DevDesc.idProduct == 0x0066) /*Hori ps4*/)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
    			(phost->device.DevDesc.idProduct == 0x05C4/*regular*/|| phost->device.DevDesc.idProduct == 0x09CC/*slim*/)) ||
 8005176:	f640 720d 	movw	r2, #3853	; 0xf0d
 800517a:	4293      	cmp	r3, r2
 800517c:	d10d      	bne.n	800519a <USBH_HID_InterfaceInit+0x17a>
				(phost->device.DevDesc.idVendor == 0x0F0D && phost->device.DevDesc.idProduct == 0x0066) /*Hori ps4*/)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8005184:	2b66      	cmp	r3, #102	; 0x66
 8005186:	d108      	bne.n	800519a <USBH_HID_InterfaceInit+0x17a>
		{
    		USBH_UsrLog ("DS4 device found!");
    		HID_Handle->Init =  USBH_HID_DS4Init;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	4a76      	ldr	r2, [pc, #472]	; (8005364 <USBH_HID_InterfaceInit+0x344>)
 800518c:	631a      	str	r2, [r3, #48]	; 0x30
    		type = CONTROLLER_DS4;
 800518e:	4b72      	ldr	r3, [pc, #456]	; (8005358 <USBH_HID_InterfaceInit+0x338>)
 8005190:	2203      	movs	r2, #3
 8005192:	701a      	strb	r2, [r3, #0]
 8005194:	e001      	b.n	800519a <USBH_HID_InterfaceInit+0x17a>
		}
	}
    else
    {
      USBH_UsrLog ("Protocol not supported.");  
      return USBH_FAIL;
 8005196:	2302      	movs	r3, #2
 8005198:	e0d7      	b.n	800534a <USBH_HID_InterfaceInit+0x32a>
    }
    
    HID_Handle->state     = HID_INIT;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	2200      	movs	r2, #0
 800519e:	709a      	strb	r2, [r3, #2]
    HID_Handle->ctl_state = HID_REQ_INIT; 
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2200      	movs	r2, #0
 80051a4:	715a      	strb	r2, [r3, #5]
    HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 361f 	ldrb.w	r3, [r3, #1567]	; 0x61f
 80051ac:	4619      	mov	r1, r3
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	231a      	movs	r3, #26
 80051b2:	fb03 f301 	mul.w	r3, r3, r1
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 80051bc:	781a      	ldrb	r2, [r3, #0]
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	769a      	strb	r2, [r3, #26]
    HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 361f 	ldrb.w	r3, [r3, #1567]	; 0x61f
 80051c8:	4619      	mov	r1, r3
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	231a      	movs	r3, #26
 80051ce:	fb03 f301 	mul.w	r3, r3, r1
 80051d2:	4413      	add	r3, r2
 80051d4:	f203 634a 	addw	r3, r3, #1610	; 0x64a
 80051d8:	881a      	ldrh	r2, [r3, #0]
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	831a      	strh	r2, [r3, #24]
    HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bInterval ;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 361f 	ldrb.w	r3, [r3, #1567]	; 0x61f
 80051e4:	4619      	mov	r1, r3
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	231a      	movs	r3, #26
 80051ea:	fb03 f301 	mul.w	r3, r3, r1
 80051ee:	4413      	add	r3, r2
 80051f0:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	839a      	strh	r2, [r3, #28]
    
    if (HID_Handle->poll  < HID_MIN_POLL)
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	8b9b      	ldrh	r3, [r3, #28]
 8005200:	2b09      	cmp	r3, #9
 8005202:	d802      	bhi.n	800520a <USBH_HID_InterfaceInit+0x1ea>
    {
      HID_Handle->poll = HID_MIN_POLL;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	220a      	movs	r2, #10
 8005208:	839a      	strh	r2, [r3, #28]
    
    /* Check for available number of endpoints */
    /* Find the number of EPs in the Interface Descriptor */      
    /* Choose the lower number in order not to overrun the buffer allocated */
    max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ? 
              phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints :
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 361f 	ldrb.w	r3, [r3, #1567]	; 0x61f
 8005210:	4619      	mov	r1, r3
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	231a      	movs	r3, #26
 8005216:	fb03 f301 	mul.w	r3, r3, r1
 800521a:	4413      	add	r3, r2
 800521c:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8005220:	781b      	ldrb	r3, [r3, #0]
    max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ? 
 8005222:	2b02      	cmp	r3, #2
 8005224:	bf28      	it	cs
 8005226:	2302      	movcs	r3, #2
 8005228:	73fb      	strb	r3, [r7, #15]
                  USBH_MAX_NUM_ENDPOINTS); 
    
    
    /* Decode endpoint IN and OUT address from interface descriptor */
    for ( ;num < max_ep; num++)
 800522a:	e086      	b.n	800533a <USBH_HID_InterfaceInit+0x31a>
    {
      if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress & 0x80)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 361f 	ldrb.w	r3, [r3, #1567]	; 0x61f
 8005232:	4618      	mov	r0, r3
 8005234:	7dfb      	ldrb	r3, [r7, #23]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	3301      	adds	r3, #1
 800523a:	00d9      	lsls	r1, r3, #3
 800523c:	231a      	movs	r3, #26
 800523e:	fb03 f300 	mul.w	r3, r3, r0
 8005242:	440b      	add	r3, r1
 8005244:	4413      	add	r3, r2
 8005246:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	b25b      	sxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	da38      	bge.n	80052c4 <USBH_HID_InterfaceInit+0x2a4>
      {
        HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 361f 	ldrb.w	r3, [r3, #1567]	; 0x61f
 8005258:	4618      	mov	r0, r3
 800525a:	7dfb      	ldrb	r3, [r7, #23]
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	3301      	adds	r3, #1
 8005260:	00d9      	lsls	r1, r3, #3
 8005262:	231a      	movs	r3, #26
 8005264:	fb03 f300 	mul.w	r3, r3, r0
 8005268:	440b      	add	r3, r1
 800526a:	4413      	add	r3, r2
 800526c:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8005270:	781a      	ldrb	r2, [r3, #0]
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	711a      	strb	r2, [r3, #4]
        HID_Handle->InPipe  =\
          USBH_AllocPipe(phost, HID_Handle->InEp);
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	791b      	ldrb	r3, [r3, #4]
 800527a:	4619      	mov	r1, r3
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f005 faf5 	bl	800a86c <USBH_AllocPipe>
 8005282:	4603      	mov	r3, r0
 8005284:	461a      	mov	r2, r3
        HID_Handle->InPipe  =\
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	705a      	strb	r2, [r3, #1]
        
        /* Open pipe for IN endpoint */
        USBH_OpenPipe  (phost,
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	7859      	ldrb	r1, [r3, #1]
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	7918      	ldrb	r0, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 461c 	ldrb.w	r4, [r3, #1564]	; 0x61c
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 361d 	ldrb.w	r3, [r3, #1565]	; 0x61d
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	8b12      	ldrh	r2, [r2, #24]
 80052a2:	9202      	str	r2, [sp, #8]
 80052a4:	2203      	movs	r2, #3
 80052a6:	9201      	str	r2, [sp, #4]
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	4623      	mov	r3, r4
 80052ac:	4602      	mov	r2, r0
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f005 faad 	bl	800a80e <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_INTR,
                        HID_Handle->length); 
        
        USBH_LL_SetToggle (phost, HID_Handle->InPipe, 0);
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	785b      	ldrb	r3, [r3, #1]
 80052b8:	2200      	movs	r2, #0
 80052ba:	4619      	mov	r1, r3
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f006 fd10 	bl	800bce2 <USBH_LL_SetToggle>
 80052c2:	e037      	b.n	8005334 <USBH_HID_InterfaceInit+0x314>
        
      }
      else
      {
        HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 361f 	ldrb.w	r3, [r3, #1567]	; 0x61f
 80052ca:	4618      	mov	r0, r3
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	3301      	adds	r3, #1
 80052d2:	00d9      	lsls	r1, r3, #3
 80052d4:	231a      	movs	r3, #26
 80052d6:	fb03 f300 	mul.w	r3, r3, r0
 80052da:	440b      	add	r3, r1
 80052dc:	4413      	add	r3, r2
 80052de:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80052e2:	781a      	ldrb	r2, [r3, #0]
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	70da      	strb	r2, [r3, #3]
        HID_Handle->OutPipe  =\
          USBH_AllocPipe(phost, HID_Handle->OutEp);
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	78db      	ldrb	r3, [r3, #3]
 80052ec:	4619      	mov	r1, r3
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f005 fabc 	bl	800a86c <USBH_AllocPipe>
 80052f4:	4603      	mov	r3, r0
 80052f6:	461a      	mov	r2, r3
        HID_Handle->OutPipe  =\
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	701a      	strb	r2, [r3, #0]
        
        /* Open pipe for OUT endpoint */
        USBH_OpenPipe  (phost,
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	7819      	ldrb	r1, [r3, #0]
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	78d8      	ldrb	r0, [r3, #3]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 461c 	ldrb.w	r4, [r3, #1564]	; 0x61c
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 361d 	ldrb.w	r3, [r3, #1565]	; 0x61d
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	8b12      	ldrh	r2, [r2, #24]
 8005314:	9202      	str	r2, [sp, #8]
 8005316:	2203      	movs	r2, #3
 8005318:	9201      	str	r2, [sp, #4]
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	4623      	mov	r3, r4
 800531e:	4602      	mov	r2, r0
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f005 fa74 	bl	800a80e <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_INTR,
                        HID_Handle->length); 
        
        USBH_LL_SetToggle (phost, HID_Handle->OutPipe, 0);        
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2200      	movs	r2, #0
 800532c:	4619      	mov	r1, r3
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f006 fcd7 	bl	800bce2 <USBH_LL_SetToggle>
    for ( ;num < max_ep; num++)
 8005334:	7dfb      	ldrb	r3, [r7, #23]
 8005336:	3301      	adds	r3, #1
 8005338:	75fb      	strb	r3, [r7, #23]
 800533a:	7dfa      	ldrb	r2, [r7, #23]
 800533c:	7bfb      	ldrb	r3, [r7, #15]
 800533e:	429a      	cmp	r2, r3
 8005340:	f4ff af74 	bcc.w	800522c <USBH_HID_InterfaceInit+0x20c>
      }
      
    }  
    status = USBH_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	757b      	strb	r3, [r7, #21]
  }
  return status;
 8005348:	7d7b      	ldrb	r3, [r7, #21]
}
 800534a:	4618      	mov	r0, r3
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	bd90      	pop	{r4, r7, pc}
 8005352:	bf00      	nop
 8005354:	080079ad 	.word	0x080079ad
 8005358:	2000010c 	.word	0x2000010c
 800535c:	08007b95 	.word	0x08007b95
 8005360:	08007509 	.word	0x08007509
 8005364:	0800770d 	.word	0x0800770d

08005368 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_InterfaceDeInit (USBH_HandleTypeDef *phost )
{	
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData; 
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	60fb      	str	r3, [r7, #12]
  
  if(HID_Handle->InPipe != 0x00)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	785b      	ldrb	r3, [r3, #1]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00e      	beq.n	80053a0 <USBH_HID_InterfaceDeInit+0x38>
  {   
    USBH_ClosePipe  (phost, HID_Handle->InPipe);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	785b      	ldrb	r3, [r3, #1]
 8005386:	4619      	mov	r1, r3
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f005 fa5f 	bl	800a84c <USBH_ClosePipe>
    USBH_FreePipe  (phost, HID_Handle->InPipe);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	785b      	ldrb	r3, [r3, #1]
 8005392:	4619      	mov	r1, r3
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f005 fa8a 	bl	800a8ae <USBH_FreePipe>
    HID_Handle->InPipe = 0;     /* Reset the pipe as Free */  
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	705a      	strb	r2, [r3, #1]
  }
  
  if(HID_Handle->OutPipe != 0x00)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00e      	beq.n	80053c6 <USBH_HID_InterfaceDeInit+0x5e>
  {   
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	4619      	mov	r1, r3
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f005 fa4c 	bl	800a84c <USBH_ClosePipe>
    USBH_FreePipe  (phost, HID_Handle->OutPipe);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	4619      	mov	r1, r3
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f005 fa77 	bl	800a8ae <USBH_FreePipe>
    HID_Handle->OutPipe = 0;     /* Reset the pipe as Free */  
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	701a      	strb	r2, [r3, #0]
  }
  
  if(phost->pActiveClass->pData)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d006      	beq.n	80053e0 <USBH_HID_InterfaceDeInit+0x78>
  {
    USBH_free (phost->pActiveClass->pData);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	4618      	mov	r0, r3
 80053dc:	f006 fd16 	bl	800be0c <free>
  }

  type = CONTROLLER_NONE;
 80053e0:	4b03      	ldr	r3, [pc, #12]	; (80053f0 <USBH_HID_InterfaceDeInit+0x88>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	701a      	strb	r2, [r3, #0]

  return USBH_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	2000010c 	.word	0x2000010c

080053f4 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{   
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b08a      	sub	sp, #40	; 0x28
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	6078      	str	r0, [r7, #4]
  uint8_t enable[4] = {0x42, 0x0C, 0x00, 0x00};
 80053fc:	4b73      	ldr	r3, [pc, #460]	; (80055cc <USBH_HID_ClassRequest+0x1d8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	617b      	str	r3, [r7, #20]
  USBH_StatusTypeDef status         = USBH_BUSY;
 8005402:	2301      	movs	r3, #1
 8005404:	77fb      	strb	r3, [r7, #31]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8005406:	2301      	movs	r3, #1
 8005408:	77bb      	strb	r3, [r7, #30]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	61bb      	str	r3, [r7, #24]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	795b      	ldrb	r3, [r3, #5]
 8005418:	2b09      	cmp	r3, #9
 800541a:	f200 80c4 	bhi.w	80055a6 <USBH_HID_ClassRequest+0x1b2>
 800541e:	a201      	add	r2, pc, #4	; (adr r2, 8005424 <USBH_HID_ClassRequest+0x30>)
 8005420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005424:	0800544d 	.word	0x0800544d
 8005428:	080055a7 	.word	0x080055a7
 800542c:	080054a5 	.word	0x080054a5
 8005430:	0800544d 	.word	0x0800544d
 8005434:	08005547 	.word	0x08005547
 8005438:	08005581 	.word	0x08005581
 800543c:	080055a7 	.word	0x080055a7
 8005440:	080054df 	.word	0x080054df
 8005444:	08005501 	.word	0x08005501
 8005448:	0800552f 	.word	0x0800552f
  {
  case HID_REQ_INIT:  
  case HID_REQ_GET_HID_DESC:

    /* Get HID Desc */
	if(type == CONTROLLER_DS4)
 800544c:	4b60      	ldr	r3, [pc, #384]	; (80055d0 <USBH_HID_ClassRequest+0x1dc>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b03      	cmp	r3, #3
 8005452:	d111      	bne.n	8005478 <USBH_HID_ClassRequest+0x84>
	{
		uint8_t buffer[9] = {0x09,        // bLength
 8005454:	4a5f      	ldr	r2, [pc, #380]	; (80055d4 <USBH_HID_ClassRequest+0x1e0>)
 8005456:	f107 0308 	add.w	r3, r7, #8
 800545a:	ca07      	ldmia	r2, {r0, r1, r2}
 800545c:	c303      	stmia	r3!, {r0, r1}
 800545e:	701a      	strb	r2, [r3, #0]
				0x22,        // bDescriptorType[0] (HID)
				0xF3, 0x01,  // wDescriptorLength[0] 499
				//0xD3, 0x01,  // wDescriptorLength[0] 467
				};

		USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, buffer);
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	3326      	adds	r3, #38	; 0x26
 8005464:	f107 0208 	add.w	r2, r7, #8
 8005468:	4611      	mov	r1, r2
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fa5a 	bl	8005924 <USBH_HID_ParseHIDDesc>
		HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	2204      	movs	r2, #4
 8005474:	715a      	strb	r2, [r3, #5]
      
      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.Data);
      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
    }
    
    break;     
 8005476:	e098      	b.n	80055aa <USBH_HID_ClassRequest+0x1b6>
	else if (USBH_HID_GetHIDDescriptor (phost, USB_HID_DESC_SIZE) == USBH_OK) // try this function call earlier?
 8005478:	2109      	movs	r1, #9
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f994 	bl	80057a8 <USBH_HID_GetHIDDescriptor>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	f040 8091 	bne.w	80055aa <USBH_HID_ClassRequest+0x1b6>
      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.Data);
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8005494:	4619      	mov	r1, r3
 8005496:	4610      	mov	r0, r2
 8005498:	f000 fa44 	bl	8005924 <USBH_HID_ParseHIDDesc>
      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	2202      	movs	r2, #2
 80054a0:	715a      	strb	r2, [r3, #5]
    break;     
 80054a2:	e082      	b.n	80055aa <USBH_HID_ClassRequest+0x1b6>
  case HID_REQ_GET_REPORT_DESC:
    
    
    /* Get Report Desc */ 
    if (USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength) == USBH_OK)
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054a8:	4619      	mov	r1, r3
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f963 	bl	8005776 <USBH_HID_GetHIDReportDescriptor>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d17b      	bne.n	80055ae <USBH_HID_ClassRequest+0x1ba>
    {
      /* The descriptor is available in phost->device.Data */
    	if(type == CONTROLLER_DS3)
 80054b6:	4b46      	ldr	r3, [pc, #280]	; (80055d0 <USBH_HID_ClassRequest+0x1dc>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d103      	bne.n	80054c6 <USBH_HID_ClassRequest+0xd2>
    	{
    		HID_Handle->ctl_state = HID_PS3_BOOTCODE;
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	2207      	movs	r2, #7
 80054c2:	715a      	strb	r2, [r3, #5]
			HID_Handle->ctl_state = HID_PS4_LED;
		}
    	else HID_Handle->ctl_state = HID_REQ_SET_IDLE;
    }
    
    break;
 80054c4:	e073      	b.n	80055ae <USBH_HID_ClassRequest+0x1ba>
    	else if(type == CONTROLLER_DS4)
 80054c6:	4b42      	ldr	r3, [pc, #264]	; (80055d0 <USBH_HID_ClassRequest+0x1dc>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	d103      	bne.n	80054d6 <USBH_HID_ClassRequest+0xe2>
			HID_Handle->ctl_state = HID_PS4_LED;
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	2209      	movs	r2, #9
 80054d2:	715a      	strb	r2, [r3, #5]
    break;
 80054d4:	e06b      	b.n	80055ae <USBH_HID_ClassRequest+0x1ba>
    	else HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2204      	movs	r2, #4
 80054da:	715a      	strb	r2, [r3, #5]
    break;
 80054dc:	e067      	b.n	80055ae <USBH_HID_ClassRequest+0x1ba>
    
  case HID_PS3_BOOTCODE:
	  if(USBH_HID_SetReport(phost,0x03,0xF4,enable,4) == USBH_OK)  // enable ps3 communication
 80054de:	f107 0214 	add.w	r2, r7, #20
 80054e2:	2304      	movs	r3, #4
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	4613      	mov	r3, r2
 80054e8:	22f4      	movs	r2, #244	; 0xf4
 80054ea:	2103      	movs	r1, #3
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f99c 	bl	800582a <USBH_HID_SetReport>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d15c      	bne.n	80055b2 <USBH_HID_ClassRequest+0x1be>
	  {
		  HID_Handle->ctl_state = HID_PS3_LED;
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	2208      	movs	r2, #8
 80054fc:	715a      	strb	r2, [r3, #5]
	  }
	  break;
 80054fe:	e058      	b.n	80055b2 <USBH_HID_ClassRequest+0x1be>
  case HID_PS3_LED:
  	  if(USBH_HID_SetReport(phost,0x02,0x01,led_buffer,48) == USBH_OK)  // turn on p1 LED
 8005500:	2330      	movs	r3, #48	; 0x30
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	4b34      	ldr	r3, [pc, #208]	; (80055d8 <USBH_HID_ClassRequest+0x1e4>)
 8005506:	2201      	movs	r2, #1
 8005508:	2102      	movs	r1, #2
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f98d 	bl	800582a <USBH_HID_SetReport>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d14f      	bne.n	80055b6 <USBH_HID_ClassRequest+0x1c2>
  	  {
			HID_Handle->ctl_state = HID_REQ_IDLE; // move on to normal input processing
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	2201      	movs	r2, #1
 800551a:	715a      	strb	r2, [r3, #5]
			phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 8005522:	2102      	movs	r1, #2
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	4798      	blx	r3
			status = USBH_OK;
 8005528:	2300      	movs	r3, #0
 800552a:	77fb      	strb	r3, [r7, #31]
  	  }
  	  break;
 800552c:	e043      	b.n	80055b6 <USBH_HID_ClassRequest+0x1c2>
  case HID_PS4_LED:
	  // ps4 led info. write with HID report id 0x05 (HID set report?)
	  // TODO: DS4v2 gets stuck here, so disabling for now until we figure out how to fix this
	  //if(USBH_HID_SetReport(phost,0x02,0x05,ps4_led_buffer,31) == USBH_OK)  // turn on p1 LED
	  //{
		HID_Handle->ctl_state = HID_REQ_IDLE;
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	2201      	movs	r2, #1
 8005532:	715a      	strb	r2, [r3, #5]
		/* all requests performed*/
		phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 800553a:	2102      	movs	r1, #2
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	4798      	blx	r3
		status = USBH_OK;
 8005540:	2300      	movs	r3, #0
 8005542:	77fb      	strb	r3, [r7, #31]
	  //}
	  break;
 8005544:	e03c      	b.n	80055c0 <USBH_HID_ClassRequest+0x1cc>

  case HID_REQ_SET_IDLE:
    
    classReqStatus = USBH_HID_SetIdle (phost, 0, 0);
 8005546:	2200      	movs	r2, #0
 8005548:	2100      	movs	r1, #0
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f945 	bl	80057da <USBH_HID_SetIdle>
 8005550:	4603      	mov	r3, r0
 8005552:	77bb      	strb	r3, [r7, #30]
    
    /* set Idle */
    if (classReqStatus == USBH_OK)
 8005554:	7fbb      	ldrb	r3, [r7, #30]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10b      	bne.n	8005572 <USBH_HID_ClassRequest+0x17e>
    {
    	if(type == CONTROLLER_DS4)
 800555a:	4b1d      	ldr	r3, [pc, #116]	; (80055d0 <USBH_HID_ClassRequest+0x1dc>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b03      	cmp	r3, #3
 8005560:	d103      	bne.n	800556a <USBH_HID_ClassRequest+0x176>
    	{
    		 HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	2202      	movs	r2, #2
 8005566:	715a      	strb	r2, [r3, #5]
    }
    else if(classReqStatus == USBH_NOT_SUPPORTED) 
    {
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL; // Why if it's not supported would we set it to this state?!
    } 
    break; 
 8005568:	e027      	b.n	80055ba <USBH_HID_ClassRequest+0x1c6>
    		HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	2205      	movs	r2, #5
 800556e:	715a      	strb	r2, [r3, #5]
    break; 
 8005570:	e023      	b.n	80055ba <USBH_HID_ClassRequest+0x1c6>
    else if(classReqStatus == USBH_NOT_SUPPORTED) 
 8005572:	7fbb      	ldrb	r3, [r7, #30]
 8005574:	2b03      	cmp	r3, #3
 8005576:	d120      	bne.n	80055ba <USBH_HID_ClassRequest+0x1c6>
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL; // Why if it's not supported would we set it to this state?!
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	2205      	movs	r2, #5
 800557c:	715a      	strb	r2, [r3, #5]
    break; 
 800557e:	e01c      	b.n	80055ba <USBH_HID_ClassRequest+0x1c6>
    
  case HID_REQ_SET_PROTOCOL:
    /* set protocol */
    if (USBH_HID_SetProtocol (phost, 0) == USBH_OK)
 8005580:	2100      	movs	r1, #0
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f9a9 	bl	80058da <USBH_HID_SetProtocol>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d117      	bne.n	80055be <USBH_HID_ClassRequest+0x1ca>
    {
      HID_Handle->ctl_state = HID_REQ_IDLE;
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	2201      	movs	r2, #1
 8005592:	715a      	strb	r2, [r3, #5]
      
      /* all requests performed*/
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE); 
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 800559a:	2102      	movs	r1, #2
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	4798      	blx	r3
      status = USBH_OK; 
 80055a0:	2300      	movs	r3, #0
 80055a2:	77fb      	strb	r3, [r7, #31]
    } 
    break;
 80055a4:	e00b      	b.n	80055be <USBH_HID_ClassRequest+0x1ca>
    
  case HID_REQ_IDLE:
  default:
    break;
 80055a6:	bf00      	nop
 80055a8:	e00a      	b.n	80055c0 <USBH_HID_ClassRequest+0x1cc>
    break;     
 80055aa:	bf00      	nop
 80055ac:	e008      	b.n	80055c0 <USBH_HID_ClassRequest+0x1cc>
    break;
 80055ae:	bf00      	nop
 80055b0:	e006      	b.n	80055c0 <USBH_HID_ClassRequest+0x1cc>
	  break;
 80055b2:	bf00      	nop
 80055b4:	e004      	b.n	80055c0 <USBH_HID_ClassRequest+0x1cc>
  	  break;
 80055b6:	bf00      	nop
 80055b8:	e002      	b.n	80055c0 <USBH_HID_ClassRequest+0x1cc>
    break; 
 80055ba:	bf00      	nop
 80055bc:	e000      	b.n	80055c0 <USBH_HID_ClassRequest+0x1cc>
    break;
 80055be:	bf00      	nop
  }
  
  return status; 
 80055c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3720      	adds	r7, #32
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	0800bffc 	.word	0x0800bffc
 80055d0:	2000010c 	.word	0x2000010c
 80055d4:	0800c000 	.word	0x0800c000
 80055d8:	20000008 	.word	0x20000008

080055dc <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b088      	sub	sp, #32
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK, getreport_result;
 80055e4:	2300      	movs	r3, #0
 80055e6:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	613b      	str	r3, [r7, #16]
  
  switch (HID_Handle->state)
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	789b      	ldrb	r3, [r3, #2]
 80055f6:	2b06      	cmp	r3, #6
 80055f8:	f200 8090 	bhi.w	800571c <USBH_HID_Process+0x140>
 80055fc:	a201      	add	r2, pc, #4	; (adr r2, 8005604 <USBH_HID_Process+0x28>)
 80055fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005602:	bf00      	nop
 8005604:	08005621 	.word	0x08005621
 8005608:	08005629 	.word	0x08005629
 800560c:	0800571d 	.word	0x0800571d
 8005610:	0800571d 	.word	0x0800571d
 8005614:	08005683 	.word	0x08005683
 8005618:	0800566d 	.word	0x0800566d
 800561c:	080056b1 	.word	0x080056b1
  {
  case HID_INIT:
    HID_Handle->Init(phost); 
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	4798      	blx	r3
  case HID_IDLE:
	getreport_result = USBH_HID_GetReport (phost,
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	695a      	ldr	r2, [r3, #20]
	  	                             0x01,
	  	                              0,
	  	                              HID_Handle->pData,
	  	                              HID_Handle->length);
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	8b1b      	ldrh	r3, [r3, #24]
	getreport_result = USBH_HID_GetReport (phost,
 8005630:	b2db      	uxtb	r3, r3
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	4613      	mov	r3, r2
 8005636:	2200      	movs	r2, #0
 8005638:	2101      	movs	r1, #1
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f921 	bl	8005882 <USBH_HID_GetReport>
 8005640:	4603      	mov	r3, r0
 8005642:	73fb      	strb	r3, [r7, #15]
	if(getreport_result == USBH_OK || getreport_result == USBH_NOT_SUPPORTED)
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <USBH_HID_Process+0x74>
 800564a:	7bfb      	ldrb	r3, [r7, #15]
 800564c:	2b03      	cmp	r3, #3
 800564e:	d167      	bne.n	8005720 <USBH_HID_Process+0x144>
    {
      
      fifo_write(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);  
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	f103 0008 	add.w	r0, r3, #8
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	6959      	ldr	r1, [r3, #20]
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	8b1b      	ldrh	r3, [r3, #24]
 800565e:	461a      	mov	r2, r3
 8005660:	f000 fa35 	bl	8005ace <fifo_write>
      HID_Handle->state = HID_SYNC;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2205      	movs	r2, #5
 8005668:	709a      	strb	r2, [r3, #2]
    }
    
    break;
 800566a:	e059      	b.n	8005720 <USBH_HID_Process+0x144>
    
  case HID_SYNC:

    /* Sync with start of Even Frame */
    if(phost->Timer & 1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 3758 	ldr.w	r3, [r3, #1880]	; 0x758
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d054      	beq.n	8005724 <USBH_HID_Process+0x148>
    {
      HID_Handle->state = HID_GET_DATA; 
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	2204      	movs	r2, #4
 800567e:	709a      	strb	r2, [r3, #2]
    }
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif   
    break;
 8005680:	e050      	b.n	8005724 <USBH_HID_Process+0x148>
    
  case HID_GET_DATA:

    USBH_InterruptReceiveData(phost, 
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	6959      	ldr	r1, [r3, #20]
                              HID_Handle->pData,
                              HID_Handle->length,
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	8b1b      	ldrh	r3, [r3, #24]
    USBH_InterruptReceiveData(phost, 
 800568a:	b2da      	uxtb	r2, r3
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	785b      	ldrb	r3, [r3, #1]
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f005 f87e 	bl	800a792 <USBH_InterruptReceiveData>
                              HID_Handle->InPipe);
    
    HID_Handle->state = HID_POLL;
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	2206      	movs	r2, #6
 800569a:	709a      	strb	r2, [r3, #2]
    HID_Handle->timer = phost->Timer;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 2758 	ldr.w	r2, [r3, #1880]	; 0x758
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	621a      	str	r2, [r3, #32]
    HID_Handle->DataReady = 0;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    break;
 80056ae:	e03c      	b.n	800572a <USBH_HID_Process+0x14e>
    
  case HID_POLL:
    
    if(USBH_LL_GetURBState(phost , HID_Handle->InPipe) == USBH_URB_DONE)
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	785b      	ldrb	r3, [r3, #1]
 80056b4:	4619      	mov	r1, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f006 faf2 	bl	800bca0 <USBH_LL_GetURBState>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d116      	bne.n	80056f0 <USBH_HID_Process+0x114>
    {
      if(HID_Handle->DataReady == 0)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d12d      	bne.n	8005728 <USBH_HID_Process+0x14c>
      {
        fifo_write(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f103 0008 	add.w	r0, r3, #8
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	6959      	ldr	r1, [r3, #20]
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	8b1b      	ldrh	r3, [r3, #24]
 80056da:	461a      	mov	r2, r3
 80056dc:	f000 f9f7 	bl	8005ace <fifo_write>
        HID_Handle->DataReady = 1;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        USBH_HID_EventCallback(phost);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fa45 	bl	8005b78 <USBH_HID_EventCallback>
        HID_Handle->state = HID_GET_DATA;
      }
    } 
    

    break;
 80056ee:	e01b      	b.n	8005728 <USBH_HID_Process+0x14c>
    else if(USBH_LL_GetURBState(phost , HID_Handle->InPipe) == USBH_URB_STALL) /* IN Endpoint Stalled */
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	785b      	ldrb	r3, [r3, #1]
 80056f4:	4619      	mov	r1, r3
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f006 fad2 	bl	800bca0 <USBH_LL_GetURBState>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b05      	cmp	r3, #5
 8005700:	d112      	bne.n	8005728 <USBH_HID_Process+0x14c>
      if(USBH_ClrFeature(phost,
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	7e9b      	ldrb	r3, [r3, #26]
 8005706:	4619      	mov	r1, r3
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f004 fc5a 	bl	8009fc2 <USBH_ClrFeature>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d109      	bne.n	8005728 <USBH_HID_Process+0x14c>
        HID_Handle->state = HID_GET_DATA;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	2204      	movs	r2, #4
 8005718:	709a      	strb	r2, [r3, #2]
    break;
 800571a:	e005      	b.n	8005728 <USBH_HID_Process+0x14c>
    
  default:
    break;
 800571c:	bf00      	nop
 800571e:	e004      	b.n	800572a <USBH_HID_Process+0x14e>
    break;
 8005720:	bf00      	nop
 8005722:	e002      	b.n	800572a <USBH_HID_Process+0x14e>
    break;
 8005724:	bf00      	nop
 8005726:	e000      	b.n	800572a <USBH_HID_Process+0x14e>
    break;
 8005728:	bf00      	nop
  }
  return status;
 800572a:	7dfb      	ldrb	r3, [r7, #23]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	60fb      	str	r3, [r7, #12]
  
  if(HID_Handle->state == HID_POLL)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	789b      	ldrb	r3, [r3, #2]
 800574a:	2b06      	cmp	r3, #6
 800574c:	d10c      	bne.n	8005768 <USBH_HID_SOFProcess+0x34>
  {
    if(( phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8d3 2758 	ldr.w	r2, [r3, #1880]	; 0x758
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	8b92      	ldrh	r2, [r2, #28]
 800575e:	4293      	cmp	r3, r2
 8005760:	d302      	bcc.n	8005768 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2204      	movs	r2, #4
 8005766:	709a      	strb	r2, [r3, #2]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }
  }
  return USBH_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor (USBH_HandleTypeDef *phost,
                                                         uint16_t length)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b086      	sub	sp, #24
 800577a:	af02      	add	r7, sp, #8
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	460b      	mov	r3, r1
 8005780:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  
  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,                                  
                              USB_DESC_HID_REPORT, 
                              phost->device.Data,
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f503 7207 	add.w	r2, r3, #540	; 0x21c
  status = USBH_GetDescriptor(phost,
 8005788:	887b      	ldrh	r3, [r7, #2]
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	4613      	mov	r3, r2
 800578e:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8005792:	2101      	movs	r1, #1
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f004 fb98 	bl	8009eca <USBH_GetDescriptor>
 800579a:	4603      	mov	r3, r0
 800579c:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/
  
  
  return status;
 800579e:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <USBH_HID_GetHIDDescriptor>:
  * @param  Length : HID Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDDescriptor (USBH_HandleTypeDef *phost,
                                            uint16_t length)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	460b      	mov	r3, r1
 80057b2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  
  status = USBH_GetDescriptor( phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,                                  
                              USB_DESC_HID,
                              phost->device.Data,
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f503 7207 	add.w	r2, r3, #540	; 0x21c
  status = USBH_GetDescriptor( phost,
 80057ba:	887b      	ldrh	r3, [r7, #2]
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	4613      	mov	r3, r2
 80057c0:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 80057c4:	2101      	movs	r1, #1
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f004 fb7f 	bl	8009eca <USBH_GetDescriptor>
 80057cc:	4603      	mov	r3, r0
 80057ce:	73fb      	strb	r3, [r7, #15]
                              length);
 
  return status;
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle (USBH_HandleTypeDef *phost,
                                         uint8_t duration,
                                         uint8_t reportId)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b082      	sub	sp, #8
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	460b      	mov	r3, r1
 80057e4:	70fb      	strb	r3, [r7, #3]
 80057e6:	4613      	mov	r3, r2
 80057e8:	70bb      	strb	r3, [r7, #2]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2221      	movs	r2, #33	; 0x21
 80057ee:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	220a      	movs	r2, #10
 80057f4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (duration << 8 ) | reportId;
 80057f6:	78fb      	ldrb	r3, [r7, #3]
 80057f8:	021b      	lsls	r3, r3, #8
 80057fa:	b21a      	sxth	r2, r3
 80057fc:	78bb      	ldrb	r3, [r7, #2]
 80057fe:	b21b      	sxth	r3, r3
 8005800:	4313      	orrs	r3, r2
 8005802:	b21b      	sxth	r3, r3
 8005804:	b29a      	uxth	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	825a      	strh	r2, [r3, #18]
  
  phost->Control.setup.b.wIndex.w = 0;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, 0 , 0 );
 8005816:	2200      	movs	r2, #0
 8005818:	2100      	movs	r1, #0
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f004 fdb5 	bl	800a38a <USBH_CtlReq>
 8005820:	4603      	mov	r3, r0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <USBH_HID_SetReport>:
USBH_StatusTypeDef USBH_HID_SetReport (USBH_HandleTypeDef *phost,
                                    uint8_t reportType,
                                    uint8_t reportId,
                                    uint8_t* reportBuff,
                                    uint8_t reportLen)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b084      	sub	sp, #16
 800582e:	af00      	add	r7, sp, #0
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	607b      	str	r3, [r7, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	72fb      	strb	r3, [r7, #11]
 8005838:	4613      	mov	r3, r2
 800583a:	72bb      	strb	r3, [r7, #10]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2221      	movs	r2, #33	; 0x21
 8005840:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_REPORT;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2209      	movs	r2, #9
 8005846:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (reportType << 8 ) | reportId;
 8005848:	7afb      	ldrb	r3, [r7, #11]
 800584a:	021b      	lsls	r3, r3, #8
 800584c:	b21a      	sxth	r2, r3
 800584e:	7abb      	ldrb	r3, [r7, #10]
 8005850:	b21b      	sxth	r3, r3
 8005852:	4313      	orrs	r3, r2
 8005854:	b21b      	sxth	r3, r3
 8005856:	b29a      	uxth	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	825a      	strh	r2, [r3, #18]
  
  phost->Control.setup.b.wIndex.w = 0;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8005862:	7e3b      	ldrb	r3, [r7, #24]
 8005864:	b29a      	uxth	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, reportBuff , reportLen );
 800586a:	7e3b      	ldrb	r3, [r7, #24]
 800586c:	b29b      	uxth	r3, r3
 800586e:	461a      	mov	r2, r3
 8005870:	6879      	ldr	r1, [r7, #4]
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f004 fd89 	bl	800a38a <USBH_CtlReq>
 8005878:	4603      	mov	r3, r0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport (USBH_HandleTypeDef *phost,
                                    uint8_t reportType,
                                    uint8_t reportId,
                                    uint8_t* reportBuff,
                                    uint8_t reportLen)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	607b      	str	r3, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	72fb      	strb	r3, [r7, #11]
 8005890:	4613      	mov	r3, r2
 8005892:	72bb      	strb	r3, [r7, #10]
  
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE |\
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	22a1      	movs	r2, #161	; 0xa1
 8005898:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2201      	movs	r2, #1
 800589e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (reportType << 8 ) | reportId;
 80058a0:	7afb      	ldrb	r3, [r7, #11]
 80058a2:	021b      	lsls	r3, r3, #8
 80058a4:	b21a      	sxth	r2, r3
 80058a6:	7abb      	ldrb	r3, [r7, #10]
 80058a8:	b21b      	sxth	r3, r3
 80058aa:	4313      	orrs	r3, r2
 80058ac:	b21b      	sxth	r3, r3
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	825a      	strh	r2, [r3, #18]
  
  phost->Control.setup.b.wIndex.w = 0;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 80058ba:	7e3b      	ldrb	r3, [r7, #24]
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, reportBuff , reportLen );
 80058c2:	7e3b      	ldrb	r3, [r7, #24]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	461a      	mov	r2, r3
 80058c8:	6879      	ldr	r1, [r7, #4]
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f004 fd5d 	bl	800a38a <USBH_CtlReq>
 80058d0:	4603      	mov	r3, r0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                            uint8_t protocol)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b082      	sub	sp, #8
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	460b      	mov	r3, r1
 80058e4:	70fb      	strb	r3, [r7, #3]
  
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2221      	movs	r2, #33	; 0x21
 80058ea:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	220b      	movs	r2, #11
 80058f0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = protocol != 0 ? 0 : 1;
 80058f2:	78fb      	ldrb	r3, [r7, #3]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	bf0c      	ite	eq
 80058f8:	2301      	moveq	r3, #1
 80058fa:	2300      	movne	r3, #0
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	b29a      	uxth	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, 0 , 0 );
 8005910:	2200      	movs	r2, #0
 8005912:	2100      	movs	r1, #0
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f004 fd38 	bl	800a38a <USBH_CtlReq>
 800591a:	4603      	mov	r3, r0
  
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc (HID_DescTypeDef *desc, uint8_t *buf)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  
  desc->bLength                  = *(uint8_t  *) (buf + 0);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781a      	ldrb	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	701a      	strb	r2, [r3, #0]
  desc->bDescriptorType          = *(uint8_t  *) (buf + 1);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	785a      	ldrb	r2, [r3, #1]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	705a      	strb	r2, [r3, #1]
  desc->bcdHID                   =  LE16  (buf + 2);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	3302      	adds	r3, #2
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	b29a      	uxth	r2, r3
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	3303      	adds	r3, #3
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	b29b      	uxth	r3, r3
 800594e:	021b      	lsls	r3, r3, #8
 8005950:	b29b      	uxth	r3, r3
 8005952:	4413      	add	r3, r2
 8005954:	b29a      	uxth	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	805a      	strh	r2, [r3, #2]
  desc->bCountryCode             = *(uint8_t  *) (buf + 4);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	791a      	ldrb	r2, [r3, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	711a      	strb	r2, [r3, #4]
  desc->bNumDescriptors          = *(uint8_t  *) (buf + 5);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	795a      	ldrb	r2, [r3, #5]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	715a      	strb	r2, [r3, #5]
  desc->bReportDescriptorType    = *(uint8_t  *) (buf + 6);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	799a      	ldrb	r2, [r3, #6]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	719a      	strb	r2, [r3, #6]
  desc->wItemLength              =  LE16  (buf + 7);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	3307      	adds	r3, #7
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	b29a      	uxth	r2, r3
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	3308      	adds	r3, #8
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	b29b      	uxth	r3, r3
 8005982:	021b      	lsls	r3, r3, #8
 8005984:	b29b      	uxth	r3, r3
 8005986:	4413      	add	r3, r2
 8005988:	b29a      	uxth	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	811a      	strh	r2, [r3, #8]
} 
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
	...

0800599c <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  
  if(phost->gState == HOST_CLASS)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b0a      	cmp	r3, #10
 80059ac:	d121      	bne.n	80059f2 <USBH_HID_GetDeviceType+0x56>
  {
    
    if(type == CONTROLLER_KB)
 80059ae:	4b14      	ldr	r3, [pc, #80]	; (8005a00 <USBH_HID_GetDeviceType+0x64>)
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d101      	bne.n	80059ba <USBH_HID_GetDeviceType+0x1e>
    {
      return HID_KEYBOARD;
 80059b6:	2302      	movs	r3, #2
 80059b8:	e01c      	b.n	80059f4 <USBH_HID_GetDeviceType+0x58>
    }
    else if(type == CONTROLLER_DS3)
 80059ba:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <USBH_HID_GetDeviceType+0x64>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d101      	bne.n	80059c6 <USBH_HID_GetDeviceType+0x2a>
	{
		return HID_DS3;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e016      	b.n	80059f4 <USBH_HID_GetDeviceType+0x58>
	}
    else if(type == CONTROLLER_DS4)
 80059c6:	4b0e      	ldr	r3, [pc, #56]	; (8005a00 <USBH_HID_GetDeviceType+0x64>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d101      	bne.n	80059d2 <USBH_HID_GetDeviceType+0x36>
	{
		return HID_DS4;
 80059ce:	2304      	movs	r3, #4
 80059d0:	e010      	b.n	80059f4 <USBH_HID_GetDeviceType+0x58>
	}
    else if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol \
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 361f 	ldrb.w	r3, [r3, #1567]	; 0x61f
 80059d8:	4619      	mov	r1, r3
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	231a      	movs	r3, #26
 80059de:	fb03 f301 	mul.w	r3, r3, r1
 80059e2:	4413      	add	r3, r2
 80059e4:	f203 6343 	addw	r3, r3, #1603	; 0x643
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d101      	bne.n	80059f2 <USBH_HID_GetDeviceType+0x56>
          == HID_MOUSE_BOOT_CODE)
	{
	  return HID_MOUSE;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e000      	b.n	80059f4 <USBH_HID_GetDeviceType+0x58>
	}
  }
  return HID_UNKNOWN;
 80059f2:	23ff      	movs	r3, #255	; 0xff
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	2000010c 	.word	0x2000010c

08005a04 <fifo_init>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void fifo_init(FIFO_TypeDef * f, uint8_t * buf, uint16_t size)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	80fb      	strh	r3, [r7, #6]
     f->head = 0;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	809a      	strh	r2, [r3, #4]
     f->tail = 0;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	80da      	strh	r2, [r3, #6]
     f->lock = 0;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	729a      	strb	r2, [r3, #10]
     f->size = size;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	88fa      	ldrh	r2, [r7, #6]
 8005a28:	811a      	strh	r2, [r3, #8]
     f->buf = buf;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	601a      	str	r2, [r3, #0]
}
 8005a30:	bf00      	nop
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <fifo_read>:
  * @param  buf: read buffer 
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t  fifo_read(FIFO_TypeDef * f, void * buf, uint16_t  nbytes)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	4613      	mov	r3, r2
 8005a48:	80fb      	strh	r3, [r7, #6]
  uint16_t  i;
  uint8_t * p;
  p = (uint8_t*) buf;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	613b      	str	r3, [r7, #16]
  
  if(f->lock == 0)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	7a9b      	ldrb	r3, [r3, #10]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d131      	bne.n	8005aba <fifo_read+0x7e>
  {
    f->lock = 1;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	729a      	strb	r2, [r3, #10]
    for(i=0; i < nbytes; i++)
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	82fb      	strh	r3, [r7, #22]
 8005a60:	e027      	b.n	8005ab2 <fifo_read+0x76>
    {
      if( f->tail != f->head )
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	88da      	ldrh	r2, [r3, #6]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	889b      	ldrh	r3, [r3, #4]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d019      	beq.n	8005aa2 <fifo_read+0x66>
      { 
        *p++ = f->buf[f->tail];  
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	613a      	str	r2, [r7, #16]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	6812      	ldr	r2, [r2, #0]
 8005a78:	68f9      	ldr	r1, [r7, #12]
 8005a7a:	88c9      	ldrh	r1, [r1, #6]
 8005a7c:	440a      	add	r2, r1
 8005a7e:	7812      	ldrb	r2, [r2, #0]
 8005a80:	701a      	strb	r2, [r3, #0]
        f->tail++;  
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	88db      	ldrh	r3, [r3, #6]
 8005a86:	3301      	adds	r3, #1
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	80da      	strh	r2, [r3, #6]
        if( f->tail == f->size )
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	88da      	ldrh	r2, [r3, #6]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	891b      	ldrh	r3, [r3, #8]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d108      	bne.n	8005aac <fifo_read+0x70>
        {  
          f->tail = 0;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	80da      	strh	r2, [r3, #6]
 8005aa0:	e004      	b.n	8005aac <fifo_read+0x70>
        }
      } else 
      {
        f->lock = 0;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	729a      	strb	r2, [r3, #10]
        return i; 
 8005aa8:	8afb      	ldrh	r3, [r7, #22]
 8005aaa:	e00a      	b.n	8005ac2 <fifo_read+0x86>
    for(i=0; i < nbytes; i++)
 8005aac:	8afb      	ldrh	r3, [r7, #22]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	82fb      	strh	r3, [r7, #22]
 8005ab2:	8afa      	ldrh	r2, [r7, #22]
 8005ab4:	88fb      	ldrh	r3, [r7, #6]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d3d3      	bcc.n	8005a62 <fifo_read+0x26>
      }
    }
  }
  f->lock = 0;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	729a      	strb	r2, [r3, #10]
  return nbytes;
 8005ac0:	88fb      	ldrh	r3, [r7, #6]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <fifo_write>:
  * @param  buf: read buffer 
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t  fifo_write(FIFO_TypeDef * f, const void * buf, uint16_t  nbytes)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b087      	sub	sp, #28
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	80fb      	strh	r3, [r7, #6]
  uint16_t  i;
  const uint8_t * p;
  p = (const uint8_t*) buf;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	613b      	str	r3, [r7, #16]
  if(f->lock == 0)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	7a9b      	ldrb	r3, [r3, #10]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d13c      	bne.n	8005b62 <fifo_write+0x94>
  {
    f->lock = 1;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2201      	movs	r2, #1
 8005aec:	729a      	strb	r2, [r3, #10]
    for(i=0; i < nbytes; i++)
 8005aee:	2300      	movs	r3, #0
 8005af0:	82fb      	strh	r3, [r7, #22]
 8005af2:	e032      	b.n	8005b5a <fifo_write+0x8c>
    {
      if( (f->head + 1 == f->tail) ||
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	889b      	ldrh	r3, [r3, #4]
 8005af8:	3301      	adds	r3, #1
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	88d2      	ldrh	r2, [r2, #6]
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00a      	beq.n	8005b18 <fifo_write+0x4a>
         ( (f->head + 1 == f->size) && (f->tail == 0)) )
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	889b      	ldrh	r3, [r3, #4]
 8005b06:	3301      	adds	r3, #1
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	8912      	ldrh	r2, [r2, #8]
      if( (f->head + 1 == f->tail) ||
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d108      	bne.n	8005b22 <fifo_write+0x54>
         ( (f->head + 1 == f->size) && (f->tail == 0)) )
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	88db      	ldrh	r3, [r3, #6]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d104      	bne.n	8005b22 <fifo_write+0x54>
      {
        f->lock = 0;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	729a      	strb	r2, [r3, #10]
        return i;
 8005b1e:	8afb      	ldrh	r3, [r7, #22]
 8005b20:	e023      	b.n	8005b6a <fifo_write+0x9c>
      } 
      else 
      {
        f->buf[f->head] = *p++;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	8892      	ldrh	r2, [r2, #4]
 8005b2a:	441a      	add	r2, r3
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1c59      	adds	r1, r3, #1
 8005b30:	6139      	str	r1, [r7, #16]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	7013      	strb	r3, [r2, #0]
        f->head++;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	889b      	ldrh	r3, [r3, #4]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	809a      	strh	r2, [r3, #4]
        if( f->head == f->size )
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	889a      	ldrh	r2, [r3, #4]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	891b      	ldrh	r3, [r3, #8]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d102      	bne.n	8005b54 <fifo_write+0x86>
        {
          f->head = 0;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	809a      	strh	r2, [r3, #4]
    for(i=0; i < nbytes; i++)
 8005b54:	8afb      	ldrh	r3, [r7, #22]
 8005b56:	3301      	adds	r3, #1
 8005b58:	82fb      	strh	r3, [r7, #22]
 8005b5a:	8afa      	ldrh	r2, [r7, #22]
 8005b5c:	88fb      	ldrh	r3, [r7, #6]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d3c8      	bcc.n	8005af4 <fifo_write+0x26>
        }
      }
    }
  }
  f->lock = 0;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	729a      	strb	r2, [r3, #10]
  return nbytes;
 8005b68:	88fb      	ldrh	r3, [r7, #6]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	371c      	adds	r7, #28
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
	...

08005b78 <USBH_HID_EventCallback>:
*  @param  phost: Selected device
* @retval None
*/

__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 8005b78:	b590      	push	{r4, r7, lr}
 8005b7a:	b0af      	sub	sp, #188	; 0xbc
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
	HID_TypeTypeDef type = HID_UNKNOWN;
 8005b80:	23ff      	movs	r3, #255	; 0xff
 8005b82:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
	HID_KEYBD_Info_TypeDef* kb_state = NULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	HID_DS3_Info_TypeDef* ds3_state = NULL;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HID_DS4_Info_TypeDef* ds4_state = NULL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	N64ControllerData new_data;
	GCControllerData new_gc_data;
	uint64_t buttons_and_triggers;

	type = USBH_HID_GetDeviceType(phost);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7ff feff 	bl	800599c <USBH_HID_GetDeviceType>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	switch(type)
 8005ba4:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	f000 818d 	beq.w	8005ec8 <USBH_HID_EventCallback+0x350>
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	f001 80ca 	beq.w	8006d48 <USBH_HID_EventCallback+0x11d0>
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d001      	beq.n	8005bbc <USBH_HID_EventCallback+0x44>
					ds3ButtonPressed = 0;
				}
			}
			break;
		default:
			break;
 8005bb8:	f001 bc9a 	b.w	80074f0 <USBH_HID_EventCallback+0x1978>
			kb_state = USBH_HID_GetKeybdInfo(phost);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f001 ff45 	bl	8007a4c <USBH_HID_GetKeybdInfo>
 8005bc2:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
			if(kb_state->keys[2] == kb_state->keys[3] && kb_state->keys[2] == 1)
 8005bc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005bca:	7ada      	ldrb	r2, [r3, #11]
 8005bcc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005bd0:	7b1b      	ldrb	r3, [r3, #12]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d105      	bne.n	8005be2 <USBH_HID_EventCallback+0x6a>
 8005bd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005bda:	7adb      	ldrb	r3, [r3, #11]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	f001 8480 	beq.w	80074e2 <USBH_HID_EventCallback+0x196a>
			if(state == NORMAL) //used to check state variable for changing controls
 8005be2:	4bb5      	ldr	r3, [pc, #724]	; (8005eb8 <USBH_HID_EventCallback+0x340>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f040 8146 	bne.w	8005e78 <USBH_HID_EventCallback+0x300>
				memset(&new_data,0,4);
 8005bec:	f107 0314 	add.w	r3, r7, #20
 8005bf0:	2204      	movs	r2, #4
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f006 f91c 	bl	800be32 <memset>
				for(int index = 0;index < 6;index++)
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c00:	e12e      	b.n	8005e60 <USBH_HID_EventCallback+0x2e8>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_a_up)
 8005c02:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005c06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c0a:	4413      	add	r3, r2
 8005c0c:	3309      	adds	r3, #9
 8005c0e:	781a      	ldrb	r2, [r3, #0]
 8005c10:	4baa      	ldr	r3, [pc, #680]	; (8005ebc <USBH_HID_EventCallback+0x344>)
 8005c12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d102      	bne.n	8005c20 <USBH_HID_EventCallback+0xa8>
						new_data.y_axis = 0xFE; // -128 bit reversed (100% range)
 8005c1a:	23fe      	movs	r3, #254	; 0xfe
 8005c1c:	75fb      	strb	r3, [r7, #23]
						continue;
 8005c1e:	e11a      	b.n	8005e56 <USBH_HID_EventCallback+0x2de>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_a_down)
 8005c20:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005c24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c28:	4413      	add	r3, r2
 8005c2a:	3309      	adds	r3, #9
 8005c2c:	781a      	ldrb	r2, [r3, #0]
 8005c2e:	4ba3      	ldr	r3, [pc, #652]	; (8005ebc <USBH_HID_EventCallback+0x344>)
 8005c30:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d102      	bne.n	8005c3e <USBH_HID_EventCallback+0xc6>
						new_data.y_axis = 0x01; // +127 bit reversed (100% range)
 8005c38:	2301      	movs	r3, #1
 8005c3a:	75fb      	strb	r3, [r7, #23]
						continue;
 8005c3c:	e10b      	b.n	8005e56 <USBH_HID_EventCallback+0x2de>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_a_left)
 8005c3e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005c42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c46:	4413      	add	r3, r2
 8005c48:	3309      	adds	r3, #9
 8005c4a:	781a      	ldrb	r2, [r3, #0]
 8005c4c:	4b9b      	ldr	r3, [pc, #620]	; (8005ebc <USBH_HID_EventCallback+0x344>)
 8005c4e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d102      	bne.n	8005c5c <USBH_HID_EventCallback+0xe4>
						new_data.x_axis = 0x01; // +127 bit reversed (100% range)
 8005c56:	2301      	movs	r3, #1
 8005c58:	75bb      	strb	r3, [r7, #22]
						continue;
 8005c5a:	e0fc      	b.n	8005e56 <USBH_HID_EventCallback+0x2de>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_a_right)
 8005c5c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005c60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c64:	4413      	add	r3, r2
 8005c66:	3309      	adds	r3, #9
 8005c68:	781a      	ldrb	r2, [r3, #0]
 8005c6a:	4b94      	ldr	r3, [pc, #592]	; (8005ebc <USBH_HID_EventCallback+0x344>)
 8005c6c:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d102      	bne.n	8005c7a <USBH_HID_EventCallback+0x102>
						new_data.x_axis = 0xFE; // -128 bit reversed (100% range)
 8005c74:	23fe      	movs	r3, #254	; 0xfe
 8005c76:	75bb      	strb	r3, [r7, #22]
						continue;
 8005c78:	e0ed      	b.n	8005e56 <USBH_HID_EventCallback+0x2de>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_d_up)
 8005c7a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005c7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c82:	4413      	add	r3, r2
 8005c84:	3309      	adds	r3, #9
 8005c86:	781a      	ldrb	r2, [r3, #0]
 8005c88:	4b8c      	ldr	r3, [pc, #560]	; (8005ebc <USBH_HID_EventCallback+0x344>)
 8005c8a:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d104      	bne.n	8005c9c <USBH_HID_EventCallback+0x124>
						new_data.up = 1;
 8005c92:	7d3b      	ldrb	r3, [r7, #20]
 8005c94:	f043 0310 	orr.w	r3, r3, #16
 8005c98:	753b      	strb	r3, [r7, #20]
						continue;
 8005c9a:	e0dc      	b.n	8005e56 <USBH_HID_EventCallback+0x2de>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_d_down)
 8005c9c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005ca0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ca4:	4413      	add	r3, r2
 8005ca6:	3309      	adds	r3, #9
 8005ca8:	781a      	ldrb	r2, [r3, #0]
 8005caa:	4b84      	ldr	r3, [pc, #528]	; (8005ebc <USBH_HID_EventCallback+0x344>)
 8005cac:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d104      	bne.n	8005cbe <USBH_HID_EventCallback+0x146>
						new_data.down = 1;
 8005cb4:	7d3b      	ldrb	r3, [r7, #20]
 8005cb6:	f043 0320 	orr.w	r3, r3, #32
 8005cba:	753b      	strb	r3, [r7, #20]
						continue;
 8005cbc:	e0cb      	b.n	8005e56 <USBH_HID_EventCallback+0x2de>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_d_left)
 8005cbe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005cc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005cc6:	4413      	add	r3, r2
 8005cc8:	3309      	adds	r3, #9
 8005cca:	781a      	ldrb	r2, [r3, #0]
 8005ccc:	4b7b      	ldr	r3, [pc, #492]	; (8005ebc <USBH_HID_EventCallback+0x344>)
 8005cce:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d104      	bne.n	8005ce0 <USBH_HID_EventCallback+0x168>
						new_data.left = 1;
 8005cd6:	7d3b      	ldrb	r3, [r7, #20]
 8005cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cdc:	753b      	strb	r3, [r7, #20]
						continue;
 8005cde:	e0ba      	b.n	8005e56 <USBH_HID_EventCallback+0x2de>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_d_right)
 8005ce0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005ce4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ce8:	4413      	add	r3, r2
 8005cea:	3309      	adds	r3, #9
 8005cec:	781a      	ldrb	r2, [r3, #0]
 8005cee:	4b73      	ldr	r3, [pc, #460]	; (8005ebc <USBH_HID_EventCallback+0x344>)
 8005cf0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d104      	bne.n	8005d02 <USBH_HID_EventCallback+0x18a>
						new_data.right = 1;
 8005cf8:	7d3b      	ldrb	r3, [r7, #20]
 8005cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cfe:	753b      	strb	r3, [r7, #20]
						continue;
 8005d00:	e0a9      	b.n	8005e56 <USBH_HID_EventCallback+0x2de>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_a)
 8005d02:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005d06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005d0a:	4413      	add	r3, r2
 8005d0c:	3309      	adds	r3, #9
 8005d0e:	781a      	ldrb	r2, [r3, #0]
 8005d10:	4b6a      	ldr	r3, [pc, #424]	; (8005ebc <USBH_HID_EventCallback+0x344>)
 8005d12:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d104      	bne.n	8005d24 <USBH_HID_EventCallback+0x1ac>
						new_data.a = 1;
 8005d1a:	7d3b      	ldrb	r3, [r7, #20]
 8005d1c:	f043 0301 	orr.w	r3, r3, #1
 8005d20:	753b      	strb	r3, [r7, #20]
						continue;
 8005d22:	e098      	b.n	8005e56 <USBH_HID_EventCallback+0x2de>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_b)
 8005d24:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005d28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005d2c:	4413      	add	r3, r2
 8005d2e:	3309      	adds	r3, #9
 8005d30:	781a      	ldrb	r2, [r3, #0]
 8005d32:	4b62      	ldr	r3, [pc, #392]	; (8005ebc <USBH_HID_EventCallback+0x344>)
 8005d34:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d104      	bne.n	8005d46 <USBH_HID_EventCallback+0x1ce>
						new_data.b = 1;
 8005d3c:	7d3b      	ldrb	r3, [r7, #20]
 8005d3e:	f043 0302 	orr.w	r3, r3, #2
 8005d42:	753b      	strb	r3, [r7, #20]
						continue;
 8005d44:	e087      	b.n	8005e56 <USBH_HID_EventCallback+0x2de>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_l)
 8005d46:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005d4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005d4e:	4413      	add	r3, r2
 8005d50:	3309      	adds	r3, #9
 8005d52:	781a      	ldrb	r2, [r3, #0]
 8005d54:	4b59      	ldr	r3, [pc, #356]	; (8005ebc <USBH_HID_EventCallback+0x344>)
 8005d56:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d104      	bne.n	8005d68 <USBH_HID_EventCallback+0x1f0>
						new_data.l = 1;
 8005d5e:	7d7b      	ldrb	r3, [r7, #21]
 8005d60:	f043 0304 	orr.w	r3, r3, #4
 8005d64:	757b      	strb	r3, [r7, #21]
						continue;
 8005d66:	e076      	b.n	8005e56 <USBH_HID_EventCallback+0x2de>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_r)
 8005d68:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005d6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005d70:	4413      	add	r3, r2
 8005d72:	3309      	adds	r3, #9
 8005d74:	781a      	ldrb	r2, [r3, #0]
 8005d76:	4b51      	ldr	r3, [pc, #324]	; (8005ebc <USBH_HID_EventCallback+0x344>)
 8005d78:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d104      	bne.n	8005d8a <USBH_HID_EventCallback+0x212>
						new_data.r = 1;
 8005d80:	7d7b      	ldrb	r3, [r7, #21]
 8005d82:	f043 0308 	orr.w	r3, r3, #8
 8005d86:	757b      	strb	r3, [r7, #21]
						continue;
 8005d88:	e065      	b.n	8005e56 <USBH_HID_EventCallback+0x2de>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_z)
 8005d8a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005d8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005d92:	4413      	add	r3, r2
 8005d94:	3309      	adds	r3, #9
 8005d96:	781a      	ldrb	r2, [r3, #0]
 8005d98:	4b48      	ldr	r3, [pc, #288]	; (8005ebc <USBH_HID_EventCallback+0x344>)
 8005d9a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d104      	bne.n	8005dac <USBH_HID_EventCallback+0x234>
						new_data.z = 1;
 8005da2:	7d3b      	ldrb	r3, [r7, #20]
 8005da4:	f043 0304 	orr.w	r3, r3, #4
 8005da8:	753b      	strb	r3, [r7, #20]
						continue;
 8005daa:	e054      	b.n	8005e56 <USBH_HID_EventCallback+0x2de>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_start)
 8005dac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005db0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005db4:	4413      	add	r3, r2
 8005db6:	3309      	adds	r3, #9
 8005db8:	781a      	ldrb	r2, [r3, #0]
 8005dba:	4b40      	ldr	r3, [pc, #256]	; (8005ebc <USBH_HID_EventCallback+0x344>)
 8005dbc:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d104      	bne.n	8005dce <USBH_HID_EventCallback+0x256>
						new_data.start = 1;
 8005dc4:	7d3b      	ldrb	r3, [r7, #20]
 8005dc6:	f043 0308 	orr.w	r3, r3, #8
 8005dca:	753b      	strb	r3, [r7, #20]
						continue;
 8005dcc:	e043      	b.n	8005e56 <USBH_HID_EventCallback+0x2de>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_c_up)
 8005dce:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005dd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005dd6:	4413      	add	r3, r2
 8005dd8:	3309      	adds	r3, #9
 8005dda:	781a      	ldrb	r2, [r3, #0]
 8005ddc:	4b37      	ldr	r3, [pc, #220]	; (8005ebc <USBH_HID_EventCallback+0x344>)
 8005dde:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d104      	bne.n	8005df0 <USBH_HID_EventCallback+0x278>
						new_data.c_up = 1;
 8005de6:	7d7b      	ldrb	r3, [r7, #21]
 8005de8:	f043 0310 	orr.w	r3, r3, #16
 8005dec:	757b      	strb	r3, [r7, #21]
						continue;
 8005dee:	e032      	b.n	8005e56 <USBH_HID_EventCallback+0x2de>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_c_down)
 8005df0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005df4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005df8:	4413      	add	r3, r2
 8005dfa:	3309      	adds	r3, #9
 8005dfc:	781a      	ldrb	r2, [r3, #0]
 8005dfe:	4b2f      	ldr	r3, [pc, #188]	; (8005ebc <USBH_HID_EventCallback+0x344>)
 8005e00:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d104      	bne.n	8005e12 <USBH_HID_EventCallback+0x29a>
						new_data.c_down = 1;
 8005e08:	7d7b      	ldrb	r3, [r7, #21]
 8005e0a:	f043 0320 	orr.w	r3, r3, #32
 8005e0e:	757b      	strb	r3, [r7, #21]
						continue;
 8005e10:	e021      	b.n	8005e56 <USBH_HID_EventCallback+0x2de>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_c_left)
 8005e12:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005e16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e1a:	4413      	add	r3, r2
 8005e1c:	3309      	adds	r3, #9
 8005e1e:	781a      	ldrb	r2, [r3, #0]
 8005e20:	4b26      	ldr	r3, [pc, #152]	; (8005ebc <USBH_HID_EventCallback+0x344>)
 8005e22:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d104      	bne.n	8005e34 <USBH_HID_EventCallback+0x2bc>
						new_data.c_left = 1;
 8005e2a:	7d7b      	ldrb	r3, [r7, #21]
 8005e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e30:	757b      	strb	r3, [r7, #21]
						continue;
 8005e32:	e010      	b.n	8005e56 <USBH_HID_EventCallback+0x2de>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_c_right)
 8005e34:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005e38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e3c:	4413      	add	r3, r2
 8005e3e:	3309      	adds	r3, #9
 8005e40:	781a      	ldrb	r2, [r3, #0]
 8005e42:	4b1e      	ldr	r3, [pc, #120]	; (8005ebc <USBH_HID_EventCallback+0x344>)
 8005e44:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d104      	bne.n	8005e56 <USBH_HID_EventCallback+0x2de>
						new_data.c_right = 1;
 8005e4c:	7d7b      	ldrb	r3, [r7, #21]
 8005e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e52:	757b      	strb	r3, [r7, #21]
						continue;
 8005e54:	bf00      	nop
				for(int index = 0;index < 6;index++)
 8005e56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e64:	2b05      	cmp	r3, #5
 8005e66:	f77f aecc 	ble.w	8005c02 <USBH_HID_EventCallback+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005e6a:	b672      	cpsid	i
				memcpy(&n64_data, &new_data,4);
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	4a14      	ldr	r2, [pc, #80]	; (8005ec0 <USBH_HID_EventCallback+0x348>)
 8005e70:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005e72:	b662      	cpsie	i
			break;
 8005e74:	f001 bb37 	b.w	80074e6 <USBH_HID_EventCallback+0x196e>
				uint8_t b = kb_state->keys[0]; // read for button presses (just take first pressed if many are pressed)
 8005e78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e7c:	7a5b      	ldrb	r3, [r3, #9]
 8005e7e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
				if(b != 0) /*button was actually is pressed*/
 8005e82:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d010      	beq.n	8005eac <USBH_HID_EventCallback+0x334>
					if(keyboardButtonPressed == 0)
 8005e8a:	4b0e      	ldr	r3, [pc, #56]	; (8005ec4 <USBH_HID_EventCallback+0x34c>)
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f041 8329 	bne.w	80074e6 <USBH_HID_EventCallback+0x196e>
						keyboardButtonPressed = 1;
 8005e94:	4b0b      	ldr	r3, [pc, #44]	; (8005ec4 <USBH_HID_EventCallback+0x34c>)
 8005e96:	2201      	movs	r2, #1
 8005e98:	701a      	strb	r2, [r3, #0]
						ChangeButtonMappingKB(b);
 8005e9a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f004 fd4a 	bl	800a938 <ChangeButtonMappingKB>
						AdvanceState();
 8005ea4:	f004 feea 	bl	800ac7c <AdvanceState>
			break;
 8005ea8:	f001 bb1d 	b.w	80074e6 <USBH_HID_EventCallback+0x196e>
					keyboardButtonPressed = 0;
 8005eac:	4b05      	ldr	r3, [pc, #20]	; (8005ec4 <USBH_HID_EventCallback+0x34c>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	701a      	strb	r2, [r3, #0]
			break;
 8005eb2:	f001 bb18 	b.w	80074e6 <USBH_HID_EventCallback+0x196e>
 8005eb6:	bf00      	nop
 8005eb8:	2000010a 	.word	0x2000010a
 8005ebc:	20000284 	.word	0x20000284
 8005ec0:	20000308 	.word	0x20000308
 8005ec4:	20000100 	.word	0x20000100
			ds3_state = USBH_HID_GetDS3Info(phost);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f001 fb91 	bl	80075f0 <USBH_HID_GetDS3Info>
 8005ece:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
			buttons_and_triggers = USBH_HID_GetDS3ButtonsAndTriggers();
 8005ed2:	f001 fba1 	bl	8007618 <USBH_HID_GetDS3ButtonsAndTriggers>
 8005ed6:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
			if(state == NORMAL)
 8005eda:	4bad      	ldr	r3, [pc, #692]	; (8006190 <USBH_HID_EventCallback+0x618>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f040 85d3 	bne.w	8006a8a <USBH_HID_EventCallback+0xf12>
				if(output_type == OUTPUT_N64)
 8005ee4:	4bab      	ldr	r3, [pc, #684]	; (8006194 <USBH_HID_EventCallback+0x61c>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	f040 826d 	bne.w	80063c8 <USBH_HID_EventCallback+0x850>
					memset(&new_data,0,4);
 8005eee:	f107 0314 	add.w	r3, r7, #20
 8005ef2:	2204      	movs	r2, #4
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f005 ff9b 	bl	800be32 <memset>
					if(buttons_and_triggers & controls.XpadControls.up)
 8005efc:	4aa6      	ldr	r2, [pc, #664]	; (8006198 <USBH_HID_EventCallback+0x620>)
 8005efe:	6a13      	ldr	r3, [r2, #32]
 8005f00:	6a54      	ldr	r4, [r2, #36]	; 0x24
 8005f02:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005f06:	ea03 0301 	and.w	r3, r3, r1
 8005f0a:	ea04 0402 	and.w	r4, r4, r2
 8005f0e:	4323      	orrs	r3, r4
 8005f10:	d003      	beq.n	8005f1a <USBH_HID_EventCallback+0x3a2>
						new_data.up = 1;
 8005f12:	7d3b      	ldrb	r3, [r7, #20]
 8005f14:	f043 0310 	orr.w	r3, r3, #16
 8005f18:	753b      	strb	r3, [r7, #20]
					if(buttons_and_triggers & controls.XpadControls.down)
 8005f1a:	4a9f      	ldr	r2, [pc, #636]	; (8006198 <USBH_HID_EventCallback+0x620>)
 8005f1c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005f1e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8005f20:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005f24:	ea03 0301 	and.w	r3, r3, r1
 8005f28:	ea04 0402 	and.w	r4, r4, r2
 8005f2c:	4323      	orrs	r3, r4
 8005f2e:	d003      	beq.n	8005f38 <USBH_HID_EventCallback+0x3c0>
						new_data.down = 1;
 8005f30:	7d3b      	ldrb	r3, [r7, #20]
 8005f32:	f043 0320 	orr.w	r3, r3, #32
 8005f36:	753b      	strb	r3, [r7, #20]
					if(buttons_and_triggers & controls.XpadControls.left)
 8005f38:	4a97      	ldr	r2, [pc, #604]	; (8006198 <USBH_HID_EventCallback+0x620>)
 8005f3a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005f3c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8005f3e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005f42:	ea03 0301 	and.w	r3, r3, r1
 8005f46:	ea04 0402 	and.w	r4, r4, r2
 8005f4a:	4323      	orrs	r3, r4
 8005f4c:	d003      	beq.n	8005f56 <USBH_HID_EventCallback+0x3de>
						new_data.left = 1;
 8005f4e:	7d3b      	ldrb	r3, [r7, #20]
 8005f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f54:	753b      	strb	r3, [r7, #20]
					if(buttons_and_triggers & controls.XpadControls.right)
 8005f56:	4a90      	ldr	r2, [pc, #576]	; (8006198 <USBH_HID_EventCallback+0x620>)
 8005f58:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005f5a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8005f5c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005f60:	ea03 0301 	and.w	r3, r3, r1
 8005f64:	ea04 0402 	and.w	r4, r4, r2
 8005f68:	4323      	orrs	r3, r4
 8005f6a:	d003      	beq.n	8005f74 <USBH_HID_EventCallback+0x3fc>
						new_data.right = 1;
 8005f6c:	7d3b      	ldrb	r3, [r7, #20]
 8005f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f72:	753b      	strb	r3, [r7, #20]
					if(buttons_and_triggers & controls.XpadControls.c_up)
 8005f74:	4a88      	ldr	r2, [pc, #544]	; (8006198 <USBH_HID_EventCallback+0x620>)
 8005f76:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005f78:	6d54      	ldr	r4, [r2, #84]	; 0x54
 8005f7a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005f7e:	ea03 0301 	and.w	r3, r3, r1
 8005f82:	ea04 0402 	and.w	r4, r4, r2
 8005f86:	4323      	orrs	r3, r4
 8005f88:	d003      	beq.n	8005f92 <USBH_HID_EventCallback+0x41a>
						new_data.c_up = 1;
 8005f8a:	7d7b      	ldrb	r3, [r7, #21]
 8005f8c:	f043 0310 	orr.w	r3, r3, #16
 8005f90:	757b      	strb	r3, [r7, #21]
					if(buttons_and_triggers & controls.XpadControls.c_down)
 8005f92:	4a81      	ldr	r2, [pc, #516]	; (8006198 <USBH_HID_EventCallback+0x620>)
 8005f94:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005f96:	6dd4      	ldr	r4, [r2, #92]	; 0x5c
 8005f98:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005f9c:	ea03 0301 	and.w	r3, r3, r1
 8005fa0:	ea04 0402 	and.w	r4, r4, r2
 8005fa4:	4323      	orrs	r3, r4
 8005fa6:	d003      	beq.n	8005fb0 <USBH_HID_EventCallback+0x438>
						new_data.c_down = 1;
 8005fa8:	7d7b      	ldrb	r3, [r7, #21]
 8005faa:	f043 0320 	orr.w	r3, r3, #32
 8005fae:	757b      	strb	r3, [r7, #21]
					if(buttons_and_triggers & controls.XpadControls.c_left)
 8005fb0:	4a79      	ldr	r2, [pc, #484]	; (8006198 <USBH_HID_EventCallback+0x620>)
 8005fb2:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8005fb4:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8005fb6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005fba:	ea03 0301 	and.w	r3, r3, r1
 8005fbe:	ea04 0402 	and.w	r4, r4, r2
 8005fc2:	4323      	orrs	r3, r4
 8005fc4:	d003      	beq.n	8005fce <USBH_HID_EventCallback+0x456>
						new_data.c_left = 1;
 8005fc6:	7d7b      	ldrb	r3, [r7, #21]
 8005fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fcc:	757b      	strb	r3, [r7, #21]
					if(buttons_and_triggers & controls.XpadControls.c_right)
 8005fce:	4a72      	ldr	r2, [pc, #456]	; (8006198 <USBH_HID_EventCallback+0x620>)
 8005fd0:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8005fd2:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
 8005fd4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005fd8:	ea03 0301 	and.w	r3, r3, r1
 8005fdc:	ea04 0402 	and.w	r4, r4, r2
 8005fe0:	4323      	orrs	r3, r4
 8005fe2:	d003      	beq.n	8005fec <USBH_HID_EventCallback+0x474>
						new_data.c_right = 1;
 8005fe4:	7d7b      	ldrb	r3, [r7, #21]
 8005fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fea:	757b      	strb	r3, [r7, #21]
					if(buttons_and_triggers & controls.XpadControls.l)
 8005fec:	4a6a      	ldr	r2, [pc, #424]	; (8006198 <USBH_HID_EventCallback+0x620>)
 8005fee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005ff0:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8005ff2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005ff6:	ea03 0301 	and.w	r3, r3, r1
 8005ffa:	ea04 0402 	and.w	r4, r4, r2
 8005ffe:	4323      	orrs	r3, r4
 8006000:	d003      	beq.n	800600a <USBH_HID_EventCallback+0x492>
						new_data.l = 1;
 8006002:	7d7b      	ldrb	r3, [r7, #21]
 8006004:	f043 0304 	orr.w	r3, r3, #4
 8006008:	757b      	strb	r3, [r7, #21]
					if(buttons_and_triggers & controls.XpadControls.r)
 800600a:	4a63      	ldr	r2, [pc, #396]	; (8006198 <USBH_HID_EventCallback+0x620>)
 800600c:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800600e:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
 8006010:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006014:	ea03 0301 	and.w	r3, r3, r1
 8006018:	ea04 0402 	and.w	r4, r4, r2
 800601c:	4323      	orrs	r3, r4
 800601e:	d003      	beq.n	8006028 <USBH_HID_EventCallback+0x4b0>
						new_data.r = 1;
 8006020:	7d7b      	ldrb	r3, [r7, #21]
 8006022:	f043 0308 	orr.w	r3, r3, #8
 8006026:	757b      	strb	r3, [r7, #21]
					if(buttons_and_triggers & controls.XpadControls.z)
 8006028:	4a5b      	ldr	r2, [pc, #364]	; (8006198 <USBH_HID_EventCallback+0x620>)
 800602a:	6913      	ldr	r3, [r2, #16]
 800602c:	6954      	ldr	r4, [r2, #20]
 800602e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006032:	ea03 0301 	and.w	r3, r3, r1
 8006036:	ea04 0402 	and.w	r4, r4, r2
 800603a:	4323      	orrs	r3, r4
 800603c:	d003      	beq.n	8006046 <USBH_HID_EventCallback+0x4ce>
						new_data.z = 1;
 800603e:	7d3b      	ldrb	r3, [r7, #20]
 8006040:	f043 0304 	orr.w	r3, r3, #4
 8006044:	753b      	strb	r3, [r7, #20]
					if(buttons_and_triggers & controls.XpadControls.a)
 8006046:	4a54      	ldr	r2, [pc, #336]	; (8006198 <USBH_HID_EventCallback+0x620>)
 8006048:	6813      	ldr	r3, [r2, #0]
 800604a:	6854      	ldr	r4, [r2, #4]
 800604c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006050:	ea03 0301 	and.w	r3, r3, r1
 8006054:	ea04 0402 	and.w	r4, r4, r2
 8006058:	4323      	orrs	r3, r4
 800605a:	d003      	beq.n	8006064 <USBH_HID_EventCallback+0x4ec>
						new_data.a = 1;
 800605c:	7d3b      	ldrb	r3, [r7, #20]
 800605e:	f043 0301 	orr.w	r3, r3, #1
 8006062:	753b      	strb	r3, [r7, #20]
					if(buttons_and_triggers & controls.XpadControls.b)
 8006064:	4a4c      	ldr	r2, [pc, #304]	; (8006198 <USBH_HID_EventCallback+0x620>)
 8006066:	6893      	ldr	r3, [r2, #8]
 8006068:	68d4      	ldr	r4, [r2, #12]
 800606a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800606e:	ea03 0301 	and.w	r3, r3, r1
 8006072:	ea04 0402 	and.w	r4, r4, r2
 8006076:	4323      	orrs	r3, r4
 8006078:	d003      	beq.n	8006082 <USBH_HID_EventCallback+0x50a>
						new_data.b = 1;
 800607a:	7d3b      	ldrb	r3, [r7, #20]
 800607c:	f043 0302 	orr.w	r3, r3, #2
 8006080:	753b      	strb	r3, [r7, #20]
					if(buttons_and_triggers & controls.XpadControls.start)
 8006082:	4a45      	ldr	r2, [pc, #276]	; (8006198 <USBH_HID_EventCallback+0x620>)
 8006084:	6993      	ldr	r3, [r2, #24]
 8006086:	69d4      	ldr	r4, [r2, #28]
 8006088:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800608c:	ea03 0301 	and.w	r3, r3, r1
 8006090:	ea04 0402 	and.w	r4, r4, r2
 8006094:	4323      	orrs	r3, r4
 8006096:	d003      	beq.n	80060a0 <USBH_HID_EventCallback+0x528>
						new_data.start = 1;
 8006098:	7d3b      	ldrb	r3, [r7, #20]
 800609a:	f043 0308 	orr.w	r3, r3, #8
 800609e:	753b      	strb	r3, [r7, #20]
					const float N64_MAX = 127*(controls.XpadControls.range/100.0f);
 80060a0:	4b3d      	ldr	r3, [pc, #244]	; (8006198 <USBH_HID_EventCallback+0x620>)
 80060a2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060ae:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800619c <USBH_HID_EventCallback+0x624>
 80060b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060b6:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80061a0 <USBH_HID_EventCallback+0x628>
 80060ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060be:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
					float deadzoneValue = (controls.XpadControls.deadzone/100.0f) * DS3_MAX;
 80060c2:	4b35      	ldr	r3, [pc, #212]	; (8006198 <USBH_HID_EventCallback+0x620>)
 80060c4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80060c8:	ee07 3a90 	vmov	s15, r3
 80060cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060d0:	eddf 6a32 	vldr	s13, [pc, #200]	; 800619c <USBH_HID_EventCallback+0x624>
 80060d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060d8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80061a0 <USBH_HID_EventCallback+0x628>
 80060dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060e0:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
					float deadzoneRelation = DS3_MAX / (DS3_MAX - deadzoneValue);
 80060e4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80061a0 <USBH_HID_EventCallback+0x628>
 80060e8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80060ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060f0:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80061a0 <USBH_HID_EventCallback+0x628>
 80060f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060f8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
					int8_t LSX = 0, LSY = 0; // -128 to +127...
 80060fc:	2300      	movs	r3, #0
 80060fe:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8006102:	2300      	movs	r3, #0
 8006104:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
					float unscaled_result = 0;
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					int8_t stick_lx = ds3_state->LAnalogX - 128;
 8006110:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006114:	799b      	ldrb	r3, [r3, #6]
 8006116:	3b80      	subs	r3, #128	; 0x80
 8006118:	b2db      	uxtb	r3, r3
 800611a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					int8_t stick_ly = ds3_state->LAnalogY - 128;
 800611e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006122:	79db      	ldrb	r3, [r3, #7]
 8006124:	3b80      	subs	r3, #128	; 0x80
 8006126:	b2db      	uxtb	r3, r3
 8006128:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
					int16_t temp_stick_val = 0;
 800612c:	2300      	movs	r3, #0
 800612e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
					if(stick_lx >= deadzoneValue) // positive = right
 8006132:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800613e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8006142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800614a:	db2b      	blt.n	80061a4 <USBH_HID_EventCallback+0x62c>
						unscaled_result = (stick_lx - deadzoneValue) * deadzoneRelation;
 800614c:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8006150:	ee07 3a90 	vmov	s15, r3
 8006154:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006158:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800615c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006160:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8006164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006168:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
						LSX = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 800616c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006170:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80061a0 <USBH_HID_EventCallback+0x628>
 8006174:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006178:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800617c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006184:	edc7 7a00 	vstr	s15, [r7]
 8006188:	783b      	ldrb	r3, [r7, #0]
 800618a:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800618e:	e046      	b.n	800621e <USBH_HID_EventCallback+0x6a6>
 8006190:	2000010a 	.word	0x2000010a
 8006194:	2000011c 	.word	0x2000011c
 8006198:	20000284 	.word	0x20000284
 800619c:	42c80000 	.word	0x42c80000
 80061a0:	42fe0000 	.word	0x42fe0000
					else if(stick_lx <= (-deadzoneValue)) // negative = left
 80061a4:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80061a8:	ee07 3a90 	vmov	s15, r3
 80061ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061b0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80061b4:	eef1 7a67 	vneg.f32	s15, s15
 80061b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80061bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c0:	d82d      	bhi.n	800621e <USBH_HID_EventCallback+0x6a6>
						temp_stick_val = -(stick_lx+1); // compute as positive, then negate at the end
 80061c2:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	43db      	mvns	r3, r3
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
						unscaled_result = (temp_stick_val - deadzoneValue) * deadzoneRelation;
 80061d0:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 80061d4:	ee07 3a90 	vmov	s15, r3
 80061d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061dc:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80061e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061e4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80061e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ec:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
						LSX = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 80061f0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80061f4:	ed5f 6a16 	vldr	s13, [pc, #-88]	; 80061a0 <USBH_HID_EventCallback+0x628>
 80061f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80061fc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006204:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006208:	edc7 7a00 	vstr	s15, [r7]
 800620c:	783b      	ldrb	r3, [r7, #0]
 800620e:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
						LSX = -LSX;
 8006212:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8006216:	425b      	negs	r3, r3
 8006218:	b2db      	uxtb	r3, r3
 800621a:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
					if(stick_ly >= deadzoneValue) // DS3 positive = down
 800621e:	f997 307e 	ldrsb.w	r3, [r7, #126]	; 0x7e
 8006222:	ee07 3a90 	vmov	s15, r3
 8006226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800622a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800622e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006236:	db27      	blt.n	8006288 <USBH_HID_EventCallback+0x710>
						unscaled_result = (stick_ly - deadzoneValue) * deadzoneRelation;
 8006238:	f997 307e 	ldrsb.w	r3, [r7, #126]	; 0x7e
 800623c:	ee07 3a90 	vmov	s15, r3
 8006240:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006244:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8006248:	ee37 7a67 	vsub.f32	s14, s14, s15
 800624c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8006250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006254:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
						LSY = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 8006258:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800625c:	ed5f 6a30 	vldr	s13, [pc, #-192]	; 80061a0 <USBH_HID_EventCallback+0x628>
 8006260:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006264:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800626c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006270:	edc7 7a00 	vstr	s15, [r7]
 8006274:	783b      	ldrb	r3, [r7, #0]
 8006276:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
						LSY = -LSY; // for n64 down is negative
 800627a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 800627e:	425b      	negs	r3, r3
 8006280:	b2db      	uxtb	r3, r3
 8006282:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 8006286:	e036      	b.n	80062f6 <USBH_HID_EventCallback+0x77e>
					else if(stick_ly <= (-deadzoneValue)) // DS3 negative = up
 8006288:	f997 307e 	ldrsb.w	r3, [r7, #126]	; 0x7e
 800628c:	ee07 3a90 	vmov	s15, r3
 8006290:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006294:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8006298:	eef1 7a67 	vneg.f32	s15, s15
 800629c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062a4:	d827      	bhi.n	80062f6 <USBH_HID_EventCallback+0x77e>
						temp_stick_val = -(stick_ly+1); // compute as positive
 80062a6:	f997 307e 	ldrsb.w	r3, [r7, #126]	; 0x7e
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	43db      	mvns	r3, r3
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
						unscaled_result = (temp_stick_val - deadzoneValue) * deadzoneRelation;
 80062b4:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 80062b8:	ee07 3a90 	vmov	s15, r3
 80062bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062c0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80062c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062c8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80062cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
						LSY = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 80062d4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80062d8:	ed5f 6a4f 	vldr	s13, [pc, #-316]	; 80061a0 <USBH_HID_EventCallback+0x628>
 80062dc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80062e0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80062e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062ec:	edc7 7a00 	vstr	s15, [r7]
 80062f0:	783b      	ldrb	r3, [r7, #0]
 80062f2:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
					new_data.x_axis = reverse((uint8_t)LSX);
 80062f6:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80062fa:	4618      	mov	r0, r3
 80062fc:	f004 fcf2 	bl	800ace4 <reverse>
 8006300:	4603      	mov	r3, r0
 8006302:	75bb      	strb	r3, [r7, #22]
					new_data.y_axis = reverse((uint8_t)LSY);
 8006304:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8006308:	4618      	mov	r0, r3
 800630a:	f004 fceb 	bl	800ace4 <reverse>
 800630e:	4603      	mov	r3, r0
 8006310:	75fb      	strb	r3, [r7, #23]
					if(stick_rx >= deadzoneValue) // positive = right
 8006312:	4b2a      	ldr	r3, [pc, #168]	; (80063bc <USBH_HID_EventCallback+0x844>)
 8006314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006318:	ee07 3a90 	vmov	s15, r3
 800631c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006320:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8006324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800632c:	db04      	blt.n	8006338 <USBH_HID_EventCallback+0x7c0>
						new_data.c_right = 1;
 800632e:	7d7b      	ldrb	r3, [r7, #21]
 8006330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006334:	757b      	strb	r3, [r7, #21]
 8006336:	e013      	b.n	8006360 <USBH_HID_EventCallback+0x7e8>
					else if(stick_rx <= (-deadzoneValue)) // negative = left
 8006338:	4b20      	ldr	r3, [pc, #128]	; (80063bc <USBH_HID_EventCallback+0x844>)
 800633a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800633e:	ee07 3a90 	vmov	s15, r3
 8006342:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006346:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800634a:	eef1 7a67 	vneg.f32	s15, s15
 800634e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006356:	d803      	bhi.n	8006360 <USBH_HID_EventCallback+0x7e8>
						new_data.c_left = 1;
 8006358:	7d7b      	ldrb	r3, [r7, #21]
 800635a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800635e:	757b      	strb	r3, [r7, #21]
					if(stick_ry >= deadzoneValue) // positive = up
 8006360:	4b17      	ldr	r3, [pc, #92]	; (80063c0 <USBH_HID_EventCallback+0x848>)
 8006362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006366:	ee07 3a90 	vmov	s15, r3
 800636a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800636e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8006372:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800637a:	db04      	blt.n	8006386 <USBH_HID_EventCallback+0x80e>
						new_data.c_up = 1;
 800637c:	7d7b      	ldrb	r3, [r7, #21]
 800637e:	f043 0310 	orr.w	r3, r3, #16
 8006382:	757b      	strb	r3, [r7, #21]
 8006384:	e013      	b.n	80063ae <USBH_HID_EventCallback+0x836>
					else if(stick_ry <= (-deadzoneValue)) // negative = down
 8006386:	4b0e      	ldr	r3, [pc, #56]	; (80063c0 <USBH_HID_EventCallback+0x848>)
 8006388:	f9b3 3000 	ldrsh.w	r3, [r3]
 800638c:	ee07 3a90 	vmov	s15, r3
 8006390:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006394:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8006398:	eef1 7a67 	vneg.f32	s15, s15
 800639c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a4:	d803      	bhi.n	80063ae <USBH_HID_EventCallback+0x836>
						new_data.c_down = 1;
 80063a6:	7d7b      	ldrb	r3, [r7, #21]
 80063a8:	f043 0320 	orr.w	r3, r3, #32
 80063ac:	757b      	strb	r3, [r7, #21]
  __ASM volatile ("cpsid i" : : : "memory");
 80063ae:	b672      	cpsid	i
					memcpy(&n64_data, &new_data,4);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	4a04      	ldr	r2, [pc, #16]	; (80063c4 <USBH_HID_EventCallback+0x84c>)
 80063b4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80063b6:	b662      	cpsie	i
			break;
 80063b8:	f001 b897 	b.w	80074ea <USBH_HID_EventCallback+0x1972>
 80063bc:	20000174 	.word	0x20000174
 80063c0:	20000148 	.word	0x20000148
 80063c4:	20000308 	.word	0x20000308
				else if(output_type == OUTPUT_GC)
 80063c8:	4bbb      	ldr	r3, [pc, #748]	; (80066b8 <USBH_HID_EventCallback+0xb40>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	f041 808c 	bne.w	80074ea <USBH_HID_EventCallback+0x1972>
					memset(&new_gc_data,0,8); // clear controller state
 80063d2:	f107 030c 	add.w	r3, r7, #12
 80063d6:	2208      	movs	r2, #8
 80063d8:	2100      	movs	r1, #0
 80063da:	4618      	mov	r0, r3
 80063dc:	f005 fd29 	bl	800be32 <memset>
					new_gc_data.beginning_one = 1;
 80063e0:	7b7b      	ldrb	r3, [r7, #13]
 80063e2:	f043 0301 	orr.w	r3, r3, #1
 80063e6:	737b      	strb	r3, [r7, #13]
					if(buttons_and_triggers & XPAD_PAD_A) // was A pressed?
 80063e8:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80063ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80063f0:	f04f 0200 	mov.w	r2, #0
 80063f4:	ea03 0301 	and.w	r3, r3, r1
 80063f8:	ea04 0402 	and.w	r4, r4, r2
 80063fc:	4323      	orrs	r3, r4
 80063fe:	d003      	beq.n	8006408 <USBH_HID_EventCallback+0x890>
						new_gc_data.a = 1;
 8006400:	7b3b      	ldrb	r3, [r7, #12]
 8006402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006406:	733b      	strb	r3, [r7, #12]
					if(buttons_and_triggers & XPAD_PAD_X)
 8006408:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800640c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006410:	f04f 0200 	mov.w	r2, #0
 8006414:	ea03 0301 	and.w	r3, r3, r1
 8006418:	ea04 0402 	and.w	r4, r4, r2
 800641c:	4323      	orrs	r3, r4
 800641e:	d003      	beq.n	8006428 <USBH_HID_EventCallback+0x8b0>
						new_gc_data.b = 1;
 8006420:	7b3b      	ldrb	r3, [r7, #12]
 8006422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006426:	733b      	strb	r3, [r7, #12]
					if(buttons_and_triggers & XPAD_PAD_Y)
 8006428:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800642c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006430:	f04f 0200 	mov.w	r2, #0
 8006434:	ea03 0301 	and.w	r3, r3, r1
 8006438:	ea04 0402 	and.w	r4, r4, r2
 800643c:	4323      	orrs	r3, r4
 800643e:	d003      	beq.n	8006448 <USBH_HID_EventCallback+0x8d0>
						new_gc_data.y = 1;
 8006440:	7b3b      	ldrb	r3, [r7, #12]
 8006442:	f043 0310 	orr.w	r3, r3, #16
 8006446:	733b      	strb	r3, [r7, #12]
					if(buttons_and_triggers & XPAD_PAD_B)
 8006448:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800644c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006450:	f04f 0200 	mov.w	r2, #0
 8006454:	ea03 0301 	and.w	r3, r3, r1
 8006458:	ea04 0402 	and.w	r4, r4, r2
 800645c:	4323      	orrs	r3, r4
 800645e:	d003      	beq.n	8006468 <USBH_HID_EventCallback+0x8f0>
						new_gc_data.x = 1;
 8006460:	7b3b      	ldrb	r3, [r7, #12]
 8006462:	f043 0320 	orr.w	r3, r3, #32
 8006466:	733b      	strb	r3, [r7, #12]
					if(buttons_and_triggers & XPAD_HAT_LEFT)
 8006468:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800646c:	f04f 0104 	mov.w	r1, #4
 8006470:	f04f 0200 	mov.w	r2, #0
 8006474:	ea03 0301 	and.w	r3, r3, r1
 8006478:	ea04 0402 	and.w	r4, r4, r2
 800647c:	4323      	orrs	r3, r4
 800647e:	d003      	beq.n	8006488 <USBH_HID_EventCallback+0x910>
						new_gc_data.d_left = 1;
 8006480:	7b7b      	ldrb	r3, [r7, #13]
 8006482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006486:	737b      	strb	r3, [r7, #13]
					if(buttons_and_triggers & XPAD_HAT_RIGHT)
 8006488:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800648c:	f04f 0108 	mov.w	r1, #8
 8006490:	f04f 0200 	mov.w	r2, #0
 8006494:	ea03 0301 	and.w	r3, r3, r1
 8006498:	ea04 0402 	and.w	r4, r4, r2
 800649c:	4323      	orrs	r3, r4
 800649e:	d003      	beq.n	80064a8 <USBH_HID_EventCallback+0x930>
						new_gc_data.d_right = 1;
 80064a0:	7b7b      	ldrb	r3, [r7, #13]
 80064a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064a6:	737b      	strb	r3, [r7, #13]
					if(buttons_and_triggers & XPAD_HAT_UP)
 80064a8:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80064ac:	f04f 0101 	mov.w	r1, #1
 80064b0:	f04f 0200 	mov.w	r2, #0
 80064b4:	ea03 0301 	and.w	r3, r3, r1
 80064b8:	ea04 0402 	and.w	r4, r4, r2
 80064bc:	4323      	orrs	r3, r4
 80064be:	d003      	beq.n	80064c8 <USBH_HID_EventCallback+0x950>
						new_gc_data.d_up = 1;
 80064c0:	7b7b      	ldrb	r3, [r7, #13]
 80064c2:	f043 0310 	orr.w	r3, r3, #16
 80064c6:	737b      	strb	r3, [r7, #13]
					if(buttons_and_triggers & XPAD_HAT_DOWN)
 80064c8:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80064cc:	f04f 0102 	mov.w	r1, #2
 80064d0:	f04f 0200 	mov.w	r2, #0
 80064d4:	ea03 0301 	and.w	r3, r3, r1
 80064d8:	ea04 0402 	and.w	r4, r4, r2
 80064dc:	4323      	orrs	r3, r4
 80064de:	d003      	beq.n	80064e8 <USBH_HID_EventCallback+0x970>
						new_gc_data.d_down = 1;
 80064e0:	7b7b      	ldrb	r3, [r7, #13]
 80064e2:	f043 0320 	orr.w	r3, r3, #32
 80064e6:	737b      	strb	r3, [r7, #13]
					if(buttons_and_triggers & LT_MASK)
 80064e8:	4b74      	ldr	r3, [pc, #464]	; (80066bc <USBH_HID_EventCallback+0xb44>)
 80064ea:	e893 0006 	ldmia.w	r3, {r1, r2}
 80064ee:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80064f2:	ea03 0301 	and.w	r3, r3, r1
 80064f6:	ea04 0402 	and.w	r4, r4, r2
 80064fa:	4323      	orrs	r3, r4
 80064fc:	d003      	beq.n	8006506 <USBH_HID_EventCallback+0x98e>
						new_gc_data.l = 1;
 80064fe:	7b7b      	ldrb	r3, [r7, #13]
 8006500:	f043 0302 	orr.w	r3, r3, #2
 8006504:	737b      	strb	r3, [r7, #13]
					if(buttons_and_triggers & RT_MASK)
 8006506:	4b6e      	ldr	r3, [pc, #440]	; (80066c0 <USBH_HID_EventCallback+0xb48>)
 8006508:	e893 0006 	ldmia.w	r3, {r1, r2}
 800650c:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8006510:	ea03 0301 	and.w	r3, r3, r1
 8006514:	ea04 0402 	and.w	r4, r4, r2
 8006518:	4323      	orrs	r3, r4
 800651a:	d003      	beq.n	8006524 <USBH_HID_EventCallback+0x9ac>
						new_gc_data.r = 1;
 800651c:	7b7b      	ldrb	r3, [r7, #13]
 800651e:	f043 0304 	orr.w	r3, r3, #4
 8006522:	737b      	strb	r3, [r7, #13]
					if(buttons_and_triggers & XPAD_PAD_LB)
 8006524:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8006528:	f44f 7180 	mov.w	r1, #256	; 0x100
 800652c:	f04f 0200 	mov.w	r2, #0
 8006530:	ea03 0301 	and.w	r3, r3, r1
 8006534:	ea04 0402 	and.w	r4, r4, r2
 8006538:	4323      	orrs	r3, r4
 800653a:	d003      	beq.n	8006544 <USBH_HID_EventCallback+0x9cc>
						new_gc_data.l = 1;
 800653c:	7b7b      	ldrb	r3, [r7, #13]
 800653e:	f043 0302 	orr.w	r3, r3, #2
 8006542:	737b      	strb	r3, [r7, #13]
					if(buttons_and_triggers & XPAD_PAD_RB)
 8006544:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8006548:	f44f 7100 	mov.w	r1, #512	; 0x200
 800654c:	f04f 0200 	mov.w	r2, #0
 8006550:	ea03 0301 	and.w	r3, r3, r1
 8006554:	ea04 0402 	and.w	r4, r4, r2
 8006558:	4323      	orrs	r3, r4
 800655a:	d003      	beq.n	8006564 <USBH_HID_EventCallback+0x9ec>
						new_gc_data.z = 1;
 800655c:	7b7b      	ldrb	r3, [r7, #13]
 800655e:	f043 0308 	orr.w	r3, r3, #8
 8006562:	737b      	strb	r3, [r7, #13]
					if(buttons_and_triggers & XPAD_START)
 8006564:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8006568:	f04f 0110 	mov.w	r1, #16
 800656c:	f04f 0200 	mov.w	r2, #0
 8006570:	ea03 0301 	and.w	r3, r3, r1
 8006574:	ea04 0402 	and.w	r4, r4, r2
 8006578:	4323      	orrs	r3, r4
 800657a:	d003      	beq.n	8006584 <USBH_HID_EventCallback+0xa0c>
						new_gc_data.start = 1;
 800657c:	7b3b      	ldrb	r3, [r7, #12]
 800657e:	f043 0308 	orr.w	r3, r3, #8
 8006582:	733b      	strb	r3, [r7, #12]
					new_gc_data.l_trigger = reverse(trigger_l);
 8006584:	4b4f      	ldr	r3, [pc, #316]	; (80066c4 <USBH_HID_EventCallback+0xb4c>)
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	4618      	mov	r0, r3
 800658a:	f004 fbab 	bl	800ace4 <reverse>
 800658e:	4603      	mov	r3, r0
 8006590:	74bb      	strb	r3, [r7, #18]
					new_gc_data.r_trigger = reverse(trigger_r);
 8006592:	4b4d      	ldr	r3, [pc, #308]	; (80066c8 <USBH_HID_EventCallback+0xb50>)
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	4618      	mov	r0, r3
 8006598:	f004 fba4 	bl	800ace4 <reverse>
 800659c:	4603      	mov	r3, r0
 800659e:	74fb      	strb	r3, [r7, #19]
					const float N64_MAX = 127*(controls.XpadControls.range/100.0f);
 80065a0:	4b4a      	ldr	r3, [pc, #296]	; (80066cc <USBH_HID_EventCallback+0xb54>)
 80065a2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80065a6:	ee07 3a90 	vmov	s15, r3
 80065aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 80066d0 <USBH_HID_EventCallback+0xb58>
 80065b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065b6:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80066d4 <USBH_HID_EventCallback+0xb5c>
 80065ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065be:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					float deadzoneValue = (controls.XpadControls.deadzone/100.0f) * XPAD_MAX;
 80065c2:	4b42      	ldr	r3, [pc, #264]	; (80066cc <USBH_HID_EventCallback+0xb54>)
 80065c4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80065c8:	ee07 3a90 	vmov	s15, r3
 80065cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065d0:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80066d0 <USBH_HID_EventCallback+0xb58>
 80065d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065d8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80066d8 <USBH_HID_EventCallback+0xb60>
 80065dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065e0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
					float deadzoneRelation = XPAD_MAX / (XPAD_MAX - deadzoneValue);
 80065e4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80066d8 <USBH_HID_EventCallback+0xb60>
 80065e8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80065ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065f0:	eddf 6a39 	vldr	s13, [pc, #228]	; 80066d8 <USBH_HID_EventCallback+0xb60>
 80065f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065f8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
					int8_t LSX = 0, LSY = 0, RSX = 0, RSY = 0; // -128 to +127...
 80065fc:	2300      	movs	r3, #0
 80065fe:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 8006602:	2300      	movs	r3, #0
 8006604:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
 8006608:	2300      	movs	r3, #0
 800660a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800660e:	2300      	movs	r3, #0
 8006610:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
					int8_t stick_lx = ds3_state->LAnalogX - 128;
 8006614:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006618:	799b      	ldrb	r3, [r3, #6]
 800661a:	3b80      	subs	r3, #128	; 0x80
 800661c:	b2db      	uxtb	r3, r3
 800661e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					int8_t stick_ly = ds3_state->LAnalogY - 128;
 8006622:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006626:	79db      	ldrb	r3, [r3, #7]
 8006628:	3b80      	subs	r3, #128	; 0x80
 800662a:	b2db      	uxtb	r3, r3
 800662c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
					int8_t stick_rx = ds3_state->RAnalogX - 128;
 8006630:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006634:	7a1b      	ldrb	r3, [r3, #8]
 8006636:	3b80      	subs	r3, #128	; 0x80
 8006638:	b2db      	uxtb	r3, r3
 800663a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
					int8_t stick_ry = ds3_state->RAnalogY - 128;
 800663e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006642:	7a5b      	ldrb	r3, [r3, #9]
 8006644:	3b80      	subs	r3, #128	; 0x80
 8006646:	b2db      	uxtb	r3, r3
 8006648:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
					float unscaled_result = 0;
 800664c:	f04f 0300 	mov.w	r3, #0
 8006650:	66bb      	str	r3, [r7, #104]	; 0x68
					int16_t temp_stick_val = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
					if(stick_lx >= deadzoneValue) // positive = right
 8006658:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800665c:	ee07 3a90 	vmov	s15, r3
 8006660:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006664:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800666c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006670:	db34      	blt.n	80066dc <USBH_HID_EventCallback+0xb64>
						unscaled_result = (stick_lx - deadzoneValue) * deadzoneRelation;
 8006672:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006676:	ee07 3a90 	vmov	s15, r3
 800667a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800667e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006682:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006686:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800668a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800668e:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
						LSX = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 8006692:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8006696:	eddf 6a10 	vldr	s13, [pc, #64]	; 80066d8 <USBH_HID_EventCallback+0xb60>
 800669a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800669e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80066a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066aa:	edc7 7a00 	vstr	s15, [r7]
 80066ae:	783b      	ldrb	r3, [r7, #0]
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 80066b6:	e053      	b.n	8006760 <USBH_HID_EventCallback+0xbe8>
 80066b8:	2000011c 	.word	0x2000011c
 80066bc:	0800c198 	.word	0x0800c198
 80066c0:	0800c1a0 	.word	0x0800c1a0
 80066c4:	20000146 	.word	0x20000146
 80066c8:	20000150 	.word	0x20000150
 80066cc:	20000284 	.word	0x20000284
 80066d0:	42c80000 	.word	0x42c80000
 80066d4:	42fe0000 	.word	0x42fe0000
 80066d8:	46fffe00 	.word	0x46fffe00
					else if(stick_lx <= (-deadzoneValue)) // negative = left
 80066dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80066e0:	ee07 3a90 	vmov	s15, r3
 80066e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066e8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80066ec:	eef1 7a67 	vneg.f32	s15, s15
 80066f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066f8:	d82f      	bhi.n	800675a <USBH_HID_EventCallback+0xbe2>
						temp_stick_val = -(stick_lx+1); // compute as positive, then negate at the end
 80066fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80066fe:	b29b      	uxth	r3, r3
 8006700:	43db      	mvns	r3, r3
 8006702:	b29b      	uxth	r3, r3
 8006704:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
						unscaled_result = (temp_stick_val - deadzoneValue) * deadzoneRelation;
 8006708:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 800670c:	ee07 3a90 	vmov	s15, r3
 8006710:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006714:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006718:	ee37 7a67 	vsub.f32	s14, s14, s15
 800671c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006724:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
						LSX = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 8006728:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800672c:	ed5f 6a16 	vldr	s13, [pc, #-88]	; 80066d8 <USBH_HID_EventCallback+0xb60>
 8006730:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006734:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8006738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800673c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006740:	edc7 7a00 	vstr	s15, [r7]
 8006744:	783b      	ldrb	r3, [r7, #0]
 8006746:	b2db      	uxtb	r3, r3
 8006748:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
						LSX = -LSX;
 800674c:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8006750:	425b      	negs	r3, r3
 8006752:	b2db      	uxtb	r3, r3
 8006754:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 8006758:	e002      	b.n	8006760 <USBH_HID_EventCallback+0xbe8>
						LSX = 0;
 800675a:	2300      	movs	r3, #0
 800675c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
					if(stick_ly >= deadzoneValue) // positive = up
 8006760:	f997 306e 	ldrsb.w	r3, [r7, #110]	; 0x6e
 8006764:	ee07 3a90 	vmov	s15, r3
 8006768:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800676c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006770:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006778:	db22      	blt.n	80067c0 <USBH_HID_EventCallback+0xc48>
						unscaled_result = (stick_ly - deadzoneValue) * deadzoneRelation;
 800677a:	f997 306e 	ldrsb.w	r3, [r7, #110]	; 0x6e
 800677e:	ee07 3a90 	vmov	s15, r3
 8006782:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006786:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800678a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800678e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006796:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
						LSY = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 800679a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800679e:	ed5f 6a32 	vldr	s13, [pc, #-200]	; 80066d8 <USBH_HID_EventCallback+0xb60>
 80067a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80067a6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80067aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067b2:	edc7 7a00 	vstr	s15, [r7]
 80067b6:	783b      	ldrb	r3, [r7, #0]
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
 80067be:	e041      	b.n	8006844 <USBH_HID_EventCallback+0xccc>
					else if(stick_ly <= (-deadzoneValue)) // negative = down
 80067c0:	f997 306e 	ldrsb.w	r3, [r7, #110]	; 0x6e
 80067c4:	ee07 3a90 	vmov	s15, r3
 80067c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067cc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80067d0:	eef1 7a67 	vneg.f32	s15, s15
 80067d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067dc:	d82f      	bhi.n	800683e <USBH_HID_EventCallback+0xcc6>
						temp_stick_val = -(stick_ly+1); // compute as positive, then negate at the end
 80067de:	f997 306e 	ldrsb.w	r3, [r7, #110]	; 0x6e
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	43db      	mvns	r3, r3
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
						unscaled_result = (temp_stick_val - deadzoneValue) * deadzoneRelation;
 80067ec:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 80067f0:	ee07 3a90 	vmov	s15, r3
 80067f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067f8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80067fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006800:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006808:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
						LSY = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 800680c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8006810:	ed5f 6a4f 	vldr	s13, [pc, #-316]	; 80066d8 <USBH_HID_EventCallback+0xb60>
 8006814:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006818:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800681c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006824:	edc7 7a00 	vstr	s15, [r7]
 8006828:	783b      	ldrb	r3, [r7, #0]
 800682a:	b2db      	uxtb	r3, r3
 800682c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
						LSY = -LSY;
 8006830:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8006834:	425b      	negs	r3, r3
 8006836:	b2db      	uxtb	r3, r3
 8006838:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
 800683c:	e002      	b.n	8006844 <USBH_HID_EventCallback+0xccc>
						LSY = 0;
 800683e:	2300      	movs	r3, #0
 8006840:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
					LSX = (uint8_t)((int8_t)(LSX)+128);
 8006844:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8006848:	3b80      	subs	r3, #128	; 0x80
 800684a:	b2db      	uxtb	r3, r3
 800684c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
					LSY = (uint8_t)((int8_t)(LSY)+128);
 8006850:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8006854:	3b80      	subs	r3, #128	; 0x80
 8006856:	b2db      	uxtb	r3, r3
 8006858:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
					new_gc_data.a_x_axis = reverse(LSX);
 800685c:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8006860:	4618      	mov	r0, r3
 8006862:	f004 fa3f 	bl	800ace4 <reverse>
 8006866:	4603      	mov	r3, r0
 8006868:	73bb      	strb	r3, [r7, #14]
					new_gc_data.a_y_axis = reverse(LSY);
 800686a:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800686e:	4618      	mov	r0, r3
 8006870:	f004 fa38 	bl	800ace4 <reverse>
 8006874:	4603      	mov	r3, r0
 8006876:	73fb      	strb	r3, [r7, #15]
					if(stick_rx >= deadzoneValue) // positive = right
 8006878:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
 800687c:	ee07 3a90 	vmov	s15, r3
 8006880:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006884:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006888:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800688c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006890:	db22      	blt.n	80068d8 <USBH_HID_EventCallback+0xd60>
						unscaled_result = (stick_rx - deadzoneValue) * deadzoneRelation;
 8006892:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
 8006896:	ee07 3a90 	vmov	s15, r3
 800689a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800689e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80068a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80068a6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80068aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ae:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
						RSX = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 80068b2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80068b6:	ed5f 6a78 	vldr	s13, [pc, #-480]	; 80066d8 <USBH_HID_EventCallback+0xb60>
 80068ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80068be:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80068c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068ca:	edc7 7a00 	vstr	s15, [r7]
 80068ce:	783b      	ldrb	r3, [r7, #0]
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80068d6:	e041      	b.n	800695c <USBH_HID_EventCallback+0xde4>
					else if(stick_rx <= (-deadzoneValue)) // negative = left
 80068d8:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
 80068dc:	ee07 3a90 	vmov	s15, r3
 80068e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068e4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80068e8:	eef1 7a67 	vneg.f32	s15, s15
 80068ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80068f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068f4:	d82f      	bhi.n	8006956 <USBH_HID_EventCallback+0xdde>
						temp_stick_val = -(stick_rx+1); // compute as positive, then negate at the end
 80068f6:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	43db      	mvns	r3, r3
 80068fe:	b29b      	uxth	r3, r3
 8006900:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
						unscaled_result = (temp_stick_val - deadzoneValue) * deadzoneRelation;
 8006904:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8006908:	ee07 3a90 	vmov	s15, r3
 800690c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006910:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006914:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006918:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800691c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006920:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
						RSX = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 8006924:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8006928:	ed5f 6a95 	vldr	s13, [pc, #-596]	; 80066d8 <USBH_HID_EventCallback+0xb60>
 800692c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006930:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8006934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800693c:	edc7 7a00 	vstr	s15, [r7]
 8006940:	783b      	ldrb	r3, [r7, #0]
 8006942:	b2db      	uxtb	r3, r3
 8006944:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
						RSX = -RSX;
 8006948:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800694c:	425b      	negs	r3, r3
 800694e:	b2db      	uxtb	r3, r3
 8006950:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8006954:	e002      	b.n	800695c <USBH_HID_EventCallback+0xde4>
						RSX = 0;
 8006956:	2300      	movs	r3, #0
 8006958:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
					if(stick_ry >= deadzoneValue) // positive = up
 800695c:	f997 306c 	ldrsb.w	r3, [r7, #108]	; 0x6c
 8006960:	ee07 3a90 	vmov	s15, r3
 8006964:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006968:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800696c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006974:	db22      	blt.n	80069bc <USBH_HID_EventCallback+0xe44>
						unscaled_result = (stick_ry - deadzoneValue) * deadzoneRelation;
 8006976:	f997 306c 	ldrsb.w	r3, [r7, #108]	; 0x6c
 800697a:	ee07 3a90 	vmov	s15, r3
 800697e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006982:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006986:	ee37 7a67 	vsub.f32	s14, s14, s15
 800698a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800698e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006992:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
						RSY = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 8006996:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800699a:	ed5f 6ab1 	vldr	s13, [pc, #-708]	; 80066d8 <USBH_HID_EventCallback+0xb60>
 800699e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80069a2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80069a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069ae:	edc7 7a00 	vstr	s15, [r7]
 80069b2:	783b      	ldrb	r3, [r7, #0]
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 80069ba:	e041      	b.n	8006a40 <USBH_HID_EventCallback+0xec8>
					else if(stick_ry <= (-deadzoneValue)) // negative = down
 80069bc:	f997 306c 	ldrsb.w	r3, [r7, #108]	; 0x6c
 80069c0:	ee07 3a90 	vmov	s15, r3
 80069c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069c8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80069cc:	eef1 7a67 	vneg.f32	s15, s15
 80069d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d8:	d82f      	bhi.n	8006a3a <USBH_HID_EventCallback+0xec2>
						temp_stick_val = -(stick_ry+1); // compute as positive, then negate at the end
 80069da:	f997 306c 	ldrsb.w	r3, [r7, #108]	; 0x6c
 80069de:	b29b      	uxth	r3, r3
 80069e0:	43db      	mvns	r3, r3
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
						unscaled_result = (temp_stick_val - deadzoneValue) * deadzoneRelation;
 80069e8:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 80069ec:	ee07 3a90 	vmov	s15, r3
 80069f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069f4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80069f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80069fc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a04:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
						RSY = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 8006a08:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8006a0c:	ed5f 6ace 	vldr	s13, [pc, #-824]	; 80066d8 <USBH_HID_EventCallback+0xb60>
 8006a10:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006a14:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8006a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a20:	edc7 7a00 	vstr	s15, [r7]
 8006a24:	783b      	ldrb	r3, [r7, #0]
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
						RSY = -RSY;
 8006a2c:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8006a30:	425b      	negs	r3, r3
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8006a38:	e002      	b.n	8006a40 <USBH_HID_EventCallback+0xec8>
						RSY = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
					RSX = (uint8_t)((int8_t)(RSX)+128);
 8006a40:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006a44:	3b80      	subs	r3, #128	; 0x80
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
					RSY = (uint8_t)((int8_t)(RSY)+128);
 8006a4c:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8006a50:	3b80      	subs	r3, #128	; 0x80
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
					new_gc_data.c_x_axis = reverse(RSX);
 8006a58:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f004 f941 	bl	800ace4 <reverse>
 8006a62:	4603      	mov	r3, r0
 8006a64:	743b      	strb	r3, [r7, #16]
					new_gc_data.c_y_axis = reverse(RSY);
 8006a66:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f004 f93a 	bl	800ace4 <reverse>
 8006a70:	4603      	mov	r3, r0
 8006a72:	747b      	strb	r3, [r7, #17]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a74:	b672      	cpsid	i
					memcpy(&gc_data, &new_gc_data,8);
 8006a76:	4bb0      	ldr	r3, [pc, #704]	; (8006d38 <USBH_HID_EventCallback+0x11c0>)
 8006a78:	461a      	mov	r2, r3
 8006a7a:	f107 030c 	add.w	r3, r7, #12
 8006a7e:	cb03      	ldmia	r3!, {r0, r1}
 8006a80:	6010      	str	r0, [r2, #0]
 8006a82:	6051      	str	r1, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8006a84:	b662      	cpsie	i
			break;
 8006a86:	f000 bd30 	b.w	80074ea <USBH_HID_EventCallback+0x1972>
			else if(state == STATE_SENSITIVITY)
 8006a8a:	4bac      	ldr	r3, [pc, #688]	; (8006d3c <USBH_HID_EventCallback+0x11c4>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2b13      	cmp	r3, #19
 8006a90:	f040 809a 	bne.w	8006bc8 <USBH_HID_EventCallback+0x1050>
				uint64_t b = DetectButtonDS3(buttons_and_triggers); // read for button presses (just do linear search)
 8006a94:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006a98:	f7fe fa46 	bl	8004f28 <DetectButtonDS3>
 8006a9c:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
				if(b == XPAD_HAT_UP) // +5
 8006aa0:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8006aa4:	2c00      	cmp	r4, #0
 8006aa6:	bf08      	it	eq
 8006aa8:	2b01      	cmpeq	r3, #1
 8006aaa:	d118      	bne.n	8006ade <USBH_HID_EventCallback+0xf66>
					if(ds3ButtonPressed == 0)
 8006aac:	4ba4      	ldr	r3, [pc, #656]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f040 851a 	bne.w	80074ea <USBH_HID_EventCallback+0x1972>
						ds3ButtonPressed = 1;
 8006ab6:	4ba2      	ldr	r3, [pc, #648]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006ab8:	2201      	movs	r2, #1
 8006aba:	701a      	strb	r2, [r3, #0]
						controls.XpadControls.range = controls.XpadControls.range < 95 ? controls.XpadControls.range+5 : 100;
 8006abc:	4ba1      	ldr	r3, [pc, #644]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006abe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006ac2:	2b5e      	cmp	r3, #94	; 0x5e
 8006ac4:	d805      	bhi.n	8006ad2 <USBH_HID_EventCallback+0xf5a>
 8006ac6:	4b9f      	ldr	r3, [pc, #636]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006ac8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006acc:	3305      	adds	r3, #5
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	e000      	b.n	8006ad4 <USBH_HID_EventCallback+0xf5c>
 8006ad2:	2364      	movs	r3, #100	; 0x64
 8006ad4:	4a9b      	ldr	r2, [pc, #620]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006ad6:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
			break;
 8006ada:	f000 bd06 	b.w	80074ea <USBH_HID_EventCallback+0x1972>
				else if(b == XPAD_HAT_DOWN) // -5
 8006ade:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8006ae2:	2c00      	cmp	r4, #0
 8006ae4:	bf08      	it	eq
 8006ae6:	2b02      	cmpeq	r3, #2
 8006ae8:	d118      	bne.n	8006b1c <USBH_HID_EventCallback+0xfa4>
					if(ds3ButtonPressed == 0)
 8006aea:	4b95      	ldr	r3, [pc, #596]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f040 84fb 	bne.w	80074ea <USBH_HID_EventCallback+0x1972>
						ds3ButtonPressed = 1;
 8006af4:	4b92      	ldr	r3, [pc, #584]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006af6:	2201      	movs	r2, #1
 8006af8:	701a      	strb	r2, [r3, #0]
						controls.XpadControls.range = controls.XpadControls.range > 5 ? controls.XpadControls.range-5 : 0;
 8006afa:	4b92      	ldr	r3, [pc, #584]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006afc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006b00:	2b05      	cmp	r3, #5
 8006b02:	d905      	bls.n	8006b10 <USBH_HID_EventCallback+0xf98>
 8006b04:	4b8f      	ldr	r3, [pc, #572]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006b06:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006b0a:	3b05      	subs	r3, #5
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	e000      	b.n	8006b12 <USBH_HID_EventCallback+0xf9a>
 8006b10:	2300      	movs	r3, #0
 8006b12:	4a8c      	ldr	r2, [pc, #560]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006b14:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
			break;
 8006b18:	f000 bce7 	b.w	80074ea <USBH_HID_EventCallback+0x1972>
				else if(b == XPAD_HAT_LEFT) // -1
 8006b1c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8006b20:	2c00      	cmp	r4, #0
 8006b22:	bf08      	it	eq
 8006b24:	2b04      	cmpeq	r3, #4
 8006b26:	d118      	bne.n	8006b5a <USBH_HID_EventCallback+0xfe2>
					if(ds3ButtonPressed == 0)
 8006b28:	4b85      	ldr	r3, [pc, #532]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f040 84dc 	bne.w	80074ea <USBH_HID_EventCallback+0x1972>
						ds3ButtonPressed = 1;
 8006b32:	4b83      	ldr	r3, [pc, #524]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006b34:	2201      	movs	r2, #1
 8006b36:	701a      	strb	r2, [r3, #0]
						controls.XpadControls.range = controls.XpadControls.range > 1 ? controls.XpadControls.range-1 : 0;
 8006b38:	4b82      	ldr	r3, [pc, #520]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006b3a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d905      	bls.n	8006b4e <USBH_HID_EventCallback+0xfd6>
 8006b42:	4b80      	ldr	r3, [pc, #512]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006b44:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	e000      	b.n	8006b50 <USBH_HID_EventCallback+0xfd8>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	4a7c      	ldr	r2, [pc, #496]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006b52:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
			break;
 8006b56:	f000 bcc8 	b.w	80074ea <USBH_HID_EventCallback+0x1972>
				else if(b == XPAD_HAT_RIGHT)// +1
 8006b5a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8006b5e:	2c00      	cmp	r4, #0
 8006b60:	bf08      	it	eq
 8006b62:	2b08      	cmpeq	r3, #8
 8006b64:	d118      	bne.n	8006b98 <USBH_HID_EventCallback+0x1020>
					if(ds3ButtonPressed == 0)
 8006b66:	4b76      	ldr	r3, [pc, #472]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f040 84bd 	bne.w	80074ea <USBH_HID_EventCallback+0x1972>
						ds3ButtonPressed = 1;
 8006b70:	4b73      	ldr	r3, [pc, #460]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006b72:	2201      	movs	r2, #1
 8006b74:	701a      	strb	r2, [r3, #0]
						controls.XpadControls.range = controls.XpadControls.range < 99 ? controls.XpadControls.range+1 : 100;
 8006b76:	4b73      	ldr	r3, [pc, #460]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006b78:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006b7c:	2b62      	cmp	r3, #98	; 0x62
 8006b7e:	d805      	bhi.n	8006b8c <USBH_HID_EventCallback+0x1014>
 8006b80:	4b70      	ldr	r3, [pc, #448]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006b82:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006b86:	3301      	adds	r3, #1
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	e000      	b.n	8006b8e <USBH_HID_EventCallback+0x1016>
 8006b8c:	2364      	movs	r3, #100	; 0x64
 8006b8e:	4a6d      	ldr	r2, [pc, #436]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006b90:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
			break;
 8006b94:	f000 bca9 	b.w	80074ea <USBH_HID_EventCallback+0x1972>
				else if(b == XPAD_PAD_A) // OK
 8006b98:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8006b9c:	2c00      	cmp	r4, #0
 8006b9e:	bf08      	it	eq
 8006ba0:	f5b3 5f80 	cmpeq.w	r3, #4096	; 0x1000
 8006ba4:	d10b      	bne.n	8006bbe <USBH_HID_EventCallback+0x1046>
					if(ds3ButtonPressed == 0)
 8006ba6:	4b66      	ldr	r3, [pc, #408]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f040 849d 	bne.w	80074ea <USBH_HID_EventCallback+0x1972>
						ds3ButtonPressed = 1;
 8006bb0:	4b63      	ldr	r3, [pc, #396]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	701a      	strb	r2, [r3, #0]
						AdvanceState();
 8006bb6:	f004 f861 	bl	800ac7c <AdvanceState>
			break;
 8006bba:	f000 bc96 	b.w	80074ea <USBH_HID_EventCallback+0x1972>
					ds3ButtonPressed = 0;
 8006bbe:	4b60      	ldr	r3, [pc, #384]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	701a      	strb	r2, [r3, #0]
			break;
 8006bc4:	f000 bc91 	b.w	80074ea <USBH_HID_EventCallback+0x1972>
			else if(state == STATE_DEADZONE)
 8006bc8:	4b5c      	ldr	r3, [pc, #368]	; (8006d3c <USBH_HID_EventCallback+0x11c4>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b14      	cmp	r3, #20
 8006bce:	f040 8095 	bne.w	8006cfc <USBH_HID_EventCallback+0x1184>
				uint64_t b = DetectButtonDS3(buttons_and_triggers); // read for button presses (just do linear search)
 8006bd2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006bd6:	f7fe f9a7 	bl	8004f28 <DetectButtonDS3>
 8006bda:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
				if(b == XPAD_HAT_UP) // +5
 8006bde:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8006be2:	2c00      	cmp	r4, #0
 8006be4:	bf08      	it	eq
 8006be6:	2b01      	cmpeq	r3, #1
 8006be8:	d118      	bne.n	8006c1c <USBH_HID_EventCallback+0x10a4>
					if(ds3ButtonPressed == 0)
 8006bea:	4b55      	ldr	r3, [pc, #340]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f040 847b 	bne.w	80074ea <USBH_HID_EventCallback+0x1972>
						ds3ButtonPressed = 1;
 8006bf4:	4b52      	ldr	r3, [pc, #328]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	701a      	strb	r2, [r3, #0]
						controls.XpadControls.deadzone = controls.XpadControls.deadzone < 95 ? controls.XpadControls.deadzone+5 : 100;
 8006bfa:	4b52      	ldr	r3, [pc, #328]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006bfc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8006c00:	2b5e      	cmp	r3, #94	; 0x5e
 8006c02:	d805      	bhi.n	8006c10 <USBH_HID_EventCallback+0x1098>
 8006c04:	4b4f      	ldr	r3, [pc, #316]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006c06:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8006c0a:	3305      	adds	r3, #5
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	e000      	b.n	8006c12 <USBH_HID_EventCallback+0x109a>
 8006c10:	2364      	movs	r3, #100	; 0x64
 8006c12:	4a4c      	ldr	r2, [pc, #304]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006c14:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
			break;
 8006c18:	f000 bc67 	b.w	80074ea <USBH_HID_EventCallback+0x1972>
				else if(b == XPAD_HAT_DOWN) // -5
 8006c1c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8006c20:	2c00      	cmp	r4, #0
 8006c22:	bf08      	it	eq
 8006c24:	2b02      	cmpeq	r3, #2
 8006c26:	d118      	bne.n	8006c5a <USBH_HID_EventCallback+0x10e2>
					if(ds3ButtonPressed == 0)
 8006c28:	4b45      	ldr	r3, [pc, #276]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f040 845c 	bne.w	80074ea <USBH_HID_EventCallback+0x1972>
						ds3ButtonPressed = 1;
 8006c32:	4b43      	ldr	r3, [pc, #268]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006c34:	2201      	movs	r2, #1
 8006c36:	701a      	strb	r2, [r3, #0]
						controls.XpadControls.deadzone = controls.XpadControls.deadzone > 5 ? controls.XpadControls.deadzone-5 : 0;
 8006c38:	4b42      	ldr	r3, [pc, #264]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006c3a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8006c3e:	2b05      	cmp	r3, #5
 8006c40:	d905      	bls.n	8006c4e <USBH_HID_EventCallback+0x10d6>
 8006c42:	4b40      	ldr	r3, [pc, #256]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006c44:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8006c48:	3b05      	subs	r3, #5
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	e000      	b.n	8006c50 <USBH_HID_EventCallback+0x10d8>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	4a3c      	ldr	r2, [pc, #240]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006c52:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
			break;
 8006c56:	f000 bc48 	b.w	80074ea <USBH_HID_EventCallback+0x1972>
				else if(b == XPAD_HAT_LEFT) // -1
 8006c5a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8006c5e:	2c00      	cmp	r4, #0
 8006c60:	bf08      	it	eq
 8006c62:	2b04      	cmpeq	r3, #4
 8006c64:	d118      	bne.n	8006c98 <USBH_HID_EventCallback+0x1120>
					if(ds3ButtonPressed == 0)
 8006c66:	4b36      	ldr	r3, [pc, #216]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f040 843d 	bne.w	80074ea <USBH_HID_EventCallback+0x1972>
						ds3ButtonPressed = 1;
 8006c70:	4b33      	ldr	r3, [pc, #204]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006c72:	2201      	movs	r2, #1
 8006c74:	701a      	strb	r2, [r3, #0]
						controls.XpadControls.deadzone = controls.XpadControls.deadzone > 1 ? controls.XpadControls.deadzone-1 : 0;
 8006c76:	4b33      	ldr	r3, [pc, #204]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006c78:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d905      	bls.n	8006c8c <USBH_HID_EventCallback+0x1114>
 8006c80:	4b30      	ldr	r3, [pc, #192]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006c82:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8006c86:	3b01      	subs	r3, #1
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	e000      	b.n	8006c8e <USBH_HID_EventCallback+0x1116>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	4a2d      	ldr	r2, [pc, #180]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006c90:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
			break;
 8006c94:	f000 bc29 	b.w	80074ea <USBH_HID_EventCallback+0x1972>
				else if(b == XPAD_HAT_RIGHT)// +1
 8006c98:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8006c9c:	2c00      	cmp	r4, #0
 8006c9e:	bf08      	it	eq
 8006ca0:	2b08      	cmpeq	r3, #8
 8006ca2:	d118      	bne.n	8006cd6 <USBH_HID_EventCallback+0x115e>
					if(ds3ButtonPressed == 0)
 8006ca4:	4b26      	ldr	r3, [pc, #152]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f040 841e 	bne.w	80074ea <USBH_HID_EventCallback+0x1972>
						ds3ButtonPressed = 1;
 8006cae:	4b24      	ldr	r3, [pc, #144]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	701a      	strb	r2, [r3, #0]
						controls.XpadControls.deadzone = controls.XpadControls.deadzone < 99 ? controls.XpadControls.deadzone+1 : 100;
 8006cb4:	4b23      	ldr	r3, [pc, #140]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006cb6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8006cba:	2b62      	cmp	r3, #98	; 0x62
 8006cbc:	d805      	bhi.n	8006cca <USBH_HID_EventCallback+0x1152>
 8006cbe:	4b21      	ldr	r3, [pc, #132]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006cc0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	e000      	b.n	8006ccc <USBH_HID_EventCallback+0x1154>
 8006cca:	2364      	movs	r3, #100	; 0x64
 8006ccc:	4a1d      	ldr	r2, [pc, #116]	; (8006d44 <USBH_HID_EventCallback+0x11cc>)
 8006cce:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
			break;
 8006cd2:	f000 bc0a 	b.w	80074ea <USBH_HID_EventCallback+0x1972>
				else if(b == XPAD_PAD_A) // OK
 8006cd6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8006cda:	2c00      	cmp	r4, #0
 8006cdc:	bf08      	it	eq
 8006cde:	f5b3 5f80 	cmpeq.w	r3, #4096	; 0x1000
 8006ce2:	d107      	bne.n	8006cf4 <USBH_HID_EventCallback+0x117c>
					if(ds3ButtonPressed == 0)
 8006ce4:	4b16      	ldr	r3, [pc, #88]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f040 83fe 	bne.w	80074ea <USBH_HID_EventCallback+0x1972>
						AdvanceState();
 8006cee:	f003 ffc5 	bl	800ac7c <AdvanceState>
			break;
 8006cf2:	e3fa      	b.n	80074ea <USBH_HID_EventCallback+0x1972>
					ds3ButtonPressed = 0;
 8006cf4:	4b12      	ldr	r3, [pc, #72]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	701a      	strb	r2, [r3, #0]
			break;
 8006cfa:	e3f6      	b.n	80074ea <USBH_HID_EventCallback+0x1972>
				uint64_t b = DetectButtonDS3(buttons_and_triggers); // read for button presses (just do linear search)
 8006cfc:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006d00:	f7fe f912 	bl	8004f28 <DetectButtonDS3>
 8006d04:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
				if(b != 0) /*button was actually is pressed*/
 8006d08:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8006d0c:	4323      	orrs	r3, r4
 8006d0e:	d00e      	beq.n	8006d2e <USBH_HID_EventCallback+0x11b6>
					if(ds3ButtonPressed == 0)
 8006d10:	4b0b      	ldr	r3, [pc, #44]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f040 83e8 	bne.w	80074ea <USBH_HID_EventCallback+0x1972>
						ds3ButtonPressed = 1;
 8006d1a:	4b09      	ldr	r3, [pc, #36]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	701a      	strb	r2, [r3, #0]
						ChangeButtonMappingController(b);
 8006d20:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d24:	f003 feb8 	bl	800aa98 <ChangeButtonMappingController>
						AdvanceState();
 8006d28:	f003 ffa8 	bl	800ac7c <AdvanceState>
			break;
 8006d2c:	e3dd      	b.n	80074ea <USBH_HID_EventCallback+0x1972>
					ds3ButtonPressed = 0;
 8006d2e:	4b04      	ldr	r3, [pc, #16]	; (8006d40 <USBH_HID_EventCallback+0x11c8>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	701a      	strb	r2, [r3, #0]
			break;
 8006d34:	e3d9      	b.n	80074ea <USBH_HID_EventCallback+0x1972>
 8006d36:	bf00      	nop
 8006d38:	2000027c 	.word	0x2000027c
 8006d3c:	2000010a 	.word	0x2000010a
 8006d40:	20000101 	.word	0x20000101
 8006d44:	20000284 	.word	0x20000284
			ds4_state = USBH_HID_GetDS4Info(phost);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fd53 	bl	80077f4 <USBH_HID_GetDS4Info>
 8006d4e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
			buttons_and_triggers = USBH_HID_GetDS4ButtonsAndTriggers();
 8006d52:	f000 fd63 	bl	800781c <USBH_HID_GetDS4ButtonsAndTriggers>
 8006d56:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
			if(state == NORMAL)
 8006d5a:	4bb0      	ldr	r3, [pc, #704]	; (800701c <USBH_HID_EventCallback+0x14a4>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f040 8277 	bne.w	8007252 <USBH_HID_EventCallback+0x16da>
				memset(&new_data,0,4);
 8006d64:	f107 0314 	add.w	r3, r7, #20
 8006d68:	2204      	movs	r2, #4
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f005 f860 	bl	800be32 <memset>
				if(buttons_and_triggers & controls.XpadControls.up)
 8006d72:	4aab      	ldr	r2, [pc, #684]	; (8007020 <USBH_HID_EventCallback+0x14a8>)
 8006d74:	6a13      	ldr	r3, [r2, #32]
 8006d76:	6a54      	ldr	r4, [r2, #36]	; 0x24
 8006d78:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006d7c:	ea03 0301 	and.w	r3, r3, r1
 8006d80:	ea04 0402 	and.w	r4, r4, r2
 8006d84:	4323      	orrs	r3, r4
 8006d86:	d003      	beq.n	8006d90 <USBH_HID_EventCallback+0x1218>
					new_data.up = 1;
 8006d88:	7d3b      	ldrb	r3, [r7, #20]
 8006d8a:	f043 0310 	orr.w	r3, r3, #16
 8006d8e:	753b      	strb	r3, [r7, #20]
				if(buttons_and_triggers & controls.XpadControls.down)
 8006d90:	4aa3      	ldr	r2, [pc, #652]	; (8007020 <USBH_HID_EventCallback+0x14a8>)
 8006d92:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006d94:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8006d96:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006d9a:	ea03 0301 	and.w	r3, r3, r1
 8006d9e:	ea04 0402 	and.w	r4, r4, r2
 8006da2:	4323      	orrs	r3, r4
 8006da4:	d003      	beq.n	8006dae <USBH_HID_EventCallback+0x1236>
					new_data.down = 1;
 8006da6:	7d3b      	ldrb	r3, [r7, #20]
 8006da8:	f043 0320 	orr.w	r3, r3, #32
 8006dac:	753b      	strb	r3, [r7, #20]
				if(buttons_and_triggers & controls.XpadControls.left)
 8006dae:	4a9c      	ldr	r2, [pc, #624]	; (8007020 <USBH_HID_EventCallback+0x14a8>)
 8006db0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006db2:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8006db4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006db8:	ea03 0301 	and.w	r3, r3, r1
 8006dbc:	ea04 0402 	and.w	r4, r4, r2
 8006dc0:	4323      	orrs	r3, r4
 8006dc2:	d003      	beq.n	8006dcc <USBH_HID_EventCallback+0x1254>
					new_data.left = 1;
 8006dc4:	7d3b      	ldrb	r3, [r7, #20]
 8006dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dca:	753b      	strb	r3, [r7, #20]
				if(buttons_and_triggers & controls.XpadControls.right)
 8006dcc:	4a94      	ldr	r2, [pc, #592]	; (8007020 <USBH_HID_EventCallback+0x14a8>)
 8006dce:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006dd0:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8006dd2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006dd6:	ea03 0301 	and.w	r3, r3, r1
 8006dda:	ea04 0402 	and.w	r4, r4, r2
 8006dde:	4323      	orrs	r3, r4
 8006de0:	d003      	beq.n	8006dea <USBH_HID_EventCallback+0x1272>
					new_data.right = 1;
 8006de2:	7d3b      	ldrb	r3, [r7, #20]
 8006de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006de8:	753b      	strb	r3, [r7, #20]
				if(buttons_and_triggers & controls.XpadControls.c_up)
 8006dea:	4a8d      	ldr	r2, [pc, #564]	; (8007020 <USBH_HID_EventCallback+0x14a8>)
 8006dec:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006dee:	6d54      	ldr	r4, [r2, #84]	; 0x54
 8006df0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006df4:	ea03 0301 	and.w	r3, r3, r1
 8006df8:	ea04 0402 	and.w	r4, r4, r2
 8006dfc:	4323      	orrs	r3, r4
 8006dfe:	d003      	beq.n	8006e08 <USBH_HID_EventCallback+0x1290>
					new_data.c_up = 1;
 8006e00:	7d7b      	ldrb	r3, [r7, #21]
 8006e02:	f043 0310 	orr.w	r3, r3, #16
 8006e06:	757b      	strb	r3, [r7, #21]
				if(buttons_and_triggers & controls.XpadControls.c_down)
 8006e08:	4a85      	ldr	r2, [pc, #532]	; (8007020 <USBH_HID_EventCallback+0x14a8>)
 8006e0a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006e0c:	6dd4      	ldr	r4, [r2, #92]	; 0x5c
 8006e0e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006e12:	ea03 0301 	and.w	r3, r3, r1
 8006e16:	ea04 0402 	and.w	r4, r4, r2
 8006e1a:	4323      	orrs	r3, r4
 8006e1c:	d003      	beq.n	8006e26 <USBH_HID_EventCallback+0x12ae>
					new_data.c_down = 1;
 8006e1e:	7d7b      	ldrb	r3, [r7, #21]
 8006e20:	f043 0320 	orr.w	r3, r3, #32
 8006e24:	757b      	strb	r3, [r7, #21]
				if(buttons_and_triggers & controls.XpadControls.c_left)
 8006e26:	4a7e      	ldr	r2, [pc, #504]	; (8007020 <USBH_HID_EventCallback+0x14a8>)
 8006e28:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8006e2a:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8006e2c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006e30:	ea03 0301 	and.w	r3, r3, r1
 8006e34:	ea04 0402 	and.w	r4, r4, r2
 8006e38:	4323      	orrs	r3, r4
 8006e3a:	d003      	beq.n	8006e44 <USBH_HID_EventCallback+0x12cc>
					new_data.c_left = 1;
 8006e3c:	7d7b      	ldrb	r3, [r7, #21]
 8006e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e42:	757b      	strb	r3, [r7, #21]
				if(buttons_and_triggers & controls.XpadControls.c_right)
 8006e44:	4a76      	ldr	r2, [pc, #472]	; (8007020 <USBH_HID_EventCallback+0x14a8>)
 8006e46:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8006e48:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
 8006e4a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006e4e:	ea03 0301 	and.w	r3, r3, r1
 8006e52:	ea04 0402 	and.w	r4, r4, r2
 8006e56:	4323      	orrs	r3, r4
 8006e58:	d003      	beq.n	8006e62 <USBH_HID_EventCallback+0x12ea>
					new_data.c_right = 1;
 8006e5a:	7d7b      	ldrb	r3, [r7, #21]
 8006e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e60:	757b      	strb	r3, [r7, #21]
				if(buttons_and_triggers & controls.XpadControls.l)
 8006e62:	4a6f      	ldr	r2, [pc, #444]	; (8007020 <USBH_HID_EventCallback+0x14a8>)
 8006e64:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006e66:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8006e68:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006e6c:	ea03 0301 	and.w	r3, r3, r1
 8006e70:	ea04 0402 	and.w	r4, r4, r2
 8006e74:	4323      	orrs	r3, r4
 8006e76:	d003      	beq.n	8006e80 <USBH_HID_EventCallback+0x1308>
					new_data.l = 1;
 8006e78:	7d7b      	ldrb	r3, [r7, #21]
 8006e7a:	f043 0304 	orr.w	r3, r3, #4
 8006e7e:	757b      	strb	r3, [r7, #21]
				if(buttons_and_triggers & controls.XpadControls.r)
 8006e80:	4a67      	ldr	r2, [pc, #412]	; (8007020 <USBH_HID_EventCallback+0x14a8>)
 8006e82:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8006e84:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
 8006e86:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006e8a:	ea03 0301 	and.w	r3, r3, r1
 8006e8e:	ea04 0402 	and.w	r4, r4, r2
 8006e92:	4323      	orrs	r3, r4
 8006e94:	d003      	beq.n	8006e9e <USBH_HID_EventCallback+0x1326>
					new_data.r = 1;
 8006e96:	7d7b      	ldrb	r3, [r7, #21]
 8006e98:	f043 0308 	orr.w	r3, r3, #8
 8006e9c:	757b      	strb	r3, [r7, #21]
				if(buttons_and_triggers & controls.XpadControls.z)
 8006e9e:	4a60      	ldr	r2, [pc, #384]	; (8007020 <USBH_HID_EventCallback+0x14a8>)
 8006ea0:	6913      	ldr	r3, [r2, #16]
 8006ea2:	6954      	ldr	r4, [r2, #20]
 8006ea4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006ea8:	ea03 0301 	and.w	r3, r3, r1
 8006eac:	ea04 0402 	and.w	r4, r4, r2
 8006eb0:	4323      	orrs	r3, r4
 8006eb2:	d003      	beq.n	8006ebc <USBH_HID_EventCallback+0x1344>
					new_data.z = 1;
 8006eb4:	7d3b      	ldrb	r3, [r7, #20]
 8006eb6:	f043 0304 	orr.w	r3, r3, #4
 8006eba:	753b      	strb	r3, [r7, #20]
				if(buttons_and_triggers & controls.XpadControls.a)
 8006ebc:	4a58      	ldr	r2, [pc, #352]	; (8007020 <USBH_HID_EventCallback+0x14a8>)
 8006ebe:	6813      	ldr	r3, [r2, #0]
 8006ec0:	6854      	ldr	r4, [r2, #4]
 8006ec2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006ec6:	ea03 0301 	and.w	r3, r3, r1
 8006eca:	ea04 0402 	and.w	r4, r4, r2
 8006ece:	4323      	orrs	r3, r4
 8006ed0:	d003      	beq.n	8006eda <USBH_HID_EventCallback+0x1362>
					new_data.a = 1;
 8006ed2:	7d3b      	ldrb	r3, [r7, #20]
 8006ed4:	f043 0301 	orr.w	r3, r3, #1
 8006ed8:	753b      	strb	r3, [r7, #20]
				if(buttons_and_triggers & controls.XpadControls.b)
 8006eda:	4a51      	ldr	r2, [pc, #324]	; (8007020 <USBH_HID_EventCallback+0x14a8>)
 8006edc:	6893      	ldr	r3, [r2, #8]
 8006ede:	68d4      	ldr	r4, [r2, #12]
 8006ee0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006ee4:	ea03 0301 	and.w	r3, r3, r1
 8006ee8:	ea04 0402 	and.w	r4, r4, r2
 8006eec:	4323      	orrs	r3, r4
 8006eee:	d003      	beq.n	8006ef8 <USBH_HID_EventCallback+0x1380>
					new_data.b = 1;
 8006ef0:	7d3b      	ldrb	r3, [r7, #20]
 8006ef2:	f043 0302 	orr.w	r3, r3, #2
 8006ef6:	753b      	strb	r3, [r7, #20]
				if(buttons_and_triggers & controls.XpadControls.start)
 8006ef8:	4a49      	ldr	r2, [pc, #292]	; (8007020 <USBH_HID_EventCallback+0x14a8>)
 8006efa:	6993      	ldr	r3, [r2, #24]
 8006efc:	69d4      	ldr	r4, [r2, #28]
 8006efe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006f02:	ea03 0301 	and.w	r3, r3, r1
 8006f06:	ea04 0402 	and.w	r4, r4, r2
 8006f0a:	4323      	orrs	r3, r4
 8006f0c:	d003      	beq.n	8006f16 <USBH_HID_EventCallback+0x139e>
					new_data.start = 1;
 8006f0e:	7d3b      	ldrb	r3, [r7, #20]
 8006f10:	f043 0308 	orr.w	r3, r3, #8
 8006f14:	753b      	strb	r3, [r7, #20]
				const float N64_MAX = 127*(controls.XpadControls.range/100.0f);
 8006f16:	4b42      	ldr	r3, [pc, #264]	; (8007020 <USBH_HID_EventCallback+0x14a8>)
 8006f18:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006f1c:	ee07 3a90 	vmov	s15, r3
 8006f20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f24:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8007024 <USBH_HID_EventCallback+0x14ac>
 8006f28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f2c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8007028 <USBH_HID_EventCallback+0x14b0>
 8006f30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f34:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
				float deadzoneValue = (controls.XpadControls.deadzone/100.0f) * DS3_MAX;
 8006f38:	4b39      	ldr	r3, [pc, #228]	; (8007020 <USBH_HID_EventCallback+0x14a8>)
 8006f3a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8006f3e:	ee07 3a90 	vmov	s15, r3
 8006f42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f46:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007024 <USBH_HID_EventCallback+0x14ac>
 8006f4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f4e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007028 <USBH_HID_EventCallback+0x14b0>
 8006f52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f56:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
				float deadzoneRelation = DS3_MAX / (DS3_MAX - deadzoneValue);
 8006f5a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8007028 <USBH_HID_EventCallback+0x14b0>
 8006f5e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006f62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006f66:	eddf 6a30 	vldr	s13, [pc, #192]	; 8007028 <USBH_HID_EventCallback+0x14b0>
 8006f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f6e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				int8_t LSX = 0, LSY = 0; // -128 to +127...
 8006f72:	2300      	movs	r3, #0
 8006f74:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
				float unscaled_result = 0;
 8006f7e:	f04f 0300 	mov.w	r3, #0
 8006f82:	63bb      	str	r3, [r7, #56]	; 0x38
				int8_t stick_lx = ds4_state->LAnalogX - 128;
 8006f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f88:	785b      	ldrb	r3, [r3, #1]
 8006f8a:	3b80      	subs	r3, #128	; 0x80
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				int8_t stick_ly = ds4_state->LAnalogY - 128;
 8006f92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f96:	789b      	ldrb	r3, [r3, #2]
 8006f98:	3b80      	subs	r3, #128	; 0x80
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				int8_t stick_rx = ds4_state->RAnalogX - 128;
 8006fa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fa4:	78db      	ldrb	r3, [r3, #3]
 8006fa6:	3b80      	subs	r3, #128	; 0x80
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				int8_t stick_ry = ds4_state->RAnalogY - 128;
 8006fae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fb2:	791b      	ldrb	r3, [r3, #4]
 8006fb4:	3b80      	subs	r3, #128	; 0x80
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				if(stick_lx >= deadzoneValue) // positive = right
 8006fbc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8006fc0:	ee07 3a90 	vmov	s15, r3
 8006fc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fc8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006fcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd4:	db2a      	blt.n	800702c <USBH_HID_EventCallback+0x14b4>
					unscaled_result = (stick_lx - deadzoneValue) * deadzoneRelation;
 8006fd6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8006fda:	ee07 3a90 	vmov	s15, r3
 8006fde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fe2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006fe6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006fea:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
					LSX = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 8006ff6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006ffa:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8007028 <USBH_HID_EventCallback+0x14b0>
 8006ffe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007002:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8007006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800700a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800700e:	edc7 7a00 	vstr	s15, [r7]
 8007012:	783b      	ldrb	r3, [r7, #0]
 8007014:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
 8007018:	e04b      	b.n	80070b2 <USBH_HID_EventCallback+0x153a>
 800701a:	bf00      	nop
 800701c:	2000010a 	.word	0x2000010a
 8007020:	20000284 	.word	0x20000284
 8007024:	42c80000 	.word	0x42c80000
 8007028:	42fe0000 	.word	0x42fe0000
				else if(stick_lx <= (-deadzoneValue)) // negative = left
 800702c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8007030:	ee07 3a90 	vmov	s15, r3
 8007034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007038:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800703c:	eef1 7a67 	vneg.f32	s15, s15
 8007040:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007048:	d833      	bhi.n	80070b2 <USBH_HID_EventCallback+0x153a>
					stick_lx++; // just in case it's -128 it cannot be negated. otherwise the change of 1 is negligible.
 800704a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800704e:	b2db      	uxtb	r3, r3
 8007050:	3301      	adds	r3, #1
 8007052:	b2db      	uxtb	r3, r3
 8007054:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					stick_lx = -stick_lx; // compute as positive, then negate at the end
 8007058:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800705c:	425b      	negs	r3, r3
 800705e:	b2db      	uxtb	r3, r3
 8007060:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					unscaled_result = (stick_lx - deadzoneValue) * deadzoneRelation;
 8007064:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8007068:	ee07 3a90 	vmov	s15, r3
 800706c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007070:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8007074:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007078:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800707c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007080:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
					LSX = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 8007084:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007088:	ed5f 6a19 	vldr	s13, [pc, #-100]	; 8007028 <USBH_HID_EventCallback+0x14b0>
 800708c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007090:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8007094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800709c:	edc7 7a00 	vstr	s15, [r7]
 80070a0:	783b      	ldrb	r3, [r7, #0]
 80070a2:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
					LSX = -LSX;
 80070a6:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80070aa:	425b      	negs	r3, r3
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
				if(stick_ly >= deadzoneValue) // DS3 positive = down
 80070b2:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80070b6:	ee07 3a90 	vmov	s15, r3
 80070ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070be:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80070c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80070c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ca:	db27      	blt.n	800711c <USBH_HID_EventCallback+0x15a4>
					unscaled_result = (stick_ly - deadzoneValue) * deadzoneRelation;
 80070cc:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80070d0:	ee07 3a90 	vmov	s15, r3
 80070d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070d8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80070dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80070e0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80070e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070e8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
					LSY = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 80070ec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80070f0:	ed5f 6a33 	vldr	s13, [pc, #-204]	; 8007028 <USBH_HID_EventCallback+0x14b0>
 80070f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80070f8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80070fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007100:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007104:	edc7 7a00 	vstr	s15, [r7]
 8007108:	783b      	ldrb	r3, [r7, #0]
 800710a:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
					LSY = -LSY; // for n64 down is negative
 800710e:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8007112:	425b      	negs	r3, r3
 8007114:	b2db      	uxtb	r3, r3
 8007116:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 800711a:	e03c      	b.n	8007196 <USBH_HID_EventCallback+0x161e>
				else if(stick_ly <= (-deadzoneValue)) // DS3 negative = up
 800711c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8007120:	ee07 3a90 	vmov	s15, r3
 8007124:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007128:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800712c:	eef1 7a67 	vneg.f32	s15, s15
 8007130:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007138:	d82d      	bhi.n	8007196 <USBH_HID_EventCallback+0x161e>
					stick_ly++; // just in case it's -128 it cannot be negated. otherwise the change of 1 is negligible.
 800713a:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800713e:	b2db      	uxtb	r3, r3
 8007140:	3301      	adds	r3, #1
 8007142:	b2db      	uxtb	r3, r3
 8007144:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					stick_ly = -stick_ly; // compute as positive
 8007148:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800714c:	425b      	negs	r3, r3
 800714e:	b2db      	uxtb	r3, r3
 8007150:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					unscaled_result = (stick_ly - deadzoneValue) * deadzoneRelation;
 8007154:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8007158:	ee07 3a90 	vmov	s15, r3
 800715c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007160:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8007164:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007168:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800716c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007170:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
					LSY = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 8007174:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007178:	ed5f 6a55 	vldr	s13, [pc, #-340]	; 8007028 <USBH_HID_EventCallback+0x14b0>
 800717c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007180:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8007184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007188:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800718c:	edc7 7a00 	vstr	s15, [r7]
 8007190:	783b      	ldrb	r3, [r7, #0]
 8007192:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
				new_data.x_axis = reverse((uint8_t)LSX);
 8007196:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800719a:	4618      	mov	r0, r3
 800719c:	f003 fda2 	bl	800ace4 <reverse>
 80071a0:	4603      	mov	r3, r0
 80071a2:	75bb      	strb	r3, [r7, #22]
				new_data.y_axis = reverse((uint8_t)LSY);
 80071a4:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80071a8:	4618      	mov	r0, r3
 80071aa:	f003 fd9b 	bl	800ace4 <reverse>
 80071ae:	4603      	mov	r3, r0
 80071b0:	75fb      	strb	r3, [r7, #23]
				if(stick_rx >= deadzoneValue) // positive = right
 80071b2:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 80071b6:	ee07 3a90 	vmov	s15, r3
 80071ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071be:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80071c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80071c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ca:	db04      	blt.n	80071d6 <USBH_HID_EventCallback+0x165e>
					new_data.c_right = 1;
 80071cc:	7d7b      	ldrb	r3, [r7, #21]
 80071ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d2:	757b      	strb	r3, [r7, #21]
 80071d4:	e012      	b.n	80071fc <USBH_HID_EventCallback+0x1684>
				else if(stick_rx <= (-deadzoneValue)) // negative = left
 80071d6:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071e2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80071e6:	eef1 7a67 	vneg.f32	s15, s15
 80071ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80071ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071f2:	d803      	bhi.n	80071fc <USBH_HID_EventCallback+0x1684>
					new_data.c_left = 1;
 80071f4:	7d7b      	ldrb	r3, [r7, #21]
 80071f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071fa:	757b      	strb	r3, [r7, #21]
				if(stick_ry >= deadzoneValue) // positive = up
 80071fc:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
 8007200:	ee07 3a90 	vmov	s15, r3
 8007204:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007208:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800720c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007214:	db04      	blt.n	8007220 <USBH_HID_EventCallback+0x16a8>
					new_data.c_up = 1;
 8007216:	7d7b      	ldrb	r3, [r7, #21]
 8007218:	f043 0310 	orr.w	r3, r3, #16
 800721c:	757b      	strb	r3, [r7, #21]
 800721e:	e012      	b.n	8007246 <USBH_HID_EventCallback+0x16ce>
				else if(stick_ry <= (-deadzoneValue)) // negative = down
 8007220:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
 8007224:	ee07 3a90 	vmov	s15, r3
 8007228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800722c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8007230:	eef1 7a67 	vneg.f32	s15, s15
 8007234:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723c:	d803      	bhi.n	8007246 <USBH_HID_EventCallback+0x16ce>
					new_data.c_down = 1;
 800723e:	7d7b      	ldrb	r3, [r7, #21]
 8007240:	f043 0320 	orr.w	r3, r3, #32
 8007244:	757b      	strb	r3, [r7, #21]
  __ASM volatile ("cpsid i" : : : "memory");
 8007246:	b672      	cpsid	i
				memcpy(&n64_data, &new_data,4);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	4aab      	ldr	r2, [pc, #684]	; (80074f8 <USBH_HID_EventCallback+0x1980>)
 800724c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800724e:	b662      	cpsie	i
			break;
 8007250:	e14d      	b.n	80074ee <USBH_HID_EventCallback+0x1976>
			else if(state == STATE_SENSITIVITY)
 8007252:	4baa      	ldr	r3, [pc, #680]	; (80074fc <USBH_HID_EventCallback+0x1984>)
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	2b13      	cmp	r3, #19
 8007258:	f040 8094 	bne.w	8007384 <USBH_HID_EventCallback+0x180c>
				uint64_t b = DetectButtonDS3(buttons_and_triggers); // read for button presses (just do linear search)
 800725c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007260:	f7fd fe62 	bl	8004f28 <DetectButtonDS3>
 8007264:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				if(b == XPAD_HAT_UP) // +5
 8007268:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800726c:	2c00      	cmp	r4, #0
 800726e:	bf08      	it	eq
 8007270:	2b01      	cmpeq	r3, #1
 8007272:	d117      	bne.n	80072a4 <USBH_HID_EventCallback+0x172c>
					if(ds3ButtonPressed == 0)
 8007274:	4ba2      	ldr	r3, [pc, #648]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	f040 8138 	bne.w	80074ee <USBH_HID_EventCallback+0x1976>
						ds3ButtonPressed = 1;
 800727e:	4ba0      	ldr	r3, [pc, #640]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 8007280:	2201      	movs	r2, #1
 8007282:	701a      	strb	r2, [r3, #0]
						controls.XpadControls.range = controls.XpadControls.range < 95 ? controls.XpadControls.range+5 : 100;
 8007284:	4b9f      	ldr	r3, [pc, #636]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 8007286:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800728a:	2b5e      	cmp	r3, #94	; 0x5e
 800728c:	d805      	bhi.n	800729a <USBH_HID_EventCallback+0x1722>
 800728e:	4b9d      	ldr	r3, [pc, #628]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 8007290:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007294:	3305      	adds	r3, #5
 8007296:	b2db      	uxtb	r3, r3
 8007298:	e000      	b.n	800729c <USBH_HID_EventCallback+0x1724>
 800729a:	2364      	movs	r3, #100	; 0x64
 800729c:	4a99      	ldr	r2, [pc, #612]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 800729e:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
			break;
 80072a2:	e124      	b.n	80074ee <USBH_HID_EventCallback+0x1976>
				else if(b == XPAD_HAT_DOWN) // -5
 80072a4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80072a8:	2c00      	cmp	r4, #0
 80072aa:	bf08      	it	eq
 80072ac:	2b02      	cmpeq	r3, #2
 80072ae:	d117      	bne.n	80072e0 <USBH_HID_EventCallback+0x1768>
					if(ds3ButtonPressed == 0)
 80072b0:	4b93      	ldr	r3, [pc, #588]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f040 811a 	bne.w	80074ee <USBH_HID_EventCallback+0x1976>
						ds3ButtonPressed = 1;
 80072ba:	4b91      	ldr	r3, [pc, #580]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 80072bc:	2201      	movs	r2, #1
 80072be:	701a      	strb	r2, [r3, #0]
						controls.XpadControls.range = controls.XpadControls.range > 5 ? controls.XpadControls.range-5 : 0;
 80072c0:	4b90      	ldr	r3, [pc, #576]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 80072c2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80072c6:	2b05      	cmp	r3, #5
 80072c8:	d905      	bls.n	80072d6 <USBH_HID_EventCallback+0x175e>
 80072ca:	4b8e      	ldr	r3, [pc, #568]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 80072cc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80072d0:	3b05      	subs	r3, #5
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	e000      	b.n	80072d8 <USBH_HID_EventCallback+0x1760>
 80072d6:	2300      	movs	r3, #0
 80072d8:	4a8a      	ldr	r2, [pc, #552]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 80072da:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
			break;
 80072de:	e106      	b.n	80074ee <USBH_HID_EventCallback+0x1976>
				else if(b == XPAD_HAT_LEFT) // -1
 80072e0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80072e4:	2c00      	cmp	r4, #0
 80072e6:	bf08      	it	eq
 80072e8:	2b04      	cmpeq	r3, #4
 80072ea:	d117      	bne.n	800731c <USBH_HID_EventCallback+0x17a4>
					if(ds3ButtonPressed == 0)
 80072ec:	4b84      	ldr	r3, [pc, #528]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f040 80fc 	bne.w	80074ee <USBH_HID_EventCallback+0x1976>
						ds3ButtonPressed = 1;
 80072f6:	4b82      	ldr	r3, [pc, #520]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 80072f8:	2201      	movs	r2, #1
 80072fa:	701a      	strb	r2, [r3, #0]
						controls.XpadControls.range = controls.XpadControls.range > 1 ? controls.XpadControls.range-1 : 0;
 80072fc:	4b81      	ldr	r3, [pc, #516]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 80072fe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007302:	2b01      	cmp	r3, #1
 8007304:	d905      	bls.n	8007312 <USBH_HID_EventCallback+0x179a>
 8007306:	4b7f      	ldr	r3, [pc, #508]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 8007308:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800730c:	3b01      	subs	r3, #1
 800730e:	b2db      	uxtb	r3, r3
 8007310:	e000      	b.n	8007314 <USBH_HID_EventCallback+0x179c>
 8007312:	2300      	movs	r3, #0
 8007314:	4a7b      	ldr	r2, [pc, #492]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 8007316:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
			break;
 800731a:	e0e8      	b.n	80074ee <USBH_HID_EventCallback+0x1976>
				else if(b == XPAD_HAT_RIGHT)// +1
 800731c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8007320:	2c00      	cmp	r4, #0
 8007322:	bf08      	it	eq
 8007324:	2b08      	cmpeq	r3, #8
 8007326:	d117      	bne.n	8007358 <USBH_HID_EventCallback+0x17e0>
					if(ds3ButtonPressed == 0)
 8007328:	4b75      	ldr	r3, [pc, #468]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	f040 80de 	bne.w	80074ee <USBH_HID_EventCallback+0x1976>
						ds3ButtonPressed = 1;
 8007332:	4b73      	ldr	r3, [pc, #460]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 8007334:	2201      	movs	r2, #1
 8007336:	701a      	strb	r2, [r3, #0]
						controls.XpadControls.range = controls.XpadControls.range < 99 ? controls.XpadControls.range+1 : 100;
 8007338:	4b72      	ldr	r3, [pc, #456]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 800733a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800733e:	2b62      	cmp	r3, #98	; 0x62
 8007340:	d805      	bhi.n	800734e <USBH_HID_EventCallback+0x17d6>
 8007342:	4b70      	ldr	r3, [pc, #448]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 8007344:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007348:	3301      	adds	r3, #1
 800734a:	b2db      	uxtb	r3, r3
 800734c:	e000      	b.n	8007350 <USBH_HID_EventCallback+0x17d8>
 800734e:	2364      	movs	r3, #100	; 0x64
 8007350:	4a6c      	ldr	r2, [pc, #432]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 8007352:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
			break;
 8007356:	e0ca      	b.n	80074ee <USBH_HID_EventCallback+0x1976>
				else if(b == XPAD_PAD_A) // OK
 8007358:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800735c:	2c00      	cmp	r4, #0
 800735e:	bf08      	it	eq
 8007360:	f5b3 5f80 	cmpeq.w	r3, #4096	; 0x1000
 8007364:	d10a      	bne.n	800737c <USBH_HID_EventCallback+0x1804>
					if(ds3ButtonPressed == 0)
 8007366:	4b66      	ldr	r3, [pc, #408]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	f040 80bf 	bne.w	80074ee <USBH_HID_EventCallback+0x1976>
						ds3ButtonPressed = 1;
 8007370:	4b63      	ldr	r3, [pc, #396]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 8007372:	2201      	movs	r2, #1
 8007374:	701a      	strb	r2, [r3, #0]
						AdvanceState();
 8007376:	f003 fc81 	bl	800ac7c <AdvanceState>
			break;
 800737a:	e0b8      	b.n	80074ee <USBH_HID_EventCallback+0x1976>
					ds3ButtonPressed = 0;
 800737c:	4b60      	ldr	r3, [pc, #384]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 800737e:	2200      	movs	r2, #0
 8007380:	701a      	strb	r2, [r3, #0]
			break;
 8007382:	e0b4      	b.n	80074ee <USBH_HID_EventCallback+0x1976>
			else if(state == STATE_DEADZONE)
 8007384:	4b5d      	ldr	r3, [pc, #372]	; (80074fc <USBH_HID_EventCallback+0x1984>)
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	2b14      	cmp	r3, #20
 800738a:	f040 808e 	bne.w	80074aa <USBH_HID_EventCallback+0x1932>
				uint64_t b = DetectButtonDS3(buttons_and_triggers); // read for button presses (just do linear search)
 800738e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007392:	f7fd fdc9 	bl	8004f28 <DetectButtonDS3>
 8007396:	e9c7 0108 	strd	r0, r1, [r7, #32]
				if(b == XPAD_HAT_UP) // +5
 800739a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800739e:	2c00      	cmp	r4, #0
 80073a0:	bf08      	it	eq
 80073a2:	2b01      	cmpeq	r3, #1
 80073a4:	d117      	bne.n	80073d6 <USBH_HID_EventCallback+0x185e>
					if(ds3ButtonPressed == 0)
 80073a6:	4b56      	ldr	r3, [pc, #344]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f040 809f 	bne.w	80074ee <USBH_HID_EventCallback+0x1976>
						ds3ButtonPressed = 1;
 80073b0:	4b53      	ldr	r3, [pc, #332]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 80073b2:	2201      	movs	r2, #1
 80073b4:	701a      	strb	r2, [r3, #0]
						controls.XpadControls.deadzone = controls.XpadControls.deadzone < 95 ? controls.XpadControls.deadzone+5 : 100;
 80073b6:	4b53      	ldr	r3, [pc, #332]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 80073b8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80073bc:	2b5e      	cmp	r3, #94	; 0x5e
 80073be:	d805      	bhi.n	80073cc <USBH_HID_EventCallback+0x1854>
 80073c0:	4b50      	ldr	r3, [pc, #320]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 80073c2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80073c6:	3305      	adds	r3, #5
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	e000      	b.n	80073ce <USBH_HID_EventCallback+0x1856>
 80073cc:	2364      	movs	r3, #100	; 0x64
 80073ce:	4a4d      	ldr	r2, [pc, #308]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 80073d0:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
			break;
 80073d4:	e08b      	b.n	80074ee <USBH_HID_EventCallback+0x1976>
				else if(b == XPAD_HAT_DOWN) // -5
 80073d6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80073da:	2c00      	cmp	r4, #0
 80073dc:	bf08      	it	eq
 80073de:	2b02      	cmpeq	r3, #2
 80073e0:	d117      	bne.n	8007412 <USBH_HID_EventCallback+0x189a>
					if(ds3ButtonPressed == 0)
 80073e2:	4b47      	ldr	r3, [pc, #284]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f040 8081 	bne.w	80074ee <USBH_HID_EventCallback+0x1976>
						ds3ButtonPressed = 1;
 80073ec:	4b44      	ldr	r3, [pc, #272]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 80073ee:	2201      	movs	r2, #1
 80073f0:	701a      	strb	r2, [r3, #0]
						controls.XpadControls.deadzone = controls.XpadControls.deadzone > 5 ? controls.XpadControls.deadzone-5 : 0;
 80073f2:	4b44      	ldr	r3, [pc, #272]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 80073f4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80073f8:	2b05      	cmp	r3, #5
 80073fa:	d905      	bls.n	8007408 <USBH_HID_EventCallback+0x1890>
 80073fc:	4b41      	ldr	r3, [pc, #260]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 80073fe:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8007402:	3b05      	subs	r3, #5
 8007404:	b2db      	uxtb	r3, r3
 8007406:	e000      	b.n	800740a <USBH_HID_EventCallback+0x1892>
 8007408:	2300      	movs	r3, #0
 800740a:	4a3e      	ldr	r2, [pc, #248]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 800740c:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
			break;
 8007410:	e06d      	b.n	80074ee <USBH_HID_EventCallback+0x1976>
				else if(b == XPAD_HAT_LEFT) // -1
 8007412:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007416:	2c00      	cmp	r4, #0
 8007418:	bf08      	it	eq
 800741a:	2b04      	cmpeq	r3, #4
 800741c:	d116      	bne.n	800744c <USBH_HID_EventCallback+0x18d4>
					if(ds3ButtonPressed == 0)
 800741e:	4b38      	ldr	r3, [pc, #224]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d163      	bne.n	80074ee <USBH_HID_EventCallback+0x1976>
						ds3ButtonPressed = 1;
 8007426:	4b36      	ldr	r3, [pc, #216]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 8007428:	2201      	movs	r2, #1
 800742a:	701a      	strb	r2, [r3, #0]
						controls.XpadControls.deadzone = controls.XpadControls.deadzone > 1 ? controls.XpadControls.deadzone-1 : 0;
 800742c:	4b35      	ldr	r3, [pc, #212]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 800742e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8007432:	2b01      	cmp	r3, #1
 8007434:	d905      	bls.n	8007442 <USBH_HID_EventCallback+0x18ca>
 8007436:	4b33      	ldr	r3, [pc, #204]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 8007438:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800743c:	3b01      	subs	r3, #1
 800743e:	b2db      	uxtb	r3, r3
 8007440:	e000      	b.n	8007444 <USBH_HID_EventCallback+0x18cc>
 8007442:	2300      	movs	r3, #0
 8007444:	4a2f      	ldr	r2, [pc, #188]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 8007446:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
			break;
 800744a:	e050      	b.n	80074ee <USBH_HID_EventCallback+0x1976>
				else if(b == XPAD_HAT_RIGHT)// +1
 800744c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007450:	2c00      	cmp	r4, #0
 8007452:	bf08      	it	eq
 8007454:	2b08      	cmpeq	r3, #8
 8007456:	d116      	bne.n	8007486 <USBH_HID_EventCallback+0x190e>
					if(ds3ButtonPressed == 0)
 8007458:	4b29      	ldr	r3, [pc, #164]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d146      	bne.n	80074ee <USBH_HID_EventCallback+0x1976>
						ds3ButtonPressed = 1;
 8007460:	4b27      	ldr	r3, [pc, #156]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 8007462:	2201      	movs	r2, #1
 8007464:	701a      	strb	r2, [r3, #0]
						controls.XpadControls.deadzone = controls.XpadControls.deadzone < 99 ? controls.XpadControls.deadzone+1 : 100;
 8007466:	4b27      	ldr	r3, [pc, #156]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 8007468:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800746c:	2b62      	cmp	r3, #98	; 0x62
 800746e:	d805      	bhi.n	800747c <USBH_HID_EventCallback+0x1904>
 8007470:	4b24      	ldr	r3, [pc, #144]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 8007472:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8007476:	3301      	adds	r3, #1
 8007478:	b2db      	uxtb	r3, r3
 800747a:	e000      	b.n	800747e <USBH_HID_EventCallback+0x1906>
 800747c:	2364      	movs	r3, #100	; 0x64
 800747e:	4a21      	ldr	r2, [pc, #132]	; (8007504 <USBH_HID_EventCallback+0x198c>)
 8007480:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
			break;
 8007484:	e033      	b.n	80074ee <USBH_HID_EventCallback+0x1976>
				else if(b == XPAD_PAD_A) // OK
 8007486:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800748a:	2c00      	cmp	r4, #0
 800748c:	bf08      	it	eq
 800748e:	f5b3 5f80 	cmpeq.w	r3, #4096	; 0x1000
 8007492:	d106      	bne.n	80074a2 <USBH_HID_EventCallback+0x192a>
					if(ds3ButtonPressed == 0)
 8007494:	4b1a      	ldr	r3, [pc, #104]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d128      	bne.n	80074ee <USBH_HID_EventCallback+0x1976>
						AdvanceState();
 800749c:	f003 fbee 	bl	800ac7c <AdvanceState>
			break;
 80074a0:	e025      	b.n	80074ee <USBH_HID_EventCallback+0x1976>
					ds3ButtonPressed = 0;
 80074a2:	4b17      	ldr	r3, [pc, #92]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	701a      	strb	r2, [r3, #0]
			break;
 80074a8:	e021      	b.n	80074ee <USBH_HID_EventCallback+0x1976>
				uint64_t b = DetectButtonDS3(buttons_and_triggers); // read for button presses (just do linear search)
 80074aa:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80074ae:	f7fd fd3b 	bl	8004f28 <DetectButtonDS3>
 80074b2:	e9c7 0106 	strd	r0, r1, [r7, #24]
				if(b != 0) /*button was actually is pressed*/
 80074b6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80074ba:	4323      	orrs	r3, r4
 80074bc:	d00d      	beq.n	80074da <USBH_HID_EventCallback+0x1962>
					if(ds3ButtonPressed == 0)
 80074be:	4b10      	ldr	r3, [pc, #64]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d113      	bne.n	80074ee <USBH_HID_EventCallback+0x1976>
						ds3ButtonPressed = 1;
 80074c6:	4b0e      	ldr	r3, [pc, #56]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 80074c8:	2201      	movs	r2, #1
 80074ca:	701a      	strb	r2, [r3, #0]
						ChangeButtonMappingController(b);
 80074cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80074d0:	f003 fae2 	bl	800aa98 <ChangeButtonMappingController>
						AdvanceState();
 80074d4:	f003 fbd2 	bl	800ac7c <AdvanceState>
			break;
 80074d8:	e009      	b.n	80074ee <USBH_HID_EventCallback+0x1976>
					ds3ButtonPressed = 0;
 80074da:	4b09      	ldr	r3, [pc, #36]	; (8007500 <USBH_HID_EventCallback+0x1988>)
 80074dc:	2200      	movs	r2, #0
 80074de:	701a      	strb	r2, [r3, #0]
			break;
 80074e0:	e005      	b.n	80074ee <USBH_HID_EventCallback+0x1976>
				return;
 80074e2:	bf00      	nop
 80074e4:	e004      	b.n	80074f0 <USBH_HID_EventCallback+0x1978>
			break;
 80074e6:	bf00      	nop
 80074e8:	e002      	b.n	80074f0 <USBH_HID_EventCallback+0x1978>
			break;
 80074ea:	bf00      	nop
 80074ec:	e000      	b.n	80074f0 <USBH_HID_EventCallback+0x1978>
			break;
 80074ee:	bf00      	nop
	}
}
 80074f0:	37bc      	adds	r7, #188	; 0xbc
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd90      	pop	{r4, r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20000308 	.word	0x20000308
 80074fc:	2000010a 	.word	0x2000010a
 8007500:	20000101 	.word	0x20000101
 8007504:	20000284 	.word	0x20000284

08007508 <USBH_HID_DS3Init>:
  255,   /*max value device can report*/
  1      /*resolution*/
};

USBH_StatusTypeDef USBH_HID_DS3Init(USBH_HandleTypeDef *phost)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
	  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	60fb      	str	r3, [r7, #12]

	  memset(&ds3_data,0,sizeof(HID_DS3_Info_TypeDef));
 800751a:	2230      	movs	r2, #48	; 0x30
 800751c:	2100      	movs	r1, #0
 800751e:	4811      	ldr	r0, [pc, #68]	; (8007564 <USBH_HID_DS3Init+0x5c>)
 8007520:	f004 fc87 	bl	800be32 <memset>
	  memset(ds3_report_data,0,sizeof(ds3_report_data));
 8007524:	2230      	movs	r2, #48	; 0x30
 8007526:	2100      	movs	r1, #0
 8007528:	480f      	ldr	r0, [pc, #60]	; (8007568 <USBH_HID_DS3Init+0x60>)
 800752a:	f004 fc82 	bl	800be32 <memset>

	  if(HID_Handle->length > (sizeof(ds3_report_data)/sizeof(uint32_t)))
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	8b1b      	ldrh	r3, [r3, #24]
 8007532:	2b0c      	cmp	r3, #12
 8007534:	d902      	bls.n	800753c <USBH_HID_DS3Init+0x34>
	  {
	    HID_Handle->length = (sizeof(ds3_report_data)/sizeof(uint32_t));
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	220c      	movs	r2, #12
 800753a:	831a      	strh	r2, [r3, #24]
	  }
	  HID_Handle->pData = (uint8_t*)ds3_report_data;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4a0a      	ldr	r2, [pc, #40]	; (8007568 <USBH_HID_DS3Init+0x60>)
 8007540:	615a      	str	r2, [r3, #20]
	  fifo_init(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(ds3_report_data));
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f103 0008 	add.w	r0, r3, #8
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800754e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007552:	4619      	mov	r1, r3
 8007554:	f7fe fa56 	bl	8005a04 <fifo_init>

	  return USBH_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	200001a8 	.word	0x200001a8
 8007568:	20000178 	.word	0x20000178

0800756c <USBH_HID_DS3Decode>:


static USBH_StatusTypeDef USBH_HID_DS3Decode(USBH_HandleTypeDef *phost)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  int x;

  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 800757a:	69db      	ldr	r3, [r3, #28]
 800757c:	60bb      	str	r3, [r7, #8]
  if(HID_Handle->length == 0)
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	8b1b      	ldrh	r3, [r3, #24]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <USBH_HID_DS3Decode+0x1e>
  {
    return USBH_FAIL;
 8007586:	2302      	movs	r3, #2
 8007588:	e027      	b.n	80075da <USBH_HID_DS3Decode+0x6e>
  }
  /*Fill report */
  if(fifo_read(&HID_Handle->fifo, &ds3_report_data, HID_Handle->length) ==  HID_Handle->length)
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	f103 0008 	add.w	r0, r3, #8
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	8b1b      	ldrh	r3, [r3, #24]
 8007594:	461a      	mov	r2, r3
 8007596:	4913      	ldr	r1, [pc, #76]	; (80075e4 <USBH_HID_DS3Decode+0x78>)
 8007598:	f7fe fa50 	bl	8005a3c <fifo_read>
 800759c:	4603      	mov	r3, r0
 800759e:	461a      	mov	r2, r3
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	8b1b      	ldrh	r3, [r3, #24]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d117      	bne.n	80075d8 <USBH_HID_DS3Decode+0x6c>
  {
	for(x=0; x < sizeof(HID_DS3_Info_TypeDef); x++)
 80075a8:	2300      	movs	r3, #0
 80075aa:	60fb      	str	r3, [r7, #12]
 80075ac:	e00f      	b.n	80075ce <USBH_HID_DS3Decode+0x62>
	{
		ds3_data.data[x]=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ds3_byte, x);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	4619      	mov	r1, r3
 80075b4:	480c      	ldr	r0, [pc, #48]	; (80075e8 <USBH_HID_DS3Decode+0x7c>)
 80075b6:	f000 fb25 	bl	8007c04 <HID_ReadItem>
 80075ba:	4603      	mov	r3, r0
 80075bc:	b2d9      	uxtb	r1, r3
 80075be:	4a0b      	ldr	r2, [pc, #44]	; (80075ec <USBH_HID_DS3Decode+0x80>)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4413      	add	r3, r2
 80075c4:	460a      	mov	r2, r1
 80075c6:	701a      	strb	r2, [r3, #0]
	for(x=0; x < sizeof(HID_DS3_Info_TypeDef); x++)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3301      	adds	r3, #1
 80075cc:	60fb      	str	r3, [r7, #12]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2b2f      	cmp	r3, #47	; 0x2f
 80075d2:	d9ec      	bls.n	80075ae <USBH_HID_DS3Decode+0x42>
	}

    return USBH_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	e000      	b.n	80075da <USBH_HID_DS3Decode+0x6e>
  }
  return   USBH_FAIL;
 80075d8:	2302      	movs	r3, #2
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	20000178 	.word	0x20000178
 80075e8:	0800c038 	.word	0x0800c038
 80075ec:	200001a8 	.word	0x200001a8

080075f0 <USBH_HID_GetDS3Info>:

HID_DS3_Info_TypeDef *USBH_HID_GetDS3Info(USBH_HandleTypeDef *phost)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 if(USBH_HID_DS3Decode(phost) == USBH_OK)
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7ff ffb7 	bl	800756c <USBH_HID_DS3Decode>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <USBH_HID_GetDS3Info+0x18>
 {
  return &ds3_data;
 8007604:	4b03      	ldr	r3, [pc, #12]	; (8007614 <USBH_HID_GetDS3Info+0x24>)
 8007606:	e000      	b.n	800760a <USBH_HID_GetDS3Info+0x1a>
 }
 else
 {
  return NULL;
 8007608:	2300      	movs	r3, #0
 }
}
 800760a:	4618      	mov	r0, r3
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	200001a8 	.word	0x200001a8

08007618 <USBH_HID_GetDS3ButtonsAndTriggers>:

// bit order  ds3: many 0s|r2|l2|triangle|square|circle|X|?|?|R1|L1|R3|L3|select|start|dright|dleft|ddown|dup
uint64_t USBH_HID_GetDS3ButtonsAndTriggers()
{
 8007618:	b490      	push	{r4, r7}
 800761a:	af00      	add	r7, sp, #0
	return ds3_data.d_up | (ds3_data.d_down << 1) | (ds3_data.d_left << 2) | (ds3_data.d_right << 3) |
 800761c:	4b3a      	ldr	r3, [pc, #232]	; (8007708 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 800761e:	789b      	ldrb	r3, [r3, #2]
 8007620:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007624:	b2db      	uxtb	r3, r3
 8007626:	461a      	mov	r2, r3
 8007628:	4b37      	ldr	r3, [pc, #220]	; (8007708 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 800762a:	789b      	ldrb	r3, [r3, #2]
 800762c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007630:	b2db      	uxtb	r3, r3
 8007632:	005b      	lsls	r3, r3, #1
 8007634:	431a      	orrs	r2, r3
 8007636:	4b34      	ldr	r3, [pc, #208]	; (8007708 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 8007638:	789b      	ldrb	r3, [r3, #2]
 800763a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800763e:	b2db      	uxtb	r3, r3
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	431a      	orrs	r2, r3
 8007644:	4b30      	ldr	r3, [pc, #192]	; (8007708 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 8007646:	789b      	ldrb	r3, [r3, #2]
 8007648:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800764c:	b2db      	uxtb	r3, r3
 800764e:	00db      	lsls	r3, r3, #3
 8007650:	431a      	orrs	r2, r3
			(ds3_data.start << 4) | (ds3_data.select << 5) | (ds3_data.L3 << 6) | (ds3_data.R3 << 7) |
 8007652:	4b2d      	ldr	r3, [pc, #180]	; (8007708 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 8007654:	789b      	ldrb	r3, [r3, #2]
 8007656:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800765a:	b2db      	uxtb	r3, r3
 800765c:	011b      	lsls	r3, r3, #4
	return ds3_data.d_up | (ds3_data.d_down << 1) | (ds3_data.d_left << 2) | (ds3_data.d_right << 3) |
 800765e:	431a      	orrs	r2, r3
			(ds3_data.start << 4) | (ds3_data.select << 5) | (ds3_data.L3 << 6) | (ds3_data.R3 << 7) |
 8007660:	4b29      	ldr	r3, [pc, #164]	; (8007708 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 8007662:	789b      	ldrb	r3, [r3, #2]
 8007664:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007668:	b2db      	uxtb	r3, r3
 800766a:	015b      	lsls	r3, r3, #5
 800766c:	431a      	orrs	r2, r3
 800766e:	4b26      	ldr	r3, [pc, #152]	; (8007708 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 8007670:	789b      	ldrb	r3, [r3, #2]
 8007672:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007676:	b2db      	uxtb	r3, r3
 8007678:	019b      	lsls	r3, r3, #6
 800767a:	431a      	orrs	r2, r3
 800767c:	4b22      	ldr	r3, [pc, #136]	; (8007708 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 800767e:	789b      	ldrb	r3, [r3, #2]
 8007680:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007684:	b2db      	uxtb	r3, r3
 8007686:	01db      	lsls	r3, r3, #7
 8007688:	431a      	orrs	r2, r3
			(ds3_data.L1 << 8) | (ds3_data.R1 << 9) | // next two bits unused
 800768a:	4b1f      	ldr	r3, [pc, #124]	; (8007708 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 800768c:	78db      	ldrb	r3, [r3, #3]
 800768e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007692:	b2db      	uxtb	r3, r3
 8007694:	021b      	lsls	r3, r3, #8
			(ds3_data.start << 4) | (ds3_data.select << 5) | (ds3_data.L3 << 6) | (ds3_data.R3 << 7) |
 8007696:	431a      	orrs	r2, r3
			(ds3_data.L1 << 8) | (ds3_data.R1 << 9) | // next two bits unused
 8007698:	4b1b      	ldr	r3, [pc, #108]	; (8007708 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 800769a:	78db      	ldrb	r3, [r3, #3]
 800769c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	025b      	lsls	r3, r3, #9
 80076a4:	431a      	orrs	r2, r3
			(ds3_data.x << 12) | (ds3_data.circle << 13) | (ds3_data.square << 14) | (ds3_data.triangle << 15) |
 80076a6:	4b18      	ldr	r3, [pc, #96]	; (8007708 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 80076a8:	78db      	ldrb	r3, [r3, #3]
 80076aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	031b      	lsls	r3, r3, #12
			(ds3_data.L1 << 8) | (ds3_data.R1 << 9) | // next two bits unused
 80076b2:	431a      	orrs	r2, r3
			(ds3_data.x << 12) | (ds3_data.circle << 13) | (ds3_data.square << 14) | (ds3_data.triangle << 15) |
 80076b4:	4b14      	ldr	r3, [pc, #80]	; (8007708 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 80076b6:	78db      	ldrb	r3, [r3, #3]
 80076b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	035b      	lsls	r3, r3, #13
 80076c0:	431a      	orrs	r2, r3
 80076c2:	4b11      	ldr	r3, [pc, #68]	; (8007708 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 80076c4:	78db      	ldrb	r3, [r3, #3]
 80076c6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	039b      	lsls	r3, r3, #14
 80076ce:	431a      	orrs	r2, r3
 80076d0:	4b0d      	ldr	r3, [pc, #52]	; (8007708 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 80076d2:	78db      	ldrb	r3, [r3, #3]
 80076d4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	03db      	lsls	r3, r3, #15
 80076dc:	431a      	orrs	r2, r3
			(ds3_data.L2 << 16) | (ds3_data.R2 << 17);
 80076de:	4b0a      	ldr	r3, [pc, #40]	; (8007708 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 80076e0:	78db      	ldrb	r3, [r3, #3]
 80076e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	041b      	lsls	r3, r3, #16
			(ds3_data.x << 12) | (ds3_data.circle << 13) | (ds3_data.square << 14) | (ds3_data.triangle << 15) |
 80076ea:	431a      	orrs	r2, r3
			(ds3_data.L2 << 16) | (ds3_data.R2 << 17);
 80076ec:	4b06      	ldr	r3, [pc, #24]	; (8007708 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 80076ee:	78db      	ldrb	r3, [r3, #3]
 80076f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	045b      	lsls	r3, r3, #17
 80076f8:	4313      	orrs	r3, r2
 80076fa:	ea4f 74e3 	mov.w	r4, r3, asr #31
}
 80076fe:	4618      	mov	r0, r3
 8007700:	4621      	mov	r1, r4
 8007702:	46bd      	mov	sp, r7
 8007704:	bc90      	pop	{r4, r7}
 8007706:	4770      	bx	lr
 8007708:	200001a8 	.word	0x200001a8

0800770c <USBH_HID_DS4Init>:
		DS4_DPAD_LEFT_UP = 0x7,
		DS4_DPAD_OFF = 0x8,
};

USBH_StatusTypeDef USBH_HID_DS4Init(USBH_HandleTypeDef *phost)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
	  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	60fb      	str	r3, [r7, #12]

	  memset(&ds4_data,0,sizeof(HID_DS4_Info_TypeDef));
 800771e:	2240      	movs	r2, #64	; 0x40
 8007720:	2100      	movs	r1, #0
 8007722:	4811      	ldr	r0, [pc, #68]	; (8007768 <USBH_HID_DS4Init+0x5c>)
 8007724:	f004 fb85 	bl	800be32 <memset>
	  memset(ds4_report_data,0,sizeof(ds4_report_data));
 8007728:	2240      	movs	r2, #64	; 0x40
 800772a:	2100      	movs	r1, #0
 800772c:	480f      	ldr	r0, [pc, #60]	; (800776c <USBH_HID_DS4Init+0x60>)
 800772e:	f004 fb80 	bl	800be32 <memset>

	  if(HID_Handle->length > (sizeof(ds4_report_data)/sizeof(uint32_t)))
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	8b1b      	ldrh	r3, [r3, #24]
 8007736:	2b10      	cmp	r3, #16
 8007738:	d902      	bls.n	8007740 <USBH_HID_DS4Init+0x34>
	  {
	    HID_Handle->length = (sizeof(ds4_report_data)/sizeof(uint32_t));
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2210      	movs	r2, #16
 800773e:	831a      	strh	r2, [r3, #24]
	  }
	  HID_Handle->pData = (uint8_t*)ds4_report_data;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	4a0a      	ldr	r2, [pc, #40]	; (800776c <USBH_HID_DS4Init+0x60>)
 8007744:	615a      	str	r2, [r3, #20]
	  fifo_init(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(ds4_report_data));
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f103 0008 	add.w	r0, r3, #8
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8007752:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007756:	4619      	mov	r1, r3
 8007758:	f7fe f954 	bl	8005a04 <fifo_init>

	  return USBH_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	200001d8 	.word	0x200001d8
 800776c:	20000218 	.word	0x20000218

08007770 <USBH_HID_DS4Decode>:


static USBH_StatusTypeDef USBH_HID_DS4Decode(USBH_HandleTypeDef *phost)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  int x;

  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 800777e:	69db      	ldr	r3, [r3, #28]
 8007780:	60bb      	str	r3, [r7, #8]
  if(HID_Handle->length == 0)
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	8b1b      	ldrh	r3, [r3, #24]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <USBH_HID_DS4Decode+0x1e>
  {
    return USBH_FAIL;
 800778a:	2302      	movs	r3, #2
 800778c:	e027      	b.n	80077de <USBH_HID_DS4Decode+0x6e>
  }
  /*Fill report */
  if(fifo_read(&HID_Handle->fifo, &ds4_report_data, HID_Handle->length) ==  HID_Handle->length)
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	f103 0008 	add.w	r0, r3, #8
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	8b1b      	ldrh	r3, [r3, #24]
 8007798:	461a      	mov	r2, r3
 800779a:	4913      	ldr	r1, [pc, #76]	; (80077e8 <USBH_HID_DS4Decode+0x78>)
 800779c:	f7fe f94e 	bl	8005a3c <fifo_read>
 80077a0:	4603      	mov	r3, r0
 80077a2:	461a      	mov	r2, r3
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	8b1b      	ldrh	r3, [r3, #24]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d117      	bne.n	80077dc <USBH_HID_DS4Decode+0x6c>
  {
	for(x=0; x < sizeof(HID_DS4_Info_TypeDef); x++)
 80077ac:	2300      	movs	r3, #0
 80077ae:	60fb      	str	r3, [r7, #12]
 80077b0:	e00f      	b.n	80077d2 <USBH_HID_DS4Decode+0x62>
	{
		ds4_data.data[x]=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ds4_byte, x);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	4619      	mov	r1, r3
 80077b8:	480c      	ldr	r0, [pc, #48]	; (80077ec <USBH_HID_DS4Decode+0x7c>)
 80077ba:	f000 fa23 	bl	8007c04 <HID_ReadItem>
 80077be:	4603      	mov	r3, r0
 80077c0:	b2d9      	uxtb	r1, r3
 80077c2:	4a0b      	ldr	r2, [pc, #44]	; (80077f0 <USBH_HID_DS4Decode+0x80>)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	4413      	add	r3, r2
 80077c8:	460a      	mov	r2, r1
 80077ca:	701a      	strb	r2, [r3, #0]
	for(x=0; x < sizeof(HID_DS4_Info_TypeDef); x++)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	3301      	adds	r3, #1
 80077d0:	60fb      	str	r3, [r7, #12]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2b3f      	cmp	r3, #63	; 0x3f
 80077d6:	d9ec      	bls.n	80077b2 <USBH_HID_DS4Decode+0x42>
	}

    return USBH_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	e000      	b.n	80077de <USBH_HID_DS4Decode+0x6e>
  }
  return   USBH_FAIL;
 80077dc:	2302      	movs	r3, #2
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	20000218 	.word	0x20000218
 80077ec:	0800c058 	.word	0x0800c058
 80077f0:	200001d8 	.word	0x200001d8

080077f4 <USBH_HID_GetDS4Info>:

HID_DS4_Info_TypeDef *USBH_HID_GetDS4Info(USBH_HandleTypeDef *phost)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 if(USBH_HID_DS4Decode(phost) == USBH_OK)
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7ff ffb7 	bl	8007770 <USBH_HID_DS4Decode>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d101      	bne.n	800780c <USBH_HID_GetDS4Info+0x18>
 {
  return &ds4_data;
 8007808:	4b03      	ldr	r3, [pc, #12]	; (8007818 <USBH_HID_GetDS4Info+0x24>)
 800780a:	e000      	b.n	800780e <USBH_HID_GetDS4Info+0x1a>
 }
 else
 {
  return NULL;
 800780c:	2300      	movs	r3, #0
 }
}
 800780e:	4618      	mov	r0, r3
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	200001d8 	.word	0x200001d8

0800781c <USBH_HID_GetDS4ButtonsAndTriggers>:

// bit order  ds4: many 0s|r2|l2|triangle|square|circle|X|?|?|R1|L1|R3|L3|share|options|dright|dleft|ddown|dup
uint64_t USBH_HID_GetDS4ButtonsAndTriggers()
{
 800781c:	b490      	push	{r4, r7}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
	uint8_t dpad_data = 0; // the lower 4 bits need to indicate up down left and right
 8007822:	2300      	movs	r3, #0
 8007824:	71fb      	strb	r3, [r7, #7]

	// up - set bit 0
	if(ds4_data.dpad == DS4_DPAD_LEFT_UP || ds4_data.dpad == DS4_DPAD_UP || ds4_data.dpad == DS4_DPAD_UP_RIGHT)
 8007826:	4b60      	ldr	r3, [pc, #384]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 8007828:	795b      	ldrb	r3, [r3, #5]
 800782a:	f003 030f 	and.w	r3, r3, #15
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b07      	cmp	r3, #7
 8007832:	d00d      	beq.n	8007850 <USBH_HID_GetDS4ButtonsAndTriggers+0x34>
 8007834:	4b5c      	ldr	r3, [pc, #368]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 8007836:	795b      	ldrb	r3, [r3, #5]
 8007838:	f003 030f 	and.w	r3, r3, #15
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d006      	beq.n	8007850 <USBH_HID_GetDS4ButtonsAndTriggers+0x34>
 8007842:	4b59      	ldr	r3, [pc, #356]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 8007844:	795b      	ldrb	r3, [r3, #5]
 8007846:	f003 030f 	and.w	r3, r3, #15
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b01      	cmp	r3, #1
 800784e:	d103      	bne.n	8007858 <USBH_HID_GetDS4ButtonsAndTriggers+0x3c>
	{
		dpad_data |= 1;
 8007850:	79fb      	ldrb	r3, [r7, #7]
 8007852:	f043 0301 	orr.w	r3, r3, #1
 8007856:	71fb      	strb	r3, [r7, #7]
	}
	// right - set bit 3
	if(ds4_data.dpad == DS4_DPAD_UP_RIGHT || ds4_data.dpad == DS4_DPAD_RIGHT || ds4_data.dpad == DS4_DPAD_RIGHT_DOWN)
 8007858:	4b53      	ldr	r3, [pc, #332]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 800785a:	795b      	ldrb	r3, [r3, #5]
 800785c:	f003 030f 	and.w	r3, r3, #15
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b01      	cmp	r3, #1
 8007864:	d00d      	beq.n	8007882 <USBH_HID_GetDS4ButtonsAndTriggers+0x66>
 8007866:	4b50      	ldr	r3, [pc, #320]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 8007868:	795b      	ldrb	r3, [r3, #5]
 800786a:	f003 030f 	and.w	r3, r3, #15
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b02      	cmp	r3, #2
 8007872:	d006      	beq.n	8007882 <USBH_HID_GetDS4ButtonsAndTriggers+0x66>
 8007874:	4b4c      	ldr	r3, [pc, #304]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 8007876:	795b      	ldrb	r3, [r3, #5]
 8007878:	f003 030f 	and.w	r3, r3, #15
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b03      	cmp	r3, #3
 8007880:	d103      	bne.n	800788a <USBH_HID_GetDS4ButtonsAndTriggers+0x6e>
	{
		dpad_data |= 8;
 8007882:	79fb      	ldrb	r3, [r7, #7]
 8007884:	f043 0308 	orr.w	r3, r3, #8
 8007888:	71fb      	strb	r3, [r7, #7]
	}
	// down - set bit 1
	if(ds4_data.dpad == DS4_DPAD_RIGHT_DOWN || ds4_data.dpad == DS4_DPAD_DOWN || ds4_data.dpad == DS4_DPAD_DOWN_LEFT)
 800788a:	4b47      	ldr	r3, [pc, #284]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 800788c:	795b      	ldrb	r3, [r3, #5]
 800788e:	f003 030f 	and.w	r3, r3, #15
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b03      	cmp	r3, #3
 8007896:	d00d      	beq.n	80078b4 <USBH_HID_GetDS4ButtonsAndTriggers+0x98>
 8007898:	4b43      	ldr	r3, [pc, #268]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 800789a:	795b      	ldrb	r3, [r3, #5]
 800789c:	f003 030f 	and.w	r3, r3, #15
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d006      	beq.n	80078b4 <USBH_HID_GetDS4ButtonsAndTriggers+0x98>
 80078a6:	4b40      	ldr	r3, [pc, #256]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 80078a8:	795b      	ldrb	r3, [r3, #5]
 80078aa:	f003 030f 	and.w	r3, r3, #15
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b05      	cmp	r3, #5
 80078b2:	d103      	bne.n	80078bc <USBH_HID_GetDS4ButtonsAndTriggers+0xa0>
	{
		dpad_data |= 2;
 80078b4:	79fb      	ldrb	r3, [r7, #7]
 80078b6:	f043 0302 	orr.w	r3, r3, #2
 80078ba:	71fb      	strb	r3, [r7, #7]
	}
	// left - set bit 2
	if(ds4_data.dpad == DS4_DPAD_DOWN_LEFT || ds4_data.dpad == DS4_DPAD_LEFT || ds4_data.dpad == DS4_DPAD_LEFT_UP)
 80078bc:	4b3a      	ldr	r3, [pc, #232]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 80078be:	795b      	ldrb	r3, [r3, #5]
 80078c0:	f003 030f 	and.w	r3, r3, #15
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b05      	cmp	r3, #5
 80078c8:	d00d      	beq.n	80078e6 <USBH_HID_GetDS4ButtonsAndTriggers+0xca>
 80078ca:	4b37      	ldr	r3, [pc, #220]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 80078cc:	795b      	ldrb	r3, [r3, #5]
 80078ce:	f003 030f 	and.w	r3, r3, #15
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b06      	cmp	r3, #6
 80078d6:	d006      	beq.n	80078e6 <USBH_HID_GetDS4ButtonsAndTriggers+0xca>
 80078d8:	4b33      	ldr	r3, [pc, #204]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 80078da:	795b      	ldrb	r3, [r3, #5]
 80078dc:	f003 030f 	and.w	r3, r3, #15
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b07      	cmp	r3, #7
 80078e4:	d103      	bne.n	80078ee <USBH_HID_GetDS4ButtonsAndTriggers+0xd2>
	{
		dpad_data |= 4;
 80078e6:	79fb      	ldrb	r3, [r7, #7]
 80078e8:	f043 0304 	orr.w	r3, r3, #4
 80078ec:	71fb      	strb	r3, [r7, #7]
	}
	return	dpad_data |
 80078ee:	79fa      	ldrb	r2, [r7, #7]
			(ds4_data.options << 4) | (ds4_data.share << 5) | (ds4_data.L3 << 6) | (ds4_data.R3 << 7) |
 80078f0:	4b2d      	ldr	r3, [pc, #180]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 80078f2:	799b      	ldrb	r3, [r3, #6]
 80078f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	011b      	lsls	r3, r3, #4
	return	dpad_data |
 80078fc:	431a      	orrs	r2, r3
			(ds4_data.options << 4) | (ds4_data.share << 5) | (ds4_data.L3 << 6) | (ds4_data.R3 << 7) |
 80078fe:	4b2a      	ldr	r3, [pc, #168]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 8007900:	799b      	ldrb	r3, [r3, #6]
 8007902:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007906:	b2db      	uxtb	r3, r3
 8007908:	015b      	lsls	r3, r3, #5
 800790a:	431a      	orrs	r2, r3
 800790c:	4b26      	ldr	r3, [pc, #152]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 800790e:	799b      	ldrb	r3, [r3, #6]
 8007910:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007914:	b2db      	uxtb	r3, r3
 8007916:	019b      	lsls	r3, r3, #6
 8007918:	431a      	orrs	r2, r3
 800791a:	4b23      	ldr	r3, [pc, #140]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 800791c:	799b      	ldrb	r3, [r3, #6]
 800791e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007922:	b2db      	uxtb	r3, r3
 8007924:	01db      	lsls	r3, r3, #7
 8007926:	431a      	orrs	r2, r3
			(ds4_data.L1 << 8) | (ds4_data.R1 << 9) | // next two bits unused
 8007928:	4b1f      	ldr	r3, [pc, #124]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 800792a:	799b      	ldrb	r3, [r3, #6]
 800792c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007930:	b2db      	uxtb	r3, r3
 8007932:	021b      	lsls	r3, r3, #8
			(ds4_data.options << 4) | (ds4_data.share << 5) | (ds4_data.L3 << 6) | (ds4_data.R3 << 7) |
 8007934:	431a      	orrs	r2, r3
			(ds4_data.L1 << 8) | (ds4_data.R1 << 9) | // next two bits unused
 8007936:	4b1c      	ldr	r3, [pc, #112]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 8007938:	799b      	ldrb	r3, [r3, #6]
 800793a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800793e:	b2db      	uxtb	r3, r3
 8007940:	025b      	lsls	r3, r3, #9
 8007942:	431a      	orrs	r2, r3
			(ds4_data.x << 12) | (ds4_data.circle << 13) | (ds4_data.square << 14) | (ds4_data.triangle << 15) |
 8007944:	4b18      	ldr	r3, [pc, #96]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 8007946:	795b      	ldrb	r3, [r3, #5]
 8007948:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800794c:	b2db      	uxtb	r3, r3
 800794e:	031b      	lsls	r3, r3, #12
			(ds4_data.L1 << 8) | (ds4_data.R1 << 9) | // next two bits unused
 8007950:	431a      	orrs	r2, r3
			(ds4_data.x << 12) | (ds4_data.circle << 13) | (ds4_data.square << 14) | (ds4_data.triangle << 15) |
 8007952:	4b15      	ldr	r3, [pc, #84]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 8007954:	795b      	ldrb	r3, [r3, #5]
 8007956:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800795a:	b2db      	uxtb	r3, r3
 800795c:	035b      	lsls	r3, r3, #13
 800795e:	431a      	orrs	r2, r3
 8007960:	4b11      	ldr	r3, [pc, #68]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 8007962:	795b      	ldrb	r3, [r3, #5]
 8007964:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007968:	b2db      	uxtb	r3, r3
 800796a:	039b      	lsls	r3, r3, #14
 800796c:	431a      	orrs	r2, r3
 800796e:	4b0e      	ldr	r3, [pc, #56]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 8007970:	795b      	ldrb	r3, [r3, #5]
 8007972:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007976:	b2db      	uxtb	r3, r3
 8007978:	03db      	lsls	r3, r3, #15
 800797a:	431a      	orrs	r2, r3
			(ds4_data.L2 << 16) | (ds4_data.R2 << 17);
 800797c:	4b0a      	ldr	r3, [pc, #40]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 800797e:	799b      	ldrb	r3, [r3, #6]
 8007980:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007984:	b2db      	uxtb	r3, r3
 8007986:	041b      	lsls	r3, r3, #16
			(ds4_data.x << 12) | (ds4_data.circle << 13) | (ds4_data.square << 14) | (ds4_data.triangle << 15) |
 8007988:	431a      	orrs	r2, r3
			(ds4_data.L2 << 16) | (ds4_data.R2 << 17);
 800798a:	4b07      	ldr	r3, [pc, #28]	; (80079a8 <USBH_HID_GetDS4ButtonsAndTriggers+0x18c>)
 800798c:	799b      	ldrb	r3, [r3, #6]
 800798e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007992:	b2db      	uxtb	r3, r3
 8007994:	045b      	lsls	r3, r3, #17
 8007996:	4313      	orrs	r3, r2
 8007998:	ea4f 74e3 	mov.w	r4, r3, asr #31
}
 800799c:	4618      	mov	r0, r3
 800799e:	4621      	mov	r1, r4
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bc90      	pop	{r4, r7}
 80079a6:	4770      	bx	lr
 80079a8:	200001d8 	.word	0x200001d8

080079ac <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;  
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	60bb      	str	r3, [r7, #8]
    
  keybd_info.lctrl=keybd_info.lshift= 0;
 80079be:	4b21      	ldr	r3, [pc, #132]	; (8007a44 <USBH_HID_KeybdInit+0x98>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	709a      	strb	r2, [r3, #2]
 80079c4:	4b1f      	ldr	r3, [pc, #124]	; (8007a44 <USBH_HID_KeybdInit+0x98>)
 80079c6:	789a      	ldrb	r2, [r3, #2]
 80079c8:	4b1e      	ldr	r3, [pc, #120]	; (8007a44 <USBH_HID_KeybdInit+0x98>)
 80079ca:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt=keybd_info.lgui= 0;
 80079cc:	4b1d      	ldr	r3, [pc, #116]	; (8007a44 <USBH_HID_KeybdInit+0x98>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	711a      	strb	r2, [r3, #4]
 80079d2:	4b1c      	ldr	r3, [pc, #112]	; (8007a44 <USBH_HID_KeybdInit+0x98>)
 80079d4:	791a      	ldrb	r2, [r3, #4]
 80079d6:	4b1b      	ldr	r3, [pc, #108]	; (8007a44 <USBH_HID_KeybdInit+0x98>)
 80079d8:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl=keybd_info.rshift= 0;
 80079da:	4b1a      	ldr	r3, [pc, #104]	; (8007a44 <USBH_HID_KeybdInit+0x98>)
 80079dc:	2200      	movs	r2, #0
 80079de:	719a      	strb	r2, [r3, #6]
 80079e0:	4b18      	ldr	r3, [pc, #96]	; (8007a44 <USBH_HID_KeybdInit+0x98>)
 80079e2:	799a      	ldrb	r2, [r3, #6]
 80079e4:	4b17      	ldr	r3, [pc, #92]	; (8007a44 <USBH_HID_KeybdInit+0x98>)
 80079e6:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt=keybd_info.rgui=0;
 80079e8:	4b16      	ldr	r3, [pc, #88]	; (8007a44 <USBH_HID_KeybdInit+0x98>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	721a      	strb	r2, [r3, #8]
 80079ee:	4b15      	ldr	r3, [pc, #84]	; (8007a44 <USBH_HID_KeybdInit+0x98>)
 80079f0:	7a1a      	ldrb	r2, [r3, #8]
 80079f2:	4b14      	ldr	r3, [pc, #80]	; (8007a44 <USBH_HID_KeybdInit+0x98>)
 80079f4:	71da      	strb	r2, [r3, #7]
  
  
  for(x=0; x< (sizeof(keybd_report_data)/sizeof(uint32_t)); x++)
 80079f6:	2300      	movs	r3, #0
 80079f8:	60fb      	str	r3, [r7, #12]
 80079fa:	e007      	b.n	8007a0c <USBH_HID_KeybdInit+0x60>
  {
    keybd_report_data[x]=0;
 80079fc:	4a12      	ldr	r2, [pc, #72]	; (8007a48 <USBH_HID_KeybdInit+0x9c>)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2100      	movs	r1, #0
 8007a02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(x=0; x< (sizeof(keybd_report_data)/sizeof(uint32_t)); x++)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d9f4      	bls.n	80079fc <USBH_HID_KeybdInit+0x50>
  }
  
  if(HID_Handle->length > (sizeof(keybd_report_data)/sizeof(uint32_t)))
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	8b1b      	ldrh	r3, [r3, #24]
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d902      	bls.n	8007a20 <USBH_HID_KeybdInit+0x74>
  {
    HID_Handle->length = (sizeof(keybd_report_data)/sizeof(uint32_t));
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t*)keybd_report_data;
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	4a09      	ldr	r2, [pc, #36]	; (8007a48 <USBH_HID_KeybdInit+0x9c>)
 8007a24:	615a      	str	r2, [r3, #20]
  fifo_init(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	f103 0008 	add.w	r0, r3, #8
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8007a32:	2250      	movs	r2, #80	; 0x50
 8007a34:	4619      	mov	r1, r3
 8007a36:	f7fd ffe5 	bl	8005a04 <fifo_init>
  
  return USBH_OK;    
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	20000260 	.word	0x20000260
 8007a48:	20000258 	.word	0x20000258

08007a4c <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  if(USBH_HID_KeybdDecode(phost) == USBH_OK)
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f80d 	bl	8007a74 <USBH_HID_KeybdDecode>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <USBH_HID_GetKeybdInfo+0x18>
 {
  return &keybd_info;
 8007a60:	4b03      	ldr	r3, [pc, #12]	; (8007a70 <USBH_HID_GetKeybdInfo+0x24>)
 8007a62:	e000      	b.n	8007a66 <USBH_HID_GetKeybdInfo+0x1a>
 }
 else
 {
  return NULL; 
 8007a64:	2300      	movs	r3, #0
 }  
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	20000260 	.word	0x20000260

08007a74 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 8007a74:	b590      	push	{r4, r7, lr}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint8_t x;
  
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	60bb      	str	r3, [r7, #8]
  if(HID_Handle->length == 0)
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	8b1b      	ldrh	r3, [r3, #24]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d101      	bne.n	8007a92 <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 8007a8e:	2302      	movs	r3, #2
 8007a90:	e065      	b.n	8007b5e <USBH_HID_KeybdDecode+0xea>
  }
  /*Fill report */
  if(fifo_read(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	f103 0008 	add.w	r0, r3, #8
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	8b1b      	ldrh	r3, [r3, #24]
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	4932      	ldr	r1, [pc, #200]	; (8007b68 <USBH_HID_KeybdDecode+0xf4>)
 8007aa0:	f7fd ffcc 	bl	8005a3c <fifo_read>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	8b1b      	ldrh	r3, [r3, #24]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d155      	bne.n	8007b5c <USBH_HID_KeybdDecode+0xe8>
  {
    
    keybd_info.lctrl=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0);
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	482e      	ldr	r0, [pc, #184]	; (8007b6c <USBH_HID_KeybdDecode+0xf8>)
 8007ab4:	f000 f8a6 	bl	8007c04 <HID_ReadItem>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	4b2c      	ldr	r3, [pc, #176]	; (8007b70 <USBH_HID_KeybdDecode+0xfc>)
 8007abe:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0);
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	482c      	ldr	r0, [pc, #176]	; (8007b74 <USBH_HID_KeybdDecode+0x100>)
 8007ac4:	f000 f89e 	bl	8007c04 <HID_ReadItem>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	4b28      	ldr	r3, [pc, #160]	; (8007b70 <USBH_HID_KeybdDecode+0xfc>)
 8007ace:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0);
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	4829      	ldr	r0, [pc, #164]	; (8007b78 <USBH_HID_KeybdDecode+0x104>)
 8007ad4:	f000 f896 	bl	8007c04 <HID_ReadItem>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	b2da      	uxtb	r2, r3
 8007adc:	4b24      	ldr	r3, [pc, #144]	; (8007b70 <USBH_HID_KeybdDecode+0xfc>)
 8007ade:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0);
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	4826      	ldr	r0, [pc, #152]	; (8007b7c <USBH_HID_KeybdDecode+0x108>)
 8007ae4:	f000 f88e 	bl	8007c04 <HID_ReadItem>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	b2da      	uxtb	r2, r3
 8007aec:	4b20      	ldr	r3, [pc, #128]	; (8007b70 <USBH_HID_KeybdDecode+0xfc>)
 8007aee:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0);
 8007af0:	2100      	movs	r1, #0
 8007af2:	4823      	ldr	r0, [pc, #140]	; (8007b80 <USBH_HID_KeybdDecode+0x10c>)
 8007af4:	f000 f886 	bl	8007c04 <HID_ReadItem>
 8007af8:	4603      	mov	r3, r0
 8007afa:	b2da      	uxtb	r2, r3
 8007afc:	4b1c      	ldr	r3, [pc, #112]	; (8007b70 <USBH_HID_KeybdDecode+0xfc>)
 8007afe:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0);
 8007b00:	2100      	movs	r1, #0
 8007b02:	4820      	ldr	r0, [pc, #128]	; (8007b84 <USBH_HID_KeybdDecode+0x110>)
 8007b04:	f000 f87e 	bl	8007c04 <HID_ReadItem>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	4b18      	ldr	r3, [pc, #96]	; (8007b70 <USBH_HID_KeybdDecode+0xfc>)
 8007b0e:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0);
 8007b10:	2100      	movs	r1, #0
 8007b12:	481d      	ldr	r0, [pc, #116]	; (8007b88 <USBH_HID_KeybdDecode+0x114>)
 8007b14:	f000 f876 	bl	8007c04 <HID_ReadItem>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	b2da      	uxtb	r2, r3
 8007b1c:	4b14      	ldr	r3, [pc, #80]	; (8007b70 <USBH_HID_KeybdDecode+0xfc>)
 8007b1e:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0);
 8007b20:	2100      	movs	r1, #0
 8007b22:	481a      	ldr	r0, [pc, #104]	; (8007b8c <USBH_HID_KeybdDecode+0x118>)
 8007b24:	f000 f86e 	bl	8007c04 <HID_ReadItem>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	4b10      	ldr	r3, [pc, #64]	; (8007b70 <USBH_HID_KeybdDecode+0xfc>)
 8007b2e:	721a      	strb	r2, [r3, #8]
    
    for(x=0; x < sizeof(keybd_info.keys); x++)
 8007b30:	2300      	movs	r3, #0
 8007b32:	73fb      	strb	r3, [r7, #15]
 8007b34:	e00d      	b.n	8007b52 <USBH_HID_KeybdDecode+0xde>
    {    
      keybd_info.keys[x]=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 8007b36:	7bfc      	ldrb	r4, [r7, #15]
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	4814      	ldr	r0, [pc, #80]	; (8007b90 <USBH_HID_KeybdDecode+0x11c>)
 8007b3e:	f000 f861 	bl	8007c04 <HID_ReadItem>
 8007b42:	4603      	mov	r3, r0
 8007b44:	b2da      	uxtb	r2, r3
 8007b46:	4b0a      	ldr	r3, [pc, #40]	; (8007b70 <USBH_HID_KeybdDecode+0xfc>)
 8007b48:	4423      	add	r3, r4
 8007b4a:	725a      	strb	r2, [r3, #9]
    for(x=0; x < sizeof(keybd_info.keys); x++)
 8007b4c:	7bfb      	ldrb	r3, [r7, #15]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	73fb      	strb	r3, [r7, #15]
 8007b52:	7bfb      	ldrb	r3, [r7, #15]
 8007b54:	2b05      	cmp	r3, #5
 8007b56:	d9ee      	bls.n	8007b36 <USBH_HID_KeybdDecode+0xc2>
    }
    
    return USBH_OK; 
 8007b58:	2300      	movs	r3, #0
 8007b5a:	e000      	b.n	8007b5e <USBH_HID_KeybdDecode+0xea>
  }
  return   USBH_FAIL;  
 8007b5c:	2302      	movs	r3, #2
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd90      	pop	{r4, r7, pc}
 8007b66:	bf00      	nop
 8007b68:	20000258 	.word	0x20000258
 8007b6c:	0800c078 	.word	0x0800c078
 8007b70:	20000260 	.word	0x20000260
 8007b74:	0800c098 	.word	0x0800c098
 8007b78:	0800c0b8 	.word	0x0800c0b8
 8007b7c:	0800c0d8 	.word	0x0800c0d8
 8007b80:	0800c0f8 	.word	0x0800c0f8
 8007b84:	0800c118 	.word	0x0800c118
 8007b88:	0800c138 	.word	0x0800c138
 8007b8c:	0800c158 	.word	0x0800c158
 8007b90:	0800c178 	.word	0x0800c178

08007b94 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8007ba2:	69db      	ldr	r3, [r3, #28]
 8007ba4:	60fb      	str	r3, [r7, #12]

  mouse_info.x=0;
 8007ba6:	4b15      	ldr	r3, [pc, #84]	; (8007bfc <USBH_HID_MouseInit+0x68>)
 8007ba8:	2200      	movs	r2, #0
 8007baa:	701a      	strb	r2, [r3, #0]
  mouse_info.y=0;
 8007bac:	4b13      	ldr	r3, [pc, #76]	; (8007bfc <USBH_HID_MouseInit+0x68>)
 8007bae:	2200      	movs	r2, #0
 8007bb0:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0]=0;
 8007bb2:	4b12      	ldr	r3, [pc, #72]	; (8007bfc <USBH_HID_MouseInit+0x68>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1]=0;
 8007bb8:	4b10      	ldr	r3, [pc, #64]	; (8007bfc <USBH_HID_MouseInit+0x68>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2]=0;
 8007bbe:	4b0f      	ldr	r3, [pc, #60]	; (8007bfc <USBH_HID_MouseInit+0x68>)
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	711a      	strb	r2, [r3, #4]
  
  mouse_report_data[0]=0;
 8007bc4:	4b0e      	ldr	r3, [pc, #56]	; (8007c00 <USBH_HID_MouseInit+0x6c>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	601a      	str	r2, [r3, #0]
  
  if(HID_Handle->length > sizeof(mouse_report_data))
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	8b1b      	ldrh	r3, [r3, #24]
 8007bce:	2b04      	cmp	r3, #4
 8007bd0:	d902      	bls.n	8007bd8 <USBH_HID_MouseInit+0x44>
  {
    HID_Handle->length = sizeof(mouse_report_data);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2204      	movs	r2, #4
 8007bd6:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)mouse_report_data;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4a09      	ldr	r2, [pc, #36]	; (8007c00 <USBH_HID_MouseInit+0x6c>)
 8007bdc:	615a      	str	r2, [r3, #20]
  fifo_init(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f103 0008 	add.w	r0, r3, #8
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8007bea:	2228      	movs	r2, #40	; 0x28
 8007bec:	4619      	mov	r1, r3
 8007bee:	f7fd ff09 	bl	8005a04 <fifo_init>

  return USBH_OK;  
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	20000270 	.word	0x20000270
 8007c00:	20000278 	.word	0x20000278

08007c04 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
* @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b089      	sub	sp, #36	; 0x24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	70fb      	strb	r3, [r7, #3]
  uint32_t val=0;
 8007c10:	2300      	movs	r3, #0
 8007c12:	61fb      	str	r3, [r7, #28]
  uint32_t x=0;
 8007c14:	2300      	movs	r3, #0
 8007c16:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data=ri->data;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	617b      	str	r3, [r7, #20]
  uint8_t shift=ri->shift;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	7a1b      	ldrb	r3, [r3, #8]
 8007c22:	74fb      	strb	r3, [r7, #19]
  
  /* get the logical value of the item */
  
  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	7a5b      	ldrb	r3, [r3, #9]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01a      	beq.n	8007c62 <HID_ReadItem+0x5e>
  { 
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	7a5b      	ldrb	r3, [r3, #9]
 8007c30:	78fa      	ldrb	r2, [r7, #3]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d301      	bcc.n	8007c3a <HID_ReadItem+0x36>
    {
      return(0);
 8007c36:	2300      	movs	r3, #0
 8007c38:	e07a      	b.n	8007d30 <HID_ReadItem+0x12c>
    }
    
    /* calculate bit offset */
    bofs = ndx*ri->size;
 8007c3a:	78fb      	ldrb	r3, [r7, #3]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	6852      	ldr	r2, [r2, #4]
 8007c40:	fb02 f303 	mul.w	r3, r2, r3
 8007c44:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 8007c46:	7cfb      	ldrb	r3, [r7, #19]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */    
    data+=bofs/8;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	08db      	lsrs	r3, r3, #3
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	4413      	add	r3, r2
 8007c56:	617b      	str	r3, [r7, #20]
    shift=(uint8_t)(bofs%8);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	f003 0307 	and.w	r3, r3, #7
 8007c60:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for(x=0; x < ((ri->size & 0x7) ? (ri->size/8)+1 : (ri->size/8)); x++)
 8007c62:	2300      	movs	r3, #0
 8007c64:	61bb      	str	r3, [r7, #24]
 8007c66:	e00a      	b.n	8007c7e <HID_ReadItem+0x7a>
  {
    val=(uint32_t)(*data << (x*8));
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	00db      	lsls	r3, r3, #3
 8007c72:	fa02 f303 	lsl.w	r3, r2, r3
 8007c76:	61fb      	str	r3, [r7, #28]
  for(x=0; x < ((ri->size & 0x7) ? (ri->size/8)+1 : (ri->size/8)); x++)
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	61bb      	str	r3, [r7, #24]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f003 0307 	and.w	r3, r3, #7
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d004      	beq.n	8007c94 <HID_ReadItem+0x90>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	08db      	lsrs	r3, r3, #3
 8007c90:	3301      	adds	r3, #1
 8007c92:	e002      	b.n	8007c9a <HID_ReadItem+0x96>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	08db      	lsrs	r3, r3, #3
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d8e3      	bhi.n	8007c68 <HID_ReadItem+0x64>
  }    
  val=(val >> shift) & ((1<<ri->size)-1);
 8007ca0:	7cfb      	ldrb	r3, [r7, #19]
 8007ca2:	69fa      	ldr	r2, [r7, #28]
 8007ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	6852      	ldr	r2, [r2, #4]
 8007cac:	2101      	movs	r1, #1
 8007cae:	fa01 f202 	lsl.w	r2, r1, r2
 8007cb2:	3a01      	subs	r2, #1
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	61fb      	str	r3, [r7, #28]
  
  if (val < ri->logical_min || val > ri->logical_max)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68da      	ldr	r2, [r3, #12]
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d804      	bhi.n	8007ccc <HID_ReadItem+0xc8>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	691a      	ldr	r2, [r3, #16]
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d201      	bcs.n	8007cd0 <HID_ReadItem+0xcc>
  {
    return(0);
 8007ccc:	2300      	movs	r3, #0
 8007cce:	e02f      	b.n	8007d30 <HID_ReadItem+0x12c>
  }
  
  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign) && (val & (1<<(ri->size-1))))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	7a9b      	ldrb	r3, [r3, #10]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d020      	beq.n	8007d1a <HID_ReadItem+0x116>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	2201      	movs	r2, #1
 8007ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	4013      	ands	r3, r2
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d015      	beq.n	8007d1a <HID_ReadItem+0x116>
  {
    /* yes, so sign extend value to 32 bits. */
    int vs=(int)((-1 & ~((1<<(ri->size))-1)) | val);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf8:	425b      	negs	r3, r3
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	60bb      	str	r3, [r7, #8]
    
    if(ri->resolution == 1)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d101      	bne.n	8007d0e <HID_ReadItem+0x10a>
    {
      return((uint32_t)vs);
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	e010      	b.n	8007d30 <HID_ReadItem+0x12c>
    }
    return((uint32_t)(vs*ri->resolution));
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	69db      	ldr	r3, [r3, #28]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	fb02 f303 	mul.w	r3, r2, r3
 8007d18:	e00a      	b.n	8007d30 <HID_ReadItem+0x12c>
  }
  else
  {
    if(ri->resolution == 1)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d101      	bne.n	8007d26 <HID_ReadItem+0x122>
    {
      return(val);
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	e004      	b.n	8007d30 <HID_ReadItem+0x12c>
    }
    return(val*ri->resolution);    
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	69fa      	ldr	r2, [r7, #28]
 8007d2c:	fb02 f303 	mul.w	r3, r2, r3
  }  
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3724      	adds	r7, #36	; 0x24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <DetectButton>:
/** @defgroup USBH_XPAD_CORE_Private_Functions
* @{
*/

uint64_t DetectButton()
{
 8007d3c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d40:	b086      	sub	sp, #24
 8007d42:	af00      	add	r7, sp, #0
    uint64_t buttons_and_triggers = buttons;
 8007d44:	4b53      	ldr	r3, [pc, #332]	; (8007e94 <DetectButton+0x158>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f04f 0400 	mov.w	r4, #0
 8007d4c:	e9c7 3404 	strd	r3, r4, [r7, #16]

    if(Lt > TRIGGER_THRESHOLD)
 8007d50:	4b51      	ldr	r3, [pc, #324]	; (8007e98 <DetectButton+0x15c>)
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	2b05      	cmp	r3, #5
 8007d56:	d90f      	bls.n	8007d78 <DetectButton+0x3c>
	{
		buttons_and_triggers |= LT_MASK;
 8007d58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d5c:	f04f 0400 	mov.w	r4, #0
 8007d60:	4619      	mov	r1, r3
 8007d62:	4622      	mov	r2, r4
 8007d64:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007d68:	ea41 0103 	orr.w	r1, r1, r3
 8007d6c:	ea42 0204 	orr.w	r2, r2, r4
 8007d70:	460b      	mov	r3, r1
 8007d72:	4614      	mov	r4, r2
 8007d74:	e9c7 3404 	strd	r3, r4, [r7, #16]
	}
	if(Rt > TRIGGER_THRESHOLD)
 8007d78:	4b48      	ldr	r3, [pc, #288]	; (8007e9c <DetectButton+0x160>)
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	2b05      	cmp	r3, #5
 8007d7e:	d90f      	bls.n	8007da0 <DetectButton+0x64>
	{
		buttons_and_triggers |= RT_MASK;
 8007d80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d84:	f04f 0400 	mov.w	r4, #0
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4622      	mov	r2, r4
 8007d8c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007d90:	ea41 0103 	orr.w	r1, r1, r3
 8007d94:	ea42 0204 	orr.w	r2, r2, r4
 8007d98:	460b      	mov	r3, r1
 8007d9a:	4614      	mov	r4, r2
 8007d9c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	}

	// bit smearing so all bits to the right of the first 1 are also 1
	buttons_and_triggers |= buttons_and_triggers >> 32;
 8007da0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007da4:	0023      	movs	r3, r4
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	2300      	movs	r3, #0
 8007daa:	607b      	str	r3, [r7, #4]
 8007dac:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007db0:	e897 0006 	ldmia.w	r7, {r1, r2}
 8007db4:	ea41 0103 	orr.w	r1, r1, r3
 8007db8:	ea42 0204 	orr.w	r2, r2, r4
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	4614      	mov	r4, r2
 8007dc0:	e9c7 3404 	strd	r3, r4, [r7, #16]
	buttons_and_triggers |= buttons_and_triggers >> 16;
 8007dc4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007dc8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007dcc:	ea4a 4a04 	orr.w	sl, sl, r4, lsl #16
 8007dd0:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8007dd4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007dd8:	ea43 030a 	orr.w	r3, r3, sl
 8007ddc:	ea44 040b 	orr.w	r4, r4, fp
 8007de0:	e9c7 3404 	strd	r3, r4, [r7, #16]
	buttons_and_triggers |= buttons_and_triggers >> 8;
 8007de4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007de8:	ea4f 2813 	mov.w	r8, r3, lsr #8
 8007dec:	ea48 6804 	orr.w	r8, r8, r4, lsl #24
 8007df0:	ea4f 2914 	mov.w	r9, r4, lsr #8
 8007df4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007df8:	ea43 0308 	orr.w	r3, r3, r8
 8007dfc:	ea44 0409 	orr.w	r4, r4, r9
 8007e00:	e9c7 3404 	strd	r3, r4, [r7, #16]
	buttons_and_triggers |= buttons_and_triggers >> 4;
 8007e04:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007e08:	091d      	lsrs	r5, r3, #4
 8007e0a:	ea45 7504 	orr.w	r5, r5, r4, lsl #28
 8007e0e:	0926      	lsrs	r6, r4, #4
 8007e10:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007e14:	ea43 0305 	orr.w	r3, r3, r5
 8007e18:	ea44 0406 	orr.w	r4, r4, r6
 8007e1c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	buttons_and_triggers |= buttons_and_triggers >> 2;
 8007e20:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007e24:	089a      	lsrs	r2, r3, #2
 8007e26:	60ba      	str	r2, [r7, #8]
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	ea42 7284 	orr.w	r2, r2, r4, lsl #30
 8007e2e:	60ba      	str	r2, [r7, #8]
 8007e30:	08a3      	lsrs	r3, r4, #2
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007e38:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007e3c:	ea41 0103 	orr.w	r1, r1, r3
 8007e40:	ea42 0204 	orr.w	r2, r2, r4
 8007e44:	460b      	mov	r3, r1
 8007e46:	4614      	mov	r4, r2
 8007e48:	e9c7 3404 	strd	r3, r4, [r7, #16]
	buttons_and_triggers |= buttons_and_triggers >> 1;
 8007e4c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007e50:	0864      	lsrs	r4, r4, #1
 8007e52:	ea4f 0333 	mov.w	r3, r3, rrx
 8007e56:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007e5a:	ea43 0301 	orr.w	r3, r3, r1
 8007e5e:	ea44 0402 	orr.w	r4, r4, r2
 8007e62:	e9c7 3404 	strd	r3, r4, [r7, #16]

	// only leave the highest 1 set
	buttons_and_triggers ^= buttons_and_triggers >> 1;
 8007e66:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007e6a:	0864      	lsrs	r4, r4, #1
 8007e6c:	ea4f 0333 	mov.w	r3, r3, rrx
 8007e70:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007e74:	ea83 0301 	eor.w	r3, r3, r1
 8007e78:	ea84 0402 	eor.w	r4, r4, r2
 8007e7c:	e9c7 3404 	strd	r3, r4, [r7, #16]

	// now it is the same as the bitmask we want to return
	return buttons_and_triggers;
 8007e80:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	4621      	mov	r1, r4
 8007e88:	3718      	adds	r7, #24
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	2000014c 	.word	0x2000014c
 8007e98:	20000106 	.word	0x20000106
 8007e9c:	20000107 	.word	0x20000107

08007ea0 <parseMessage>:

void parseMessage(USBH_HandleTypeDef *phost)
{
 8007ea0:	b590      	push	{r4, r7, lr}
 8007ea2:	b09d      	sub	sp, #116	; 0x74
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
	XPAD_HandleTypeDef *XPAD_Handle =  (XPAD_HandleTypeDef *) phost->pActiveClass->pData;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8007eae:	69db      	ldr	r3, [r3, #28]
 8007eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint8_t *data = report;
 8007eb2:	4b62      	ldr	r3, [pc, #392]	; (800803c <parseMessage+0x19c>)
 8007eb4:	66fb      	str	r3, [r7, #108]	; 0x6c

    switch (XPAD_Handle->xpad_type) {
 8007eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	f201 8052 	bhi.w	8008f68 <parseMessage+0x10c8>
 8007ec4:	a201      	add	r2, pc, #4	; (adr r2, 8007ecc <parseMessage+0x2c>)
 8007ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eca:	bf00      	nop
 8007ecc:	08007edd 	.word	0x08007edd
 8007ed0:	08007fa7 	.word	0x08007fa7
 8007ed4:	08007fad 	.word	0x08007fad
 8007ed8:	0800805d 	.word	0x0800805d
    case XPAD_ORIGINAL:
        buttons = ((uint32_t)report[3] << 8) | report[2];
 8007edc:	4b57      	ldr	r3, [pc, #348]	; (800803c <parseMessage+0x19c>)
 8007ede:	78db      	ldrb	r3, [r3, #3]
 8007ee0:	021b      	lsls	r3, r3, #8
 8007ee2:	4a56      	ldr	r2, [pc, #344]	; (800803c <parseMessage+0x19c>)
 8007ee4:	7892      	ldrb	r2, [r2, #2]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	4a55      	ldr	r2, [pc, #340]	; (8008040 <parseMessage+0x1a0>)
 8007eea:	6013      	str	r3, [r2, #0]
        if (report[4]) buttons |= XPAD_PAD_A;
 8007eec:	4b53      	ldr	r3, [pc, #332]	; (800803c <parseMessage+0x19c>)
 8007eee:	791b      	ldrb	r3, [r3, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d005      	beq.n	8007f00 <parseMessage+0x60>
 8007ef4:	4b52      	ldr	r3, [pc, #328]	; (8008040 <parseMessage+0x1a0>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007efc:	4a50      	ldr	r2, [pc, #320]	; (8008040 <parseMessage+0x1a0>)
 8007efe:	6013      	str	r3, [r2, #0]
        if (report[5]) buttons |= XPAD_PAD_B;
 8007f00:	4b4e      	ldr	r3, [pc, #312]	; (800803c <parseMessage+0x19c>)
 8007f02:	795b      	ldrb	r3, [r3, #5]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d005      	beq.n	8007f14 <parseMessage+0x74>
 8007f08:	4b4d      	ldr	r3, [pc, #308]	; (8008040 <parseMessage+0x1a0>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007f10:	4a4b      	ldr	r2, [pc, #300]	; (8008040 <parseMessage+0x1a0>)
 8007f12:	6013      	str	r3, [r2, #0]
        if (report[6]) buttons |= XPAD_PAD_X;
 8007f14:	4b49      	ldr	r3, [pc, #292]	; (800803c <parseMessage+0x19c>)
 8007f16:	799b      	ldrb	r3, [r3, #6]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d005      	beq.n	8007f28 <parseMessage+0x88>
 8007f1c:	4b48      	ldr	r3, [pc, #288]	; (8008040 <parseMessage+0x1a0>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f24:	4a46      	ldr	r2, [pc, #280]	; (8008040 <parseMessage+0x1a0>)
 8007f26:	6013      	str	r3, [r2, #0]
        if (report[7]) buttons |= XPAD_PAD_Y;
 8007f28:	4b44      	ldr	r3, [pc, #272]	; (800803c <parseMessage+0x19c>)
 8007f2a:	79db      	ldrb	r3, [r3, #7]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d005      	beq.n	8007f3c <parseMessage+0x9c>
 8007f30:	4b43      	ldr	r3, [pc, #268]	; (8008040 <parseMessage+0x1a0>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f38:	4a41      	ldr	r2, [pc, #260]	; (8008040 <parseMessage+0x1a0>)
 8007f3a:	6013      	str	r3, [r2, #0]
        trigger_l = report[10];
 8007f3c:	4b3f      	ldr	r3, [pc, #252]	; (800803c <parseMessage+0x19c>)
 8007f3e:	7a9a      	ldrb	r2, [r3, #10]
 8007f40:	4b40      	ldr	r3, [pc, #256]	; (8008044 <parseMessage+0x1a4>)
 8007f42:	701a      	strb	r2, [r3, #0]
        trigger_r = report[11];
 8007f44:	4b3d      	ldr	r3, [pc, #244]	; (800803c <parseMessage+0x19c>)
 8007f46:	7ada      	ldrb	r2, [r3, #11]
 8007f48:	4b3f      	ldr	r3, [pc, #252]	; (8008048 <parseMessage+0x1a8>)
 8007f4a:	701a      	strb	r2, [r3, #0]

        stick_lx = ((int16_t)report[13] << 8) | report[12];
 8007f4c:	4b3b      	ldr	r3, [pc, #236]	; (800803c <parseMessage+0x19c>)
 8007f4e:	7b5b      	ldrb	r3, [r3, #13]
 8007f50:	021b      	lsls	r3, r3, #8
 8007f52:	b21a      	sxth	r2, r3
 8007f54:	4b39      	ldr	r3, [pc, #228]	; (800803c <parseMessage+0x19c>)
 8007f56:	7b1b      	ldrb	r3, [r3, #12]
 8007f58:	b21b      	sxth	r3, r3
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	b21a      	sxth	r2, r3
 8007f5e:	4b3b      	ldr	r3, [pc, #236]	; (800804c <parseMessage+0x1ac>)
 8007f60:	801a      	strh	r2, [r3, #0]
        stick_ly = ((int16_t)report[15] << 8) | report[14];
 8007f62:	4b36      	ldr	r3, [pc, #216]	; (800803c <parseMessage+0x19c>)
 8007f64:	7bdb      	ldrb	r3, [r3, #15]
 8007f66:	021b      	lsls	r3, r3, #8
 8007f68:	b21a      	sxth	r2, r3
 8007f6a:	4b34      	ldr	r3, [pc, #208]	; (800803c <parseMessage+0x19c>)
 8007f6c:	7b9b      	ldrb	r3, [r3, #14]
 8007f6e:	b21b      	sxth	r3, r3
 8007f70:	4313      	orrs	r3, r2
 8007f72:	b21a      	sxth	r2, r3
 8007f74:	4b36      	ldr	r3, [pc, #216]	; (8008050 <parseMessage+0x1b0>)
 8007f76:	801a      	strh	r2, [r3, #0]
        stick_rx = ((int16_t)report[17] << 8) | report[16];
 8007f78:	4b30      	ldr	r3, [pc, #192]	; (800803c <parseMessage+0x19c>)
 8007f7a:	7c5b      	ldrb	r3, [r3, #17]
 8007f7c:	021b      	lsls	r3, r3, #8
 8007f7e:	b21a      	sxth	r2, r3
 8007f80:	4b2e      	ldr	r3, [pc, #184]	; (800803c <parseMessage+0x19c>)
 8007f82:	7c1b      	ldrb	r3, [r3, #16]
 8007f84:	b21b      	sxth	r3, r3
 8007f86:	4313      	orrs	r3, r2
 8007f88:	b21a      	sxth	r2, r3
 8007f8a:	4b32      	ldr	r3, [pc, #200]	; (8008054 <parseMessage+0x1b4>)
 8007f8c:	801a      	strh	r2, [r3, #0]
        stick_ry = ((int16_t)report[19] << 8) | report[18];
 8007f8e:	4b2b      	ldr	r3, [pc, #172]	; (800803c <parseMessage+0x19c>)
 8007f90:	7cdb      	ldrb	r3, [r3, #19]
 8007f92:	021b      	lsls	r3, r3, #8
 8007f94:	b21a      	sxth	r2, r3
 8007f96:	4b29      	ldr	r3, [pc, #164]	; (800803c <parseMessage+0x19c>)
 8007f98:	7c9b      	ldrb	r3, [r3, #18]
 8007f9a:	b21b      	sxth	r3, r3
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	b21a      	sxth	r2, r3
 8007fa0:	4b2d      	ldr	r3, [pc, #180]	; (8008058 <parseMessage+0x1b8>)
 8007fa2:	801a      	strh	r2, [r3, #0]
        break;
 8007fa4:	e0d3      	b.n	800814e <parseMessage+0x2ae>
    case XPAD_360_WIRELESS:
        data += 4;
 8007fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fa8:	3304      	adds	r3, #4
 8007faa:	66fb      	str	r3, [r7, #108]	; 0x6c
    case XPAD_360_WIRED:
        buttons = ((uint32_t)data[3] << 8) | data[2];
 8007fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fae:	3303      	adds	r3, #3
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	021b      	lsls	r3, r3, #8
 8007fb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007fb6:	3202      	adds	r2, #2
 8007fb8:	7812      	ldrb	r2, [r2, #0]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	4a20      	ldr	r2, [pc, #128]	; (8008040 <parseMessage+0x1a0>)
 8007fbe:	6013      	str	r3, [r2, #0]
        trigger_l = data[4];
 8007fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fc2:	791a      	ldrb	r2, [r3, #4]
 8007fc4:	4b1f      	ldr	r3, [pc, #124]	; (8008044 <parseMessage+0x1a4>)
 8007fc6:	701a      	strb	r2, [r3, #0]
        trigger_r = data[5];
 8007fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fca:	795a      	ldrb	r2, [r3, #5]
 8007fcc:	4b1e      	ldr	r3, [pc, #120]	; (8008048 <parseMessage+0x1a8>)
 8007fce:	701a      	strb	r2, [r3, #0]

        stick_lx = ((int16_t)data[7] << 8) | data[6];
 8007fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fd2:	3307      	adds	r3, #7
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	021b      	lsls	r3, r3, #8
 8007fd8:	b21a      	sxth	r2, r3
 8007fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fdc:	3306      	adds	r3, #6
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	b21b      	sxth	r3, r3
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	b21a      	sxth	r2, r3
 8007fe6:	4b19      	ldr	r3, [pc, #100]	; (800804c <parseMessage+0x1ac>)
 8007fe8:	801a      	strh	r2, [r3, #0]
        stick_ly = ((int16_t)data[9] << 8) | data[8];
 8007fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fec:	3309      	adds	r3, #9
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	021b      	lsls	r3, r3, #8
 8007ff2:	b21a      	sxth	r2, r3
 8007ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	b21b      	sxth	r3, r3
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	b21a      	sxth	r2, r3
 8008000:	4b13      	ldr	r3, [pc, #76]	; (8008050 <parseMessage+0x1b0>)
 8008002:	801a      	strh	r2, [r3, #0]
        stick_rx = ((int16_t)data[11] << 8) | data[10];
 8008004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008006:	330b      	adds	r3, #11
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	021b      	lsls	r3, r3, #8
 800800c:	b21a      	sxth	r2, r3
 800800e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008010:	330a      	adds	r3, #10
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	b21b      	sxth	r3, r3
 8008016:	4313      	orrs	r3, r2
 8008018:	b21a      	sxth	r2, r3
 800801a:	4b0e      	ldr	r3, [pc, #56]	; (8008054 <parseMessage+0x1b4>)
 800801c:	801a      	strh	r2, [r3, #0]
        stick_ry = ((int16_t)data[13] << 8) | data[12];
 800801e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008020:	330d      	adds	r3, #13
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	021b      	lsls	r3, r3, #8
 8008026:	b21a      	sxth	r2, r3
 8008028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800802a:	330c      	adds	r3, #12
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	b21b      	sxth	r3, r3
 8008030:	4313      	orrs	r3, r2
 8008032:	b21a      	sxth	r2, r3
 8008034:	4b08      	ldr	r3, [pc, #32]	; (8008058 <parseMessage+0x1b8>)
 8008036:	801a      	strh	r2, [r3, #0]
        break;
 8008038:	e089      	b.n	800814e <parseMessage+0x2ae>
 800803a:	bf00      	nop
 800803c:	20000154 	.word	0x20000154
 8008040:	2000014c 	.word	0x2000014c
 8008044:	20000146 	.word	0x20000146
 8008048:	20000150 	.word	0x20000150
 800804c:	2000014a 	.word	0x2000014a
 8008050:	20000144 	.word	0x20000144
 8008054:	20000174 	.word	0x20000174
 8008058:	20000148 	.word	0x20000148
    case XPAD_XBONE:
        buttons = 0;
 800805c:	4bb0      	ldr	r3, [pc, #704]	; (8008320 <parseMessage+0x480>)
 800805e:	2200      	movs	r2, #0
 8008060:	601a      	str	r2, [r3, #0]
        buttons = (report[4] & 0x0C) << 2; // correctly place start and back
 8008062:	4bb0      	ldr	r3, [pc, #704]	; (8008324 <parseMessage+0x484>)
 8008064:	791b      	ldrb	r3, [r3, #4]
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800806c:	4aac      	ldr	r2, [pc, #688]	; (8008320 <parseMessage+0x480>)
 800806e:	6013      	str	r3, [r2, #0]
        buttons |= (report[4] & 0xF0) << 8; // correctly place AXYB
 8008070:	4bac      	ldr	r3, [pc, #688]	; (8008324 <parseMessage+0x484>)
 8008072:	791b      	ldrb	r3, [r3, #4]
 8008074:	021b      	lsls	r3, r3, #8
 8008076:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800807a:	4ba9      	ldr	r3, [pc, #676]	; (8008320 <parseMessage+0x480>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4313      	orrs	r3, r2
 8008080:	4aa7      	ldr	r2, [pc, #668]	; (8008320 <parseMessage+0x480>)
 8008082:	6013      	str	r3, [r2, #0]
        buttons |= report[5] & 0x0F; // correctly place DPad
 8008084:	4ba7      	ldr	r3, [pc, #668]	; (8008324 <parseMessage+0x484>)
 8008086:	795b      	ldrb	r3, [r3, #5]
 8008088:	f003 020f 	and.w	r2, r3, #15
 800808c:	4ba4      	ldr	r3, [pc, #656]	; (8008320 <parseMessage+0x480>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4313      	orrs	r3, r2
 8008092:	4aa3      	ldr	r2, [pc, #652]	; (8008320 <parseMessage+0x480>)
 8008094:	6013      	str	r3, [r2, #0]
        buttons |= (report[5] & 0x30) << 4; // correctly place bumpers
 8008096:	4ba3      	ldr	r3, [pc, #652]	; (8008324 <parseMessage+0x484>)
 8008098:	795b      	ldrb	r3, [r3, #5]
 800809a:	011b      	lsls	r3, r3, #4
 800809c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80080a0:	4b9f      	ldr	r3, [pc, #636]	; (8008320 <parseMessage+0x480>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	4a9e      	ldr	r2, [pc, #632]	; (8008320 <parseMessage+0x480>)
 80080a8:	6013      	str	r3, [r2, #0]
        buttons |= (report[5] & 0xC0); // correctly analog stick buttons
 80080aa:	4b9e      	ldr	r3, [pc, #632]	; (8008324 <parseMessage+0x484>)
 80080ac:	795b      	ldrb	r3, [r3, #5]
 80080ae:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80080b2:	4b9b      	ldr	r3, [pc, #620]	; (8008320 <parseMessage+0x480>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	4a99      	ldr	r2, [pc, #612]	; (8008320 <parseMessage+0x480>)
 80080ba:	6013      	str	r3, [r2, #0]


        trigger_l = (((uint32_t)report[7] << 8) | report[6]) >> 2; // max is 1024 instead of 256, so >> 2 to divide by 4
 80080bc:	4b99      	ldr	r3, [pc, #612]	; (8008324 <parseMessage+0x484>)
 80080be:	79db      	ldrb	r3, [r3, #7]
 80080c0:	021b      	lsls	r3, r3, #8
 80080c2:	4a98      	ldr	r2, [pc, #608]	; (8008324 <parseMessage+0x484>)
 80080c4:	7992      	ldrb	r2, [r2, #6]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	089b      	lsrs	r3, r3, #2
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	4b96      	ldr	r3, [pc, #600]	; (8008328 <parseMessage+0x488>)
 80080ce:	701a      	strb	r2, [r3, #0]
		trigger_r = (((uint32_t)report[9] << 8) | report[8]) >> 2; // max is 1024 instead of 256, so >> 2 to divide by 4
 80080d0:	4b94      	ldr	r3, [pc, #592]	; (8008324 <parseMessage+0x484>)
 80080d2:	7a5b      	ldrb	r3, [r3, #9]
 80080d4:	021b      	lsls	r3, r3, #8
 80080d6:	4a93      	ldr	r2, [pc, #588]	; (8008324 <parseMessage+0x484>)
 80080d8:	7a12      	ldrb	r2, [r2, #8]
 80080da:	4313      	orrs	r3, r2
 80080dc:	089b      	lsrs	r3, r3, #2
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	4b92      	ldr	r3, [pc, #584]	; (800832c <parseMessage+0x48c>)
 80080e2:	701a      	strb	r2, [r3, #0]

        stick_lx = ((int16_t)data[11] << 8) | data[10];
 80080e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080e6:	330b      	adds	r3, #11
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	021b      	lsls	r3, r3, #8
 80080ec:	b21a      	sxth	r2, r3
 80080ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f0:	330a      	adds	r3, #10
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	b21b      	sxth	r3, r3
 80080f6:	4313      	orrs	r3, r2
 80080f8:	b21a      	sxth	r2, r3
 80080fa:	4b8d      	ldr	r3, [pc, #564]	; (8008330 <parseMessage+0x490>)
 80080fc:	801a      	strh	r2, [r3, #0]
        stick_ly = ((int16_t)data[13] << 8) | data[12];
 80080fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008100:	330d      	adds	r3, #13
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	021b      	lsls	r3, r3, #8
 8008106:	b21a      	sxth	r2, r3
 8008108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800810a:	330c      	adds	r3, #12
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	b21b      	sxth	r3, r3
 8008110:	4313      	orrs	r3, r2
 8008112:	b21a      	sxth	r2, r3
 8008114:	4b87      	ldr	r3, [pc, #540]	; (8008334 <parseMessage+0x494>)
 8008116:	801a      	strh	r2, [r3, #0]
        stick_rx = ((int16_t)data[15] << 8) | data[14];
 8008118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800811a:	330f      	adds	r3, #15
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	021b      	lsls	r3, r3, #8
 8008120:	b21a      	sxth	r2, r3
 8008122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008124:	330e      	adds	r3, #14
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	b21b      	sxth	r3, r3
 800812a:	4313      	orrs	r3, r2
 800812c:	b21a      	sxth	r2, r3
 800812e:	4b82      	ldr	r3, [pc, #520]	; (8008338 <parseMessage+0x498>)
 8008130:	801a      	strh	r2, [r3, #0]
        stick_ry = ((int16_t)data[17] << 8) | data[16];
 8008132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008134:	3311      	adds	r3, #17
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	021b      	lsls	r3, r3, #8
 800813a:	b21a      	sxth	r2, r3
 800813c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800813e:	3310      	adds	r3, #16
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	b21b      	sxth	r3, r3
 8008144:	4313      	orrs	r3, r2
 8008146:	b21a      	sxth	r2, r3
 8008148:	4b7c      	ldr	r3, [pc, #496]	; (800833c <parseMessage+0x49c>)
 800814a:	801a      	strh	r2, [r3, #0]

        break;
 800814c:	bf00      	nop
    default:
        return;
    }

    // normalize the trigger values to be 10 max
    Lt=trigger_l*tN;
 800814e:	4b76      	ldr	r3, [pc, #472]	; (8008328 <parseMessage+0x488>)
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	ee07 3a90 	vmov	s15, r3
 8008156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800815a:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8008340 <parseMessage+0x4a0>
 800815e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008166:	edc7 7a00 	vstr	s15, [r7]
 800816a:	783b      	ldrb	r3, [r7, #0]
 800816c:	b2da      	uxtb	r2, r3
 800816e:	4b75      	ldr	r3, [pc, #468]	; (8008344 <parseMessage+0x4a4>)
 8008170:	701a      	strb	r2, [r3, #0]
    Rt=trigger_r*tN;
 8008172:	4b6e      	ldr	r3, [pc, #440]	; (800832c <parseMessage+0x48c>)
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	ee07 3a90 	vmov	s15, r3
 800817a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800817e:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8008340 <parseMessage+0x4a0>
 8008182:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800818a:	edc7 7a00 	vstr	s15, [r7]
 800818e:	783b      	ldrb	r3, [r7, #0]
 8008190:	b2da      	uxtb	r2, r3
 8008192:	4b6d      	ldr	r3, [pc, #436]	; (8008348 <parseMessage+0x4a8>)
 8008194:	701a      	strb	r2, [r3, #0]

	uint64_t buttons_and_triggers = buttons;
 8008196:	4b62      	ldr	r3, [pc, #392]	; (8008320 <parseMessage+0x480>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f04f 0400 	mov.w	r4, #0
 800819e:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

	if(Lt > TRIGGER_THRESHOLD)
 80081a2:	4b68      	ldr	r3, [pc, #416]	; (8008344 <parseMessage+0x4a4>)
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	2b05      	cmp	r3, #5
 80081a8:	d90b      	bls.n	80081c2 <parseMessage+0x322>
	{
		buttons_and_triggers |= LT_MASK;
 80081aa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80081ae:	f04f 0200 	mov.w	r2, #0
 80081b2:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80081b6:	ea43 0301 	orr.w	r3, r3, r1
 80081ba:	ea44 0402 	orr.w	r4, r4, r2
 80081be:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	}
	if(Rt > TRIGGER_THRESHOLD)
 80081c2:	4b61      	ldr	r3, [pc, #388]	; (8008348 <parseMessage+0x4a8>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b05      	cmp	r3, #5
 80081c8:	d90b      	bls.n	80081e2 <parseMessage+0x342>
	{
		buttons_and_triggers |= RT_MASK;
 80081ca:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80081ce:	f04f 0200 	mov.w	r2, #0
 80081d2:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80081d6:	ea43 0301 	orr.w	r3, r3, r1
 80081da:	ea44 0402 	orr.w	r4, r4, r2
 80081de:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	}

    if(state == NORMAL) //used to check state variable for changing controls
 80081e2:	4b5a      	ldr	r3, [pc, #360]	; (800834c <parseMessage+0x4ac>)
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f040 8561 	bne.w	8008cae <parseMessage+0xe0e>
    {
    	if(output_type == OUTPUT_N64)
 80081ec:	4b58      	ldr	r3, [pc, #352]	; (8008350 <parseMessage+0x4b0>)
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	f040 823b 	bne.w	800866c <parseMessage+0x7cc>
		{
			N64ControllerData new_data;
			memset(&new_data,0,4); // clear controller state
 80081f6:	f107 0314 	add.w	r3, r7, #20
 80081fa:	2204      	movs	r2, #4
 80081fc:	2100      	movs	r1, #0
 80081fe:	4618      	mov	r0, r3
 8008200:	f003 fe17 	bl	800be32 <memset>

			if(buttons_and_triggers & controls.XpadControls.up)
 8008204:	4a53      	ldr	r2, [pc, #332]	; (8008354 <parseMessage+0x4b4>)
 8008206:	6a13      	ldr	r3, [r2, #32]
 8008208:	6a54      	ldr	r4, [r2, #36]	; 0x24
 800820a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800820e:	ea03 0301 	and.w	r3, r3, r1
 8008212:	ea04 0402 	and.w	r4, r4, r2
 8008216:	4323      	orrs	r3, r4
 8008218:	d003      	beq.n	8008222 <parseMessage+0x382>
			{
				new_data.up = 1;
 800821a:	7d3b      	ldrb	r3, [r7, #20]
 800821c:	f043 0310 	orr.w	r3, r3, #16
 8008220:	753b      	strb	r3, [r7, #20]
			}
			if(buttons_and_triggers & controls.XpadControls.down)
 8008222:	4a4c      	ldr	r2, [pc, #304]	; (8008354 <parseMessage+0x4b4>)
 8008224:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8008226:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8008228:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800822c:	ea03 0301 	and.w	r3, r3, r1
 8008230:	ea04 0402 	and.w	r4, r4, r2
 8008234:	4323      	orrs	r3, r4
 8008236:	d003      	beq.n	8008240 <parseMessage+0x3a0>
			{
				new_data.down = 1;
 8008238:	7d3b      	ldrb	r3, [r7, #20]
 800823a:	f043 0320 	orr.w	r3, r3, #32
 800823e:	753b      	strb	r3, [r7, #20]
			}
			if(buttons_and_triggers & controls.XpadControls.left)
 8008240:	4a44      	ldr	r2, [pc, #272]	; (8008354 <parseMessage+0x4b4>)
 8008242:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008244:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8008246:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800824a:	ea03 0301 	and.w	r3, r3, r1
 800824e:	ea04 0402 	and.w	r4, r4, r2
 8008252:	4323      	orrs	r3, r4
 8008254:	d003      	beq.n	800825e <parseMessage+0x3be>
			{
				new_data.left = 1;
 8008256:	7d3b      	ldrb	r3, [r7, #20]
 8008258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800825c:	753b      	strb	r3, [r7, #20]
			}
			if(buttons_and_triggers & controls.XpadControls.right)
 800825e:	4a3d      	ldr	r2, [pc, #244]	; (8008354 <parseMessage+0x4b4>)
 8008260:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008262:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8008264:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008268:	ea03 0301 	and.w	r3, r3, r1
 800826c:	ea04 0402 	and.w	r4, r4, r2
 8008270:	4323      	orrs	r3, r4
 8008272:	d003      	beq.n	800827c <parseMessage+0x3dc>
			{
				new_data.right = 1;
 8008274:	7d3b      	ldrb	r3, [r7, #20]
 8008276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800827a:	753b      	strb	r3, [r7, #20]
			}
			if(buttons_and_triggers & controls.XpadControls.c_up)
 800827c:	4a35      	ldr	r2, [pc, #212]	; (8008354 <parseMessage+0x4b4>)
 800827e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008280:	6d54      	ldr	r4, [r2, #84]	; 0x54
 8008282:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008286:	ea03 0301 	and.w	r3, r3, r1
 800828a:	ea04 0402 	and.w	r4, r4, r2
 800828e:	4323      	orrs	r3, r4
 8008290:	d003      	beq.n	800829a <parseMessage+0x3fa>
			{
				new_data.c_up = 1;
 8008292:	7d7b      	ldrb	r3, [r7, #21]
 8008294:	f043 0310 	orr.w	r3, r3, #16
 8008298:	757b      	strb	r3, [r7, #21]
			}
			if(buttons_and_triggers & controls.XpadControls.c_down)
 800829a:	4a2e      	ldr	r2, [pc, #184]	; (8008354 <parseMessage+0x4b4>)
 800829c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800829e:	6dd4      	ldr	r4, [r2, #92]	; 0x5c
 80082a0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80082a4:	ea03 0301 	and.w	r3, r3, r1
 80082a8:	ea04 0402 	and.w	r4, r4, r2
 80082ac:	4323      	orrs	r3, r4
 80082ae:	d003      	beq.n	80082b8 <parseMessage+0x418>
			{
				new_data.c_down = 1;
 80082b0:	7d7b      	ldrb	r3, [r7, #21]
 80082b2:	f043 0320 	orr.w	r3, r3, #32
 80082b6:	757b      	strb	r3, [r7, #21]
			}
			if(buttons_and_triggers & controls.XpadControls.c_left)
 80082b8:	4a26      	ldr	r2, [pc, #152]	; (8008354 <parseMessage+0x4b4>)
 80082ba:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80082bc:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80082be:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80082c2:	ea03 0301 	and.w	r3, r3, r1
 80082c6:	ea04 0402 	and.w	r4, r4, r2
 80082ca:	4323      	orrs	r3, r4
 80082cc:	d003      	beq.n	80082d6 <parseMessage+0x436>
			{
				new_data.c_left = 1;
 80082ce:	7d7b      	ldrb	r3, [r7, #21]
 80082d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082d4:	757b      	strb	r3, [r7, #21]
			}
			if(buttons_and_triggers & controls.XpadControls.c_right)
 80082d6:	4a1f      	ldr	r2, [pc, #124]	; (8008354 <parseMessage+0x4b4>)
 80082d8:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80082da:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
 80082dc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80082e0:	ea03 0301 	and.w	r3, r3, r1
 80082e4:	ea04 0402 	and.w	r4, r4, r2
 80082e8:	4323      	orrs	r3, r4
 80082ea:	d003      	beq.n	80082f4 <parseMessage+0x454>
			{
				new_data.c_right = 1;
 80082ec:	7d7b      	ldrb	r3, [r7, #21]
 80082ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082f2:	757b      	strb	r3, [r7, #21]
			}
			if(buttons_and_triggers & controls.XpadControls.l)
 80082f4:	4a17      	ldr	r2, [pc, #92]	; (8008354 <parseMessage+0x4b4>)
 80082f6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80082f8:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80082fa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80082fe:	ea03 0301 	and.w	r3, r3, r1
 8008302:	ea04 0402 	and.w	r4, r4, r2
 8008306:	4323      	orrs	r3, r4
 8008308:	d003      	beq.n	8008312 <parseMessage+0x472>
			{
				new_data.l = 1;
 800830a:	7d7b      	ldrb	r3, [r7, #21]
 800830c:	f043 0304 	orr.w	r3, r3, #4
 8008310:	757b      	strb	r3, [r7, #21]
			}
			if(buttons_and_triggers & controls.XpadControls.r)
 8008312:	4a10      	ldr	r2, [pc, #64]	; (8008354 <parseMessage+0x4b4>)
 8008314:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8008316:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
 8008318:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800831c:	e01c      	b.n	8008358 <parseMessage+0x4b8>
 800831e:	bf00      	nop
 8008320:	2000014c 	.word	0x2000014c
 8008324:	20000154 	.word	0x20000154
 8008328:	20000146 	.word	0x20000146
 800832c:	20000150 	.word	0x20000150
 8008330:	2000014a 	.word	0x2000014a
 8008334:	20000144 	.word	0x20000144
 8008338:	20000174 	.word	0x20000174
 800833c:	20000148 	.word	0x20000148
 8008340:	3d20a0a1 	.word	0x3d20a0a1
 8008344:	20000106 	.word	0x20000106
 8008348:	20000107 	.word	0x20000107
 800834c:	2000010a 	.word	0x2000010a
 8008350:	2000011c 	.word	0x2000011c
 8008354:	20000284 	.word	0x20000284
 8008358:	ea03 0301 	and.w	r3, r3, r1
 800835c:	ea04 0402 	and.w	r4, r4, r2
 8008360:	4323      	orrs	r3, r4
 8008362:	d003      	beq.n	800836c <parseMessage+0x4cc>
			{
				new_data.r = 1;
 8008364:	7d7b      	ldrb	r3, [r7, #21]
 8008366:	f043 0308 	orr.w	r3, r3, #8
 800836a:	757b      	strb	r3, [r7, #21]
			}
			if(buttons_and_triggers & controls.XpadControls.z)
 800836c:	4ab6      	ldr	r2, [pc, #728]	; (8008648 <parseMessage+0x7a8>)
 800836e:	6913      	ldr	r3, [r2, #16]
 8008370:	6954      	ldr	r4, [r2, #20]
 8008372:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008376:	ea03 0301 	and.w	r3, r3, r1
 800837a:	ea04 0402 	and.w	r4, r4, r2
 800837e:	4323      	orrs	r3, r4
 8008380:	d003      	beq.n	800838a <parseMessage+0x4ea>
			{
				new_data.z = 1;
 8008382:	7d3b      	ldrb	r3, [r7, #20]
 8008384:	f043 0304 	orr.w	r3, r3, #4
 8008388:	753b      	strb	r3, [r7, #20]
			}
			if(buttons_and_triggers & controls.XpadControls.a)
 800838a:	4aaf      	ldr	r2, [pc, #700]	; (8008648 <parseMessage+0x7a8>)
 800838c:	6813      	ldr	r3, [r2, #0]
 800838e:	6854      	ldr	r4, [r2, #4]
 8008390:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008394:	ea03 0301 	and.w	r3, r3, r1
 8008398:	ea04 0402 	and.w	r4, r4, r2
 800839c:	4323      	orrs	r3, r4
 800839e:	d003      	beq.n	80083a8 <parseMessage+0x508>
			{
				new_data.a = 1;
 80083a0:	7d3b      	ldrb	r3, [r7, #20]
 80083a2:	f043 0301 	orr.w	r3, r3, #1
 80083a6:	753b      	strb	r3, [r7, #20]
			}
			if(buttons_and_triggers & controls.XpadControls.b)
 80083a8:	4aa7      	ldr	r2, [pc, #668]	; (8008648 <parseMessage+0x7a8>)
 80083aa:	6893      	ldr	r3, [r2, #8]
 80083ac:	68d4      	ldr	r4, [r2, #12]
 80083ae:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80083b2:	ea03 0301 	and.w	r3, r3, r1
 80083b6:	ea04 0402 	and.w	r4, r4, r2
 80083ba:	4323      	orrs	r3, r4
 80083bc:	d003      	beq.n	80083c6 <parseMessage+0x526>
			{
				new_data.b = 1;
 80083be:	7d3b      	ldrb	r3, [r7, #20]
 80083c0:	f043 0302 	orr.w	r3, r3, #2
 80083c4:	753b      	strb	r3, [r7, #20]
			}
			if(buttons_and_triggers & controls.XpadControls.start)
 80083c6:	4aa0      	ldr	r2, [pc, #640]	; (8008648 <parseMessage+0x7a8>)
 80083c8:	6993      	ldr	r3, [r2, #24]
 80083ca:	69d4      	ldr	r4, [r2, #28]
 80083cc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80083d0:	ea03 0301 	and.w	r3, r3, r1
 80083d4:	ea04 0402 	and.w	r4, r4, r2
 80083d8:	4323      	orrs	r3, r4
 80083da:	d003      	beq.n	80083e4 <parseMessage+0x544>
			{
				new_data.start = 1;
 80083dc:	7d3b      	ldrb	r3, [r7, #20]
 80083de:	f043 0308 	orr.w	r3, r3, #8
 80083e2:	753b      	strb	r3, [r7, #20]
			}

			// ----- begin nrage replication analog code -----
			const float N64_MAX = 127*(controls.XpadControls.range/100.0f);
 80083e4:	4b98      	ldr	r3, [pc, #608]	; (8008648 <parseMessage+0x7a8>)
 80083e6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80083ea:	ee07 3a90 	vmov	s15, r3
 80083ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80083f2:	eddf 6a96 	vldr	s13, [pc, #600]	; 800864c <parseMessage+0x7ac>
 80083f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80083fa:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8008650 <parseMessage+0x7b0>
 80083fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008402:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
			float deadzoneValue = (controls.XpadControls.deadzone/100.0f) * XPAD_MAX;
 8008406:	4b90      	ldr	r3, [pc, #576]	; (8008648 <parseMessage+0x7a8>)
 8008408:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800840c:	ee07 3a90 	vmov	s15, r3
 8008410:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008414:	eddf 6a8d 	vldr	s13, [pc, #564]	; 800864c <parseMessage+0x7ac>
 8008418:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800841c:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8008654 <parseMessage+0x7b4>
 8008420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008424:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
			float deadzoneRelation = XPAD_MAX / (XPAD_MAX - deadzoneValue);
 8008428:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8008654 <parseMessage+0x7b4>
 800842c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008430:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008434:	eddf 6a87 	vldr	s13, [pc, #540]	; 8008654 <parseMessage+0x7b4>
 8008438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800843c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

			float unscaled_result = 0;
 8008440:	f04f 0300 	mov.w	r3, #0
 8008444:	64fb      	str	r3, [r7, #76]	; 0x4c

			int16_t temp_stick_val = 0;
 8008446:	2300      	movs	r3, #0
 8008448:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

			if(stick_lx >= deadzoneValue) // positive = right
 800844c:	4b82      	ldr	r3, [pc, #520]	; (8008658 <parseMessage+0x7b8>)
 800844e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008452:	ee07 3a90 	vmov	s15, r3
 8008456:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800845a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800845e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008466:	db23      	blt.n	80084b0 <parseMessage+0x610>
			{
				unscaled_result = (stick_lx - deadzoneValue) * deadzoneRelation;
 8008468:	4b7b      	ldr	r3, [pc, #492]	; (8008658 <parseMessage+0x7b8>)
 800846a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800846e:	ee07 3a90 	vmov	s15, r3
 8008472:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008476:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800847a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800847e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008486:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
				LSX = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 800848a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800848e:	eddf 6a71 	vldr	s13, [pc, #452]	; 8008654 <parseMessage+0x7b4>
 8008492:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008496:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800849a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800849e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084a2:	edc7 7a00 	vstr	s15, [r7]
 80084a6:	783b      	ldrb	r3, [r7, #0]
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	4b6c      	ldr	r3, [pc, #432]	; (800865c <parseMessage+0x7bc>)
 80084ac:	701a      	strb	r2, [r3, #0]
 80084ae:	e041      	b.n	8008534 <parseMessage+0x694>
			}
			else if(stick_lx <= (-deadzoneValue)) // negative = left
 80084b0:	4b69      	ldr	r3, [pc, #420]	; (8008658 <parseMessage+0x7b8>)
 80084b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084b6:	ee07 3a90 	vmov	s15, r3
 80084ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80084be:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80084c2:	eef1 7a67 	vneg.f32	s15, s15
 80084c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80084ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ce:	d82e      	bhi.n	800852e <parseMessage+0x68e>
			{
				// just in case it's -32768 it cannot be negated. otherwise the 1 is negligible.
				temp_stick_val = -(stick_lx+1); // compute as positive, then negate at the end
 80084d0:	4b61      	ldr	r3, [pc, #388]	; (8008658 <parseMessage+0x7b8>)
 80084d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084d6:	43db      	mvns	r3, r3
 80084d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				unscaled_result = (temp_stick_val - deadzoneValue) * deadzoneRelation;
 80084dc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80084e0:	ee07 3a90 	vmov	s15, r3
 80084e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80084e8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80084ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80084f0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80084f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084f8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
				LSX = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 80084fc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008500:	eddf 6a54 	vldr	s13, [pc, #336]	; 8008654 <parseMessage+0x7b4>
 8008504:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008508:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800850c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008514:	edc7 7a00 	vstr	s15, [r7]
 8008518:	783b      	ldrb	r3, [r7, #0]
 800851a:	b2da      	uxtb	r2, r3
 800851c:	4b4f      	ldr	r3, [pc, #316]	; (800865c <parseMessage+0x7bc>)
 800851e:	701a      	strb	r2, [r3, #0]
				LSX = -LSX;
 8008520:	4b4e      	ldr	r3, [pc, #312]	; (800865c <parseMessage+0x7bc>)
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	425b      	negs	r3, r3
 8008526:	b2da      	uxtb	r2, r3
 8008528:	4b4c      	ldr	r3, [pc, #304]	; (800865c <parseMessage+0x7bc>)
 800852a:	701a      	strb	r2, [r3, #0]
 800852c:	e002      	b.n	8008534 <parseMessage+0x694>
			}
			else
			{
				LSX = 0;
 800852e:	4b4b      	ldr	r3, [pc, #300]	; (800865c <parseMessage+0x7bc>)
 8008530:	2200      	movs	r2, #0
 8008532:	701a      	strb	r2, [r3, #0]
			}

			if(stick_ly >= deadzoneValue) // positive = up
 8008534:	4b4a      	ldr	r3, [pc, #296]	; (8008660 <parseMessage+0x7c0>)
 8008536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800853a:	ee07 3a90 	vmov	s15, r3
 800853e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008542:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008546:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800854a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800854e:	db23      	blt.n	8008598 <parseMessage+0x6f8>
			{
				unscaled_result = (stick_ly - deadzoneValue) * deadzoneRelation;
 8008550:	4b43      	ldr	r3, [pc, #268]	; (8008660 <parseMessage+0x7c0>)
 8008552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008556:	ee07 3a90 	vmov	s15, r3
 800855a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800855e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008562:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008566:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800856a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800856e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
				LSY = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 8008572:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008576:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008654 <parseMessage+0x7b4>
 800857a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800857e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8008582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800858a:	edc7 7a00 	vstr	s15, [r7]
 800858e:	783b      	ldrb	r3, [r7, #0]
 8008590:	b2da      	uxtb	r2, r3
 8008592:	4b34      	ldr	r3, [pc, #208]	; (8008664 <parseMessage+0x7c4>)
 8008594:	701a      	strb	r2, [r3, #0]
 8008596:	e041      	b.n	800861c <parseMessage+0x77c>
			}
			else if(stick_ly <= (-deadzoneValue)) // negative = down
 8008598:	4b31      	ldr	r3, [pc, #196]	; (8008660 <parseMessage+0x7c0>)
 800859a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800859e:	ee07 3a90 	vmov	s15, r3
 80085a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085a6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80085aa:	eef1 7a67 	vneg.f32	s15, s15
 80085ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085b6:	d82e      	bhi.n	8008616 <parseMessage+0x776>
			{
				// just in case it's -32768 it cannot be negated. otherwise the 1 is negligible.
				temp_stick_val = -(stick_ly+1); // compute as positive, then negate at the end
 80085b8:	4b29      	ldr	r3, [pc, #164]	; (8008660 <parseMessage+0x7c0>)
 80085ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085be:	43db      	mvns	r3, r3
 80085c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				unscaled_result = (temp_stick_val - deadzoneValue) * deadzoneRelation;
 80085c4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80085c8:	ee07 3a90 	vmov	s15, r3
 80085cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085d0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80085d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80085d8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80085dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085e0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
				LSY = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 80085e4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80085e8:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8008654 <parseMessage+0x7b4>
 80085ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80085f0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80085f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085fc:	edc7 7a00 	vstr	s15, [r7]
 8008600:	783b      	ldrb	r3, [r7, #0]
 8008602:	b2da      	uxtb	r2, r3
 8008604:	4b17      	ldr	r3, [pc, #92]	; (8008664 <parseMessage+0x7c4>)
 8008606:	701a      	strb	r2, [r3, #0]
				LSY = -LSY;
 8008608:	4b16      	ldr	r3, [pc, #88]	; (8008664 <parseMessage+0x7c4>)
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	425b      	negs	r3, r3
 800860e:	b2da      	uxtb	r2, r3
 8008610:	4b14      	ldr	r3, [pc, #80]	; (8008664 <parseMessage+0x7c4>)
 8008612:	701a      	strb	r2, [r3, #0]
 8008614:	e002      	b.n	800861c <parseMessage+0x77c>
			}
			else
			{
				LSY = 0;
 8008616:	4b13      	ldr	r3, [pc, #76]	; (8008664 <parseMessage+0x7c4>)
 8008618:	2200      	movs	r2, #0
 800861a:	701a      	strb	r2, [r3, #0]
			}

			new_data.x_axis = reverse(LSX);
 800861c:	4b0f      	ldr	r3, [pc, #60]	; (800865c <parseMessage+0x7bc>)
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	4618      	mov	r0, r3
 8008622:	f002 fb5f 	bl	800ace4 <reverse>
 8008626:	4603      	mov	r3, r0
 8008628:	75bb      	strb	r3, [r7, #22]
			new_data.y_axis = reverse(LSY);
 800862a:	4b0e      	ldr	r3, [pc, #56]	; (8008664 <parseMessage+0x7c4>)
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	4618      	mov	r0, r3
 8008630:	f002 fb58 	bl	800ace4 <reverse>
 8008634:	4603      	mov	r3, r0
 8008636:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 8008638:	b672      	cpsid	i

			// ----- end nrage replication analog code -----

			__disable_irq();
			memcpy(&n64_data, &new_data,4);
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	4a0a      	ldr	r2, [pc, #40]	; (8008668 <parseMessage+0x7c8>)
 800863e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008640:	b662      	cpsie	i
 8008642:	f000 bc92 	b.w	8008f6a <parseMessage+0x10ca>
 8008646:	bf00      	nop
 8008648:	20000284 	.word	0x20000284
 800864c:	42c80000 	.word	0x42c80000
 8008650:	42fe0000 	.word	0x42fe0000
 8008654:	46fffe00 	.word	0x46fffe00
 8008658:	2000014a 	.word	0x2000014a
 800865c:	20000103 	.word	0x20000103
 8008660:	20000144 	.word	0x20000144
 8008664:	20000102 	.word	0x20000102
 8008668:	20000308 	.word	0x20000308
			__enable_irq();
		}
		else if(output_type == OUTPUT_GC)
 800866c:	4bd2      	ldr	r3, [pc, #840]	; (80089b8 <parseMessage+0xb18>)
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	2b02      	cmp	r3, #2
 8008672:	f040 847a 	bne.w	8008f6a <parseMessage+0x10ca>
		{
			GCControllerData new_data;
			memset(&new_data,0,8); // clear controller state
 8008676:	f107 030c 	add.w	r3, r7, #12
 800867a:	2208      	movs	r2, #8
 800867c:	2100      	movs	r1, #0
 800867e:	4618      	mov	r0, r3
 8008680:	f003 fbd7 	bl	800be32 <memset>
			new_data.beginning_one = 1;
 8008684:	7b7b      	ldrb	r3, [r7, #13]
 8008686:	f043 0301 	orr.w	r3, r3, #1
 800868a:	737b      	strb	r3, [r7, #13]

			if(buttons_and_triggers & XPAD_PAD_A) // was A pressed?
 800868c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8008690:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008694:	f04f 0200 	mov.w	r2, #0
 8008698:	ea03 0301 	and.w	r3, r3, r1
 800869c:	ea04 0402 	and.w	r4, r4, r2
 80086a0:	4323      	orrs	r3, r4
 80086a2:	d003      	beq.n	80086ac <parseMessage+0x80c>
			{
				new_data.a = 1;
 80086a4:	7b3b      	ldrb	r3, [r7, #12]
 80086a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086aa:	733b      	strb	r3, [r7, #12]
			}
			if(buttons_and_triggers & XPAD_PAD_X)
 80086ac:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80086b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80086b4:	f04f 0200 	mov.w	r2, #0
 80086b8:	ea03 0301 	and.w	r3, r3, r1
 80086bc:	ea04 0402 	and.w	r4, r4, r2
 80086c0:	4323      	orrs	r3, r4
 80086c2:	d003      	beq.n	80086cc <parseMessage+0x82c>
			{
				new_data.b = 1;
 80086c4:	7b3b      	ldrb	r3, [r7, #12]
 80086c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086ca:	733b      	strb	r3, [r7, #12]
			}
			if(buttons_and_triggers & XPAD_PAD_Y)
 80086cc:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80086d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80086d4:	f04f 0200 	mov.w	r2, #0
 80086d8:	ea03 0301 	and.w	r3, r3, r1
 80086dc:	ea04 0402 	and.w	r4, r4, r2
 80086e0:	4323      	orrs	r3, r4
 80086e2:	d003      	beq.n	80086ec <parseMessage+0x84c>
			{
				new_data.y = 1;
 80086e4:	7b3b      	ldrb	r3, [r7, #12]
 80086e6:	f043 0310 	orr.w	r3, r3, #16
 80086ea:	733b      	strb	r3, [r7, #12]
			}
			if(buttons_and_triggers & XPAD_HAT_LEFT)
 80086ec:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80086f0:	f04f 0104 	mov.w	r1, #4
 80086f4:	f04f 0200 	mov.w	r2, #0
 80086f8:	ea03 0301 	and.w	r3, r3, r1
 80086fc:	ea04 0402 	and.w	r4, r4, r2
 8008700:	4323      	orrs	r3, r4
 8008702:	d003      	beq.n	800870c <parseMessage+0x86c>
			{
				new_data.d_left = 1;
 8008704:	7b7b      	ldrb	r3, [r7, #13]
 8008706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800870a:	737b      	strb	r3, [r7, #13]
			}
			if(buttons_and_triggers & XPAD_HAT_RIGHT)
 800870c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8008710:	f04f 0108 	mov.w	r1, #8
 8008714:	f04f 0200 	mov.w	r2, #0
 8008718:	ea03 0301 	and.w	r3, r3, r1
 800871c:	ea04 0402 	and.w	r4, r4, r2
 8008720:	4323      	orrs	r3, r4
 8008722:	d003      	beq.n	800872c <parseMessage+0x88c>
			{
				new_data.d_right = 1;
 8008724:	7b7b      	ldrb	r3, [r7, #13]
 8008726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800872a:	737b      	strb	r3, [r7, #13]
			}
			if(buttons_and_triggers & XPAD_HAT_UP)
 800872c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8008730:	f04f 0101 	mov.w	r1, #1
 8008734:	f04f 0200 	mov.w	r2, #0
 8008738:	ea03 0301 	and.w	r3, r3, r1
 800873c:	ea04 0402 	and.w	r4, r4, r2
 8008740:	4323      	orrs	r3, r4
 8008742:	d003      	beq.n	800874c <parseMessage+0x8ac>
			{
				new_data.d_up = 1;
 8008744:	7b7b      	ldrb	r3, [r7, #13]
 8008746:	f043 0310 	orr.w	r3, r3, #16
 800874a:	737b      	strb	r3, [r7, #13]
			}
			if(buttons_and_triggers & XPAD_HAT_DOWN)
 800874c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8008750:	f04f 0102 	mov.w	r1, #2
 8008754:	f04f 0200 	mov.w	r2, #0
 8008758:	ea03 0301 	and.w	r3, r3, r1
 800875c:	ea04 0402 	and.w	r4, r4, r2
 8008760:	4323      	orrs	r3, r4
 8008762:	d003      	beq.n	800876c <parseMessage+0x8cc>
			{
				new_data.d_down = 1;
 8008764:	7b7b      	ldrb	r3, [r7, #13]
 8008766:	f043 0320 	orr.w	r3, r3, #32
 800876a:	737b      	strb	r3, [r7, #13]
			}
			if(buttons_and_triggers & LT_MASK)
 800876c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008770:	f04f 0200 	mov.w	r2, #0
 8008774:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8008778:	ea03 0301 	and.w	r3, r3, r1
 800877c:	ea04 0402 	and.w	r4, r4, r2
 8008780:	4323      	orrs	r3, r4
 8008782:	d003      	beq.n	800878c <parseMessage+0x8ec>
			{
				new_data.l = 1;
 8008784:	7b7b      	ldrb	r3, [r7, #13]
 8008786:	f043 0302 	orr.w	r3, r3, #2
 800878a:	737b      	strb	r3, [r7, #13]
			}
			if(buttons_and_triggers & RT_MASK)
 800878c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8008790:	f04f 0200 	mov.w	r2, #0
 8008794:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8008798:	ea03 0301 	and.w	r3, r3, r1
 800879c:	ea04 0402 	and.w	r4, r4, r2
 80087a0:	4323      	orrs	r3, r4
 80087a2:	d003      	beq.n	80087ac <parseMessage+0x90c>
			{
				new_data.r = 1;
 80087a4:	7b7b      	ldrb	r3, [r7, #13]
 80087a6:	f043 0304 	orr.w	r3, r3, #4
 80087aa:	737b      	strb	r3, [r7, #13]
			}
			if(buttons_and_triggers & XPAD_PAD_RB)
 80087ac:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80087b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80087b4:	f04f 0200 	mov.w	r2, #0
 80087b8:	ea03 0301 	and.w	r3, r3, r1
 80087bc:	ea04 0402 	and.w	r4, r4, r2
 80087c0:	4323      	orrs	r3, r4
 80087c2:	d003      	beq.n	80087cc <parseMessage+0x92c>
			{
				new_data.z = 1;
 80087c4:	7b7b      	ldrb	r3, [r7, #13]
 80087c6:	f043 0308 	orr.w	r3, r3, #8
 80087ca:	737b      	strb	r3, [r7, #13]
			}
			if(buttons_and_triggers & XPAD_START)
 80087cc:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80087d0:	f04f 0110 	mov.w	r1, #16
 80087d4:	f04f 0200 	mov.w	r2, #0
 80087d8:	ea03 0301 	and.w	r3, r3, r1
 80087dc:	ea04 0402 	and.w	r4, r4, r2
 80087e0:	4323      	orrs	r3, r4
 80087e2:	d003      	beq.n	80087ec <parseMessage+0x94c>
			{
				new_data.start = 1;
 80087e4:	7b3b      	ldrb	r3, [r7, #12]
 80087e6:	f043 0308 	orr.w	r3, r3, #8
 80087ea:	733b      	strb	r3, [r7, #12]
			}

			// triggers
			new_data.l_trigger = reverse(trigger_l);
 80087ec:	4b73      	ldr	r3, [pc, #460]	; (80089bc <parseMessage+0xb1c>)
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f002 fa77 	bl	800ace4 <reverse>
 80087f6:	4603      	mov	r3, r0
 80087f8:	74bb      	strb	r3, [r7, #18]
			new_data.r_trigger = reverse(trigger_r);
 80087fa:	4b71      	ldr	r3, [pc, #452]	; (80089c0 <parseMessage+0xb20>)
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	4618      	mov	r0, r3
 8008800:	f002 fa70 	bl	800ace4 <reverse>
 8008804:	4603      	mov	r3, r0
 8008806:	74fb      	strb	r3, [r7, #19]

			// ----- begin nrage replication analog code -----
			const float N64_MAX = 127*(controls.XpadControls.range/100.0f);
 8008808:	4b6e      	ldr	r3, [pc, #440]	; (80089c4 <parseMessage+0xb24>)
 800880a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800880e:	ee07 3a90 	vmov	s15, r3
 8008812:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008816:	eddf 6a6c 	vldr	s13, [pc, #432]	; 80089c8 <parseMessage+0xb28>
 800881a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800881e:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80089cc <parseMessage+0xb2c>
 8008822:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008826:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
			float deadzoneValue = (controls.XpadControls.deadzone/100.0f) * XPAD_MAX;
 800882a:	4b66      	ldr	r3, [pc, #408]	; (80089c4 <parseMessage+0xb24>)
 800882c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8008830:	ee07 3a90 	vmov	s15, r3
 8008834:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008838:	eddf 6a63 	vldr	s13, [pc, #396]	; 80089c8 <parseMessage+0xb28>
 800883c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008840:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80089d0 <parseMessage+0xb30>
 8008844:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008848:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
			float deadzoneRelation = XPAD_MAX / (XPAD_MAX - deadzoneValue);
 800884c:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80089d0 <parseMessage+0xb30>
 8008850:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008854:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008858:	eddf 6a5d 	vldr	s13, [pc, #372]	; 80089d0 <parseMessage+0xb30>
 800885c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008860:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

			float unscaled_result = 0;
 8008864:	f04f 0300 	mov.w	r3, #0
 8008868:	63bb      	str	r3, [r7, #56]	; 0x38

			int16_t temp_stick_val = 0;
 800886a:	2300      	movs	r3, #0
 800886c:	86fb      	strh	r3, [r7, #54]	; 0x36

			if(stick_lx >= deadzoneValue) // positive = right
 800886e:	4b59      	ldr	r3, [pc, #356]	; (80089d4 <parseMessage+0xb34>)
 8008870:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008874:	ee07 3a90 	vmov	s15, r3
 8008878:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800887c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008880:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008888:	db23      	blt.n	80088d2 <parseMessage+0xa32>
			{
				unscaled_result = (stick_lx - deadzoneValue) * deadzoneRelation;
 800888a:	4b52      	ldr	r3, [pc, #328]	; (80089d4 <parseMessage+0xb34>)
 800888c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008890:	ee07 3a90 	vmov	s15, r3
 8008894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008898:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800889c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80088a0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80088a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088a8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				LSX = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 80088ac:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80088b0:	eddf 6a47 	vldr	s13, [pc, #284]	; 80089d0 <parseMessage+0xb30>
 80088b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80088b8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80088bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088c4:	edc7 7a00 	vstr	s15, [r7]
 80088c8:	783b      	ldrb	r3, [r7, #0]
 80088ca:	b2da      	uxtb	r2, r3
 80088cc:	4b42      	ldr	r3, [pc, #264]	; (80089d8 <parseMessage+0xb38>)
 80088ce:	701a      	strb	r2, [r3, #0]
 80088d0:	e040      	b.n	8008954 <parseMessage+0xab4>
			}
			else if(stick_lx <= (-deadzoneValue)) // negative = left
 80088d2:	4b40      	ldr	r3, [pc, #256]	; (80089d4 <parseMessage+0xb34>)
 80088d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088d8:	ee07 3a90 	vmov	s15, r3
 80088dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80088e0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80088e4:	eef1 7a67 	vneg.f32	s15, s15
 80088e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088f0:	d82d      	bhi.n	800894e <parseMessage+0xaae>
			{
				// just in case it's -32768 it cannot be negated. otherwise the 1 is negligible.
				temp_stick_val = -(stick_lx+1); // compute as positive, then negate at the end
 80088f2:	4b38      	ldr	r3, [pc, #224]	; (80089d4 <parseMessage+0xb34>)
 80088f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088f8:	43db      	mvns	r3, r3
 80088fa:	86fb      	strh	r3, [r7, #54]	; 0x36
				unscaled_result = (temp_stick_val - deadzoneValue) * deadzoneRelation;
 80088fc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008900:	ee07 3a90 	vmov	s15, r3
 8008904:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008908:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800890c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008910:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008918:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				LSX = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 800891c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008920:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80089d0 <parseMessage+0xb30>
 8008924:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008928:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800892c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008934:	edc7 7a00 	vstr	s15, [r7]
 8008938:	783b      	ldrb	r3, [r7, #0]
 800893a:	b2da      	uxtb	r2, r3
 800893c:	4b26      	ldr	r3, [pc, #152]	; (80089d8 <parseMessage+0xb38>)
 800893e:	701a      	strb	r2, [r3, #0]
				LSX = -LSX;
 8008940:	4b25      	ldr	r3, [pc, #148]	; (80089d8 <parseMessage+0xb38>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	425b      	negs	r3, r3
 8008946:	b2da      	uxtb	r2, r3
 8008948:	4b23      	ldr	r3, [pc, #140]	; (80089d8 <parseMessage+0xb38>)
 800894a:	701a      	strb	r2, [r3, #0]
 800894c:	e002      	b.n	8008954 <parseMessage+0xab4>
			}
			else
			{
				LSX = 0;
 800894e:	4b22      	ldr	r3, [pc, #136]	; (80089d8 <parseMessage+0xb38>)
 8008950:	2200      	movs	r2, #0
 8008952:	701a      	strb	r2, [r3, #0]
			}

			if(stick_ly >= deadzoneValue) // positive = up
 8008954:	4b21      	ldr	r3, [pc, #132]	; (80089dc <parseMessage+0xb3c>)
 8008956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800895a:	ee07 3a90 	vmov	s15, r3
 800895e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008962:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008966:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800896a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800896e:	db39      	blt.n	80089e4 <parseMessage+0xb44>
			{
				unscaled_result = (stick_ly - deadzoneValue) * deadzoneRelation;
 8008970:	4b1a      	ldr	r3, [pc, #104]	; (80089dc <parseMessage+0xb3c>)
 8008972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008976:	ee07 3a90 	vmov	s15, r3
 800897a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800897e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008982:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008986:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800898a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800898e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				LSY = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 8008992:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008996:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80089d0 <parseMessage+0xb30>
 800899a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800899e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80089a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089aa:	edc7 7a00 	vstr	s15, [r7]
 80089ae:	783b      	ldrb	r3, [r7, #0]
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	4b0b      	ldr	r3, [pc, #44]	; (80089e0 <parseMessage+0xb40>)
 80089b4:	701a      	strb	r2, [r3, #0]
 80089b6:	e056      	b.n	8008a66 <parseMessage+0xbc6>
 80089b8:	2000011c 	.word	0x2000011c
 80089bc:	20000146 	.word	0x20000146
 80089c0:	20000150 	.word	0x20000150
 80089c4:	20000284 	.word	0x20000284
 80089c8:	42c80000 	.word	0x42c80000
 80089cc:	42fe0000 	.word	0x42fe0000
 80089d0:	46fffe00 	.word	0x46fffe00
 80089d4:	2000014a 	.word	0x2000014a
 80089d8:	20000103 	.word	0x20000103
 80089dc:	20000144 	.word	0x20000144
 80089e0:	20000102 	.word	0x20000102
			}
			else if(stick_ly <= (-deadzoneValue)) // negative = down
 80089e4:	4bc6      	ldr	r3, [pc, #792]	; (8008d00 <parseMessage+0xe60>)
 80089e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089ea:	ee07 3a90 	vmov	s15, r3
 80089ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80089f2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80089f6:	eef1 7a67 	vneg.f32	s15, s15
 80089fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80089fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a02:	d82d      	bhi.n	8008a60 <parseMessage+0xbc0>
			{
				// just in case it's -32768 it cannot be negated. otherwise the 1 is negligible.
				temp_stick_val = -(stick_ly+1); // compute as positive, then negate at the end
 8008a04:	4bbe      	ldr	r3, [pc, #760]	; (8008d00 <parseMessage+0xe60>)
 8008a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a0a:	43db      	mvns	r3, r3
 8008a0c:	86fb      	strh	r3, [r7, #54]	; 0x36
				unscaled_result = (temp_stick_val - deadzoneValue) * deadzoneRelation;
 8008a0e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008a12:	ee07 3a90 	vmov	s15, r3
 8008a16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008a1a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008a1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a22:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a2a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				LSY = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 8008a2e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008a32:	eddf 6ab4 	vldr	s13, [pc, #720]	; 8008d04 <parseMessage+0xe64>
 8008a36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008a3a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a46:	edc7 7a00 	vstr	s15, [r7]
 8008a4a:	783b      	ldrb	r3, [r7, #0]
 8008a4c:	b2da      	uxtb	r2, r3
 8008a4e:	4bae      	ldr	r3, [pc, #696]	; (8008d08 <parseMessage+0xe68>)
 8008a50:	701a      	strb	r2, [r3, #0]
				LSY = -LSY;
 8008a52:	4bad      	ldr	r3, [pc, #692]	; (8008d08 <parseMessage+0xe68>)
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	425b      	negs	r3, r3
 8008a58:	b2da      	uxtb	r2, r3
 8008a5a:	4bab      	ldr	r3, [pc, #684]	; (8008d08 <parseMessage+0xe68>)
 8008a5c:	701a      	strb	r2, [r3, #0]
 8008a5e:	e002      	b.n	8008a66 <parseMessage+0xbc6>
			}
			else
			{
				LSY = 0;
 8008a60:	4ba9      	ldr	r3, [pc, #676]	; (8008d08 <parseMessage+0xe68>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	701a      	strb	r2, [r3, #0]
			}

			// unlike n64, gc is 0-255 instead of -128 to 127
			LSX = (uint8_t)((int8_t)(LSX)+128);
 8008a66:	4ba9      	ldr	r3, [pc, #676]	; (8008d0c <parseMessage+0xe6c>)
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	3b80      	subs	r3, #128	; 0x80
 8008a6c:	b2da      	uxtb	r2, r3
 8008a6e:	4ba7      	ldr	r3, [pc, #668]	; (8008d0c <parseMessage+0xe6c>)
 8008a70:	701a      	strb	r2, [r3, #0]
			LSY = (uint8_t)((int8_t)(LSY)+128);
 8008a72:	4ba5      	ldr	r3, [pc, #660]	; (8008d08 <parseMessage+0xe68>)
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	3b80      	subs	r3, #128	; 0x80
 8008a78:	b2da      	uxtb	r2, r3
 8008a7a:	4ba3      	ldr	r3, [pc, #652]	; (8008d08 <parseMessage+0xe68>)
 8008a7c:	701a      	strb	r2, [r3, #0]

			new_data.a_x_axis = reverse(LSX);
 8008a7e:	4ba3      	ldr	r3, [pc, #652]	; (8008d0c <parseMessage+0xe6c>)
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	4618      	mov	r0, r3
 8008a84:	f002 f92e 	bl	800ace4 <reverse>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	73bb      	strb	r3, [r7, #14]
			new_data.a_y_axis = reverse(LSY);
 8008a8c:	4b9e      	ldr	r3, [pc, #632]	; (8008d08 <parseMessage+0xe68>)
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f002 f927 	bl	800ace4 <reverse>
 8008a96:	4603      	mov	r3, r0
 8008a98:	73fb      	strb	r3, [r7, #15]

			if(stick_rx >= deadzoneValue) // positive = right
 8008a9a:	4b9d      	ldr	r3, [pc, #628]	; (8008d10 <parseMessage+0xe70>)
 8008a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008aa0:	ee07 3a90 	vmov	s15, r3
 8008aa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008aa8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008aac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ab4:	db23      	blt.n	8008afe <parseMessage+0xc5e>
			{
				unscaled_result = (stick_rx - deadzoneValue) * deadzoneRelation;
 8008ab6:	4b96      	ldr	r3, [pc, #600]	; (8008d10 <parseMessage+0xe70>)
 8008ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008abc:	ee07 3a90 	vmov	s15, r3
 8008ac0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008ac4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008ac8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008acc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ad4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				RSX = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 8008ad8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008adc:	eddf 6a89 	vldr	s13, [pc, #548]	; 8008d04 <parseMessage+0xe64>
 8008ae0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008ae4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008af0:	edc7 7a00 	vstr	s15, [r7]
 8008af4:	783b      	ldrb	r3, [r7, #0]
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	4b86      	ldr	r3, [pc, #536]	; (8008d14 <parseMessage+0xe74>)
 8008afa:	701a      	strb	r2, [r3, #0]
 8008afc:	e040      	b.n	8008b80 <parseMessage+0xce0>
			}
			else if(stick_rx <= (-deadzoneValue)) // negative = left
 8008afe:	4b84      	ldr	r3, [pc, #528]	; (8008d10 <parseMessage+0xe70>)
 8008b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b04:	ee07 3a90 	vmov	s15, r3
 8008b08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b0c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008b10:	eef1 7a67 	vneg.f32	s15, s15
 8008b14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b1c:	d82d      	bhi.n	8008b7a <parseMessage+0xcda>
			{
				// just in case it's -32768 it cannot be negated. otherwise the 1 is negligible.
				temp_stick_val = -(stick_rx+1); // compute as positive, then negate at the end
 8008b1e:	4b7c      	ldr	r3, [pc, #496]	; (8008d10 <parseMessage+0xe70>)
 8008b20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b24:	43db      	mvns	r3, r3
 8008b26:	86fb      	strh	r3, [r7, #54]	; 0x36
				unscaled_result = (temp_stick_val - deadzoneValue) * deadzoneRelation;
 8008b28:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008b2c:	ee07 3a90 	vmov	s15, r3
 8008b30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b34:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008b38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008b3c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b44:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				RSX = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 8008b48:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008b4c:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8008d04 <parseMessage+0xe64>
 8008b50:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008b54:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b60:	edc7 7a00 	vstr	s15, [r7]
 8008b64:	783b      	ldrb	r3, [r7, #0]
 8008b66:	b2da      	uxtb	r2, r3
 8008b68:	4b6a      	ldr	r3, [pc, #424]	; (8008d14 <parseMessage+0xe74>)
 8008b6a:	701a      	strb	r2, [r3, #0]
				RSX = -RSX;
 8008b6c:	4b69      	ldr	r3, [pc, #420]	; (8008d14 <parseMessage+0xe74>)
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	425b      	negs	r3, r3
 8008b72:	b2da      	uxtb	r2, r3
 8008b74:	4b67      	ldr	r3, [pc, #412]	; (8008d14 <parseMessage+0xe74>)
 8008b76:	701a      	strb	r2, [r3, #0]
 8008b78:	e002      	b.n	8008b80 <parseMessage+0xce0>
			}
			else
			{
				RSX = 0;
 8008b7a:	4b66      	ldr	r3, [pc, #408]	; (8008d14 <parseMessage+0xe74>)
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	701a      	strb	r2, [r3, #0]
			}

			if(stick_ry >= deadzoneValue) // positive = up
 8008b80:	4b65      	ldr	r3, [pc, #404]	; (8008d18 <parseMessage+0xe78>)
 8008b82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b86:	ee07 3a90 	vmov	s15, r3
 8008b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b8e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008b92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b9a:	db23      	blt.n	8008be4 <parseMessage+0xd44>
			{
				unscaled_result = (stick_ry - deadzoneValue) * deadzoneRelation;
 8008b9c:	4b5e      	ldr	r3, [pc, #376]	; (8008d18 <parseMessage+0xe78>)
 8008b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ba2:	ee07 3a90 	vmov	s15, r3
 8008ba6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008baa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008bae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008bb2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bba:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				RSY = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 8008bbe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008bc2:	eddf 6a50 	vldr	s13, [pc, #320]	; 8008d04 <parseMessage+0xe64>
 8008bc6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008bca:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bd6:	edc7 7a00 	vstr	s15, [r7]
 8008bda:	783b      	ldrb	r3, [r7, #0]
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	4b4f      	ldr	r3, [pc, #316]	; (8008d1c <parseMessage+0xe7c>)
 8008be0:	701a      	strb	r2, [r3, #0]
 8008be2:	e040      	b.n	8008c66 <parseMessage+0xdc6>
			}
			else if(stick_ry <= (-deadzoneValue)) // negative = down
 8008be4:	4b4c      	ldr	r3, [pc, #304]	; (8008d18 <parseMessage+0xe78>)
 8008be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bea:	ee07 3a90 	vmov	s15, r3
 8008bee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008bf2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008bf6:	eef1 7a67 	vneg.f32	s15, s15
 8008bfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c02:	d82d      	bhi.n	8008c60 <parseMessage+0xdc0>
			{
				// just in case it's -32768 it cannot be negated. otherwise the 1 is negligible.
				temp_stick_val = -(stick_ry+1); // compute as positive, then negate at the end
 8008c04:	4b44      	ldr	r3, [pc, #272]	; (8008d18 <parseMessage+0xe78>)
 8008c06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c0a:	43db      	mvns	r3, r3
 8008c0c:	86fb      	strh	r3, [r7, #54]	; 0x36
				unscaled_result = (temp_stick_val - deadzoneValue) * deadzoneRelation;
 8008c0e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008c12:	ee07 3a90 	vmov	s15, r3
 8008c16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008c1a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008c1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008c22:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c2a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				RSY = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 8008c2e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008c32:	eddf 6a34 	vldr	s13, [pc, #208]	; 8008d04 <parseMessage+0xe64>
 8008c36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008c3a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c46:	edc7 7a00 	vstr	s15, [r7]
 8008c4a:	783b      	ldrb	r3, [r7, #0]
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	4b33      	ldr	r3, [pc, #204]	; (8008d1c <parseMessage+0xe7c>)
 8008c50:	701a      	strb	r2, [r3, #0]
				RSY = -RSY;
 8008c52:	4b32      	ldr	r3, [pc, #200]	; (8008d1c <parseMessage+0xe7c>)
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	425b      	negs	r3, r3
 8008c58:	b2da      	uxtb	r2, r3
 8008c5a:	4b30      	ldr	r3, [pc, #192]	; (8008d1c <parseMessage+0xe7c>)
 8008c5c:	701a      	strb	r2, [r3, #0]
 8008c5e:	e002      	b.n	8008c66 <parseMessage+0xdc6>
			}
			else
			{
				RSY = 0;
 8008c60:	4b2e      	ldr	r3, [pc, #184]	; (8008d1c <parseMessage+0xe7c>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	701a      	strb	r2, [r3, #0]
			}

			// unlike n64, gc is 0-255 instead of -128 to 127
			RSX = (uint8_t)((int8_t)(RSX)+128);
 8008c66:	4b2b      	ldr	r3, [pc, #172]	; (8008d14 <parseMessage+0xe74>)
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	3b80      	subs	r3, #128	; 0x80
 8008c6c:	b2da      	uxtb	r2, r3
 8008c6e:	4b29      	ldr	r3, [pc, #164]	; (8008d14 <parseMessage+0xe74>)
 8008c70:	701a      	strb	r2, [r3, #0]
			RSY = (uint8_t)((int8_t)(RSY)+128);
 8008c72:	4b2a      	ldr	r3, [pc, #168]	; (8008d1c <parseMessage+0xe7c>)
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	3b80      	subs	r3, #128	; 0x80
 8008c78:	b2da      	uxtb	r2, r3
 8008c7a:	4b28      	ldr	r3, [pc, #160]	; (8008d1c <parseMessage+0xe7c>)
 8008c7c:	701a      	strb	r2, [r3, #0]

			new_data.c_x_axis = reverse(RSX);
 8008c7e:	4b25      	ldr	r3, [pc, #148]	; (8008d14 <parseMessage+0xe74>)
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f002 f82e 	bl	800ace4 <reverse>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	743b      	strb	r3, [r7, #16]
			new_data.c_y_axis = reverse(RSY);
 8008c8c:	4b23      	ldr	r3, [pc, #140]	; (8008d1c <parseMessage+0xe7c>)
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f002 f827 	bl	800ace4 <reverse>
 8008c96:	4603      	mov	r3, r0
 8008c98:	747b      	strb	r3, [r7, #17]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c9a:	b672      	cpsid	i

			// ----- end nrage replication analog code -----

			__disable_irq();
			memcpy(&gc_data, &new_data,8);
 8008c9c:	4b20      	ldr	r3, [pc, #128]	; (8008d20 <parseMessage+0xe80>)
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	f107 030c 	add.w	r3, r7, #12
 8008ca4:	cb03      	ldmia	r3!, {r0, r1}
 8008ca6:	6010      	str	r0, [r2, #0]
 8008ca8:	6051      	str	r1, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8008caa:	b662      	cpsie	i
 8008cac:	e15d      	b.n	8008f6a <parseMessage+0x10ca>
			__enable_irq();
		}
    }
    else if(state == STATE_SENSITIVITY)
 8008cae:	4b1d      	ldr	r3, [pc, #116]	; (8008d24 <parseMessage+0xe84>)
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	2b13      	cmp	r3, #19
 8008cb4:	f040 80ac 	bne.w	8008e10 <parseMessage+0xf70>
	{
		uint64_t b = DetectButton(buttons_and_triggers); // read for button presses (just do linear search)
 8008cb8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008cbc:	f7ff f83e 	bl	8007d3c <DetectButton>
 8008cc0:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		if(b == XPAD_HAT_UP) // +5
 8008cc4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008cc8:	2c00      	cmp	r4, #0
 8008cca:	bf08      	it	eq
 8008ccc:	2b01      	cmpeq	r3, #1
 8008cce:	d12f      	bne.n	8008d30 <parseMessage+0xe90>
		{
			if(xpadButtonPressed == 0)
 8008cd0:	4b15      	ldr	r3, [pc, #84]	; (8008d28 <parseMessage+0xe88>)
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f040 8148 	bne.w	8008f6a <parseMessage+0x10ca>
			{
				xpadButtonPressed = 1;
 8008cda:	4b13      	ldr	r3, [pc, #76]	; (8008d28 <parseMessage+0xe88>)
 8008cdc:	2201      	movs	r2, #1
 8008cde:	701a      	strb	r2, [r3, #0]
				controls.XpadControls.range = controls.XpadControls.range < 95 ? controls.XpadControls.range+5 : 100;
 8008ce0:	4b12      	ldr	r3, [pc, #72]	; (8008d2c <parseMessage+0xe8c>)
 8008ce2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008ce6:	2b5e      	cmp	r3, #94	; 0x5e
 8008ce8:	d805      	bhi.n	8008cf6 <parseMessage+0xe56>
 8008cea:	4b10      	ldr	r3, [pc, #64]	; (8008d2c <parseMessage+0xe8c>)
 8008cec:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008cf0:	3305      	adds	r3, #5
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	e000      	b.n	8008cf8 <parseMessage+0xe58>
 8008cf6:	2364      	movs	r3, #100	; 0x64
 8008cf8:	4a0c      	ldr	r2, [pc, #48]	; (8008d2c <parseMessage+0xe8c>)
 8008cfa:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
 8008cfe:	e134      	b.n	8008f6a <parseMessage+0x10ca>
 8008d00:	20000144 	.word	0x20000144
 8008d04:	46fffe00 	.word	0x46fffe00
 8008d08:	20000102 	.word	0x20000102
 8008d0c:	20000103 	.word	0x20000103
 8008d10:	20000174 	.word	0x20000174
 8008d14:	20000105 	.word	0x20000105
 8008d18:	20000148 	.word	0x20000148
 8008d1c:	20000104 	.word	0x20000104
 8008d20:	2000027c 	.word	0x2000027c
 8008d24:	2000010a 	.word	0x2000010a
 8008d28:	20000109 	.word	0x20000109
 8008d2c:	20000284 	.word	0x20000284
			}
		}
		else if(b == XPAD_HAT_DOWN) // -5
 8008d30:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008d34:	2c00      	cmp	r4, #0
 8008d36:	bf08      	it	eq
 8008d38:	2b02      	cmpeq	r3, #2
 8008d3a:	d117      	bne.n	8008d6c <parseMessage+0xecc>
		{
			if(xpadButtonPressed == 0)
 8008d3c:	4b8c      	ldr	r3, [pc, #560]	; (8008f70 <parseMessage+0x10d0>)
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f040 8112 	bne.w	8008f6a <parseMessage+0x10ca>
			{
				xpadButtonPressed = 1;
 8008d46:	4b8a      	ldr	r3, [pc, #552]	; (8008f70 <parseMessage+0x10d0>)
 8008d48:	2201      	movs	r2, #1
 8008d4a:	701a      	strb	r2, [r3, #0]
				controls.XpadControls.range = controls.XpadControls.range > 5 ? controls.XpadControls.range-5 : 0;
 8008d4c:	4b89      	ldr	r3, [pc, #548]	; (8008f74 <parseMessage+0x10d4>)
 8008d4e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008d52:	2b05      	cmp	r3, #5
 8008d54:	d905      	bls.n	8008d62 <parseMessage+0xec2>
 8008d56:	4b87      	ldr	r3, [pc, #540]	; (8008f74 <parseMessage+0x10d4>)
 8008d58:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008d5c:	3b05      	subs	r3, #5
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	e000      	b.n	8008d64 <parseMessage+0xec4>
 8008d62:	2300      	movs	r3, #0
 8008d64:	4a83      	ldr	r2, [pc, #524]	; (8008f74 <parseMessage+0x10d4>)
 8008d66:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
 8008d6a:	e0fe      	b.n	8008f6a <parseMessage+0x10ca>
			}
		}
		else if(b == XPAD_HAT_LEFT) // -1
 8008d6c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008d70:	2c00      	cmp	r4, #0
 8008d72:	bf08      	it	eq
 8008d74:	2b04      	cmpeq	r3, #4
 8008d76:	d117      	bne.n	8008da8 <parseMessage+0xf08>
		{
			if(xpadButtonPressed == 0)
 8008d78:	4b7d      	ldr	r3, [pc, #500]	; (8008f70 <parseMessage+0x10d0>)
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f040 80f4 	bne.w	8008f6a <parseMessage+0x10ca>
			{
				xpadButtonPressed = 1;
 8008d82:	4b7b      	ldr	r3, [pc, #492]	; (8008f70 <parseMessage+0x10d0>)
 8008d84:	2201      	movs	r2, #1
 8008d86:	701a      	strb	r2, [r3, #0]
				controls.XpadControls.range = controls.XpadControls.range > 1 ? controls.XpadControls.range-1 : 0;
 8008d88:	4b7a      	ldr	r3, [pc, #488]	; (8008f74 <parseMessage+0x10d4>)
 8008d8a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d905      	bls.n	8008d9e <parseMessage+0xefe>
 8008d92:	4b78      	ldr	r3, [pc, #480]	; (8008f74 <parseMessage+0x10d4>)
 8008d94:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	e000      	b.n	8008da0 <parseMessage+0xf00>
 8008d9e:	2300      	movs	r3, #0
 8008da0:	4a74      	ldr	r2, [pc, #464]	; (8008f74 <parseMessage+0x10d4>)
 8008da2:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
 8008da6:	e0e0      	b.n	8008f6a <parseMessage+0x10ca>
			}
						}
		else if(b == XPAD_HAT_RIGHT)// +1
 8008da8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008dac:	2c00      	cmp	r4, #0
 8008dae:	bf08      	it	eq
 8008db0:	2b08      	cmpeq	r3, #8
 8008db2:	d117      	bne.n	8008de4 <parseMessage+0xf44>
		{
			if(xpadButtonPressed == 0)
 8008db4:	4b6e      	ldr	r3, [pc, #440]	; (8008f70 <parseMessage+0x10d0>)
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f040 80d6 	bne.w	8008f6a <parseMessage+0x10ca>
			{
				xpadButtonPressed = 1;
 8008dbe:	4b6c      	ldr	r3, [pc, #432]	; (8008f70 <parseMessage+0x10d0>)
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	701a      	strb	r2, [r3, #0]
				controls.XpadControls.range = controls.XpadControls.range < 99 ? controls.XpadControls.range+1 : 100;
 8008dc4:	4b6b      	ldr	r3, [pc, #428]	; (8008f74 <parseMessage+0x10d4>)
 8008dc6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008dca:	2b62      	cmp	r3, #98	; 0x62
 8008dcc:	d805      	bhi.n	8008dda <parseMessage+0xf3a>
 8008dce:	4b69      	ldr	r3, [pc, #420]	; (8008f74 <parseMessage+0x10d4>)
 8008dd0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	e000      	b.n	8008ddc <parseMessage+0xf3c>
 8008dda:	2364      	movs	r3, #100	; 0x64
 8008ddc:	4a65      	ldr	r2, [pc, #404]	; (8008f74 <parseMessage+0x10d4>)
 8008dde:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
 8008de2:	e0c2      	b.n	8008f6a <parseMessage+0x10ca>
			}
		}
		else if(b == XPAD_PAD_A) // OK
 8008de4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008de8:	2c00      	cmp	r4, #0
 8008dea:	bf08      	it	eq
 8008dec:	f5b3 5f80 	cmpeq.w	r3, #4096	; 0x1000
 8008df0:	d10a      	bne.n	8008e08 <parseMessage+0xf68>
		{
			if(xpadButtonPressed == 0)
 8008df2:	4b5f      	ldr	r3, [pc, #380]	; (8008f70 <parseMessage+0x10d0>)
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f040 80b7 	bne.w	8008f6a <parseMessage+0x10ca>
			{
				xpadButtonPressed = 1;
 8008dfc:	4b5c      	ldr	r3, [pc, #368]	; (8008f70 <parseMessage+0x10d0>)
 8008dfe:	2201      	movs	r2, #1
 8008e00:	701a      	strb	r2, [r3, #0]
				AdvanceState();
 8008e02:	f001 ff3b 	bl	800ac7c <AdvanceState>
 8008e06:	e0b0      	b.n	8008f6a <parseMessage+0x10ca>
			}
		}
		else
		{
			xpadButtonPressed = 0;
 8008e08:	4b59      	ldr	r3, [pc, #356]	; (8008f70 <parseMessage+0x10d0>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	701a      	strb	r2, [r3, #0]
 8008e0e:	e0ac      	b.n	8008f6a <parseMessage+0x10ca>
		}
	}
	else if(state == STATE_DEADZONE)
 8008e10:	4b59      	ldr	r3, [pc, #356]	; (8008f78 <parseMessage+0x10d8>)
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	2b14      	cmp	r3, #20
 8008e16:	f040 808d 	bne.w	8008f34 <parseMessage+0x1094>
	{
		uint64_t b = DetectButton(buttons_and_triggers); // read for button presses (just do linear search)
 8008e1a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008e1e:	f7fe ff8d 	bl	8007d3c <DetectButton>
 8008e22:	e9c7 0108 	strd	r0, r1, [r7, #32]
		if(b == XPAD_HAT_UP) // +5
 8008e26:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008e2a:	2c00      	cmp	r4, #0
 8008e2c:	bf08      	it	eq
 8008e2e:	2b01      	cmpeq	r3, #1
 8008e30:	d117      	bne.n	8008e62 <parseMessage+0xfc2>
		{
			if(xpadButtonPressed == 0)
 8008e32:	4b4f      	ldr	r3, [pc, #316]	; (8008f70 <parseMessage+0x10d0>)
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f040 8097 	bne.w	8008f6a <parseMessage+0x10ca>
			{
				xpadButtonPressed = 1;
 8008e3c:	4b4c      	ldr	r3, [pc, #304]	; (8008f70 <parseMessage+0x10d0>)
 8008e3e:	2201      	movs	r2, #1
 8008e40:	701a      	strb	r2, [r3, #0]
				controls.XpadControls.deadzone = controls.XpadControls.deadzone < 95 ? controls.XpadControls.deadzone+5 : 100;
 8008e42:	4b4c      	ldr	r3, [pc, #304]	; (8008f74 <parseMessage+0x10d4>)
 8008e44:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8008e48:	2b5e      	cmp	r3, #94	; 0x5e
 8008e4a:	d805      	bhi.n	8008e58 <parseMessage+0xfb8>
 8008e4c:	4b49      	ldr	r3, [pc, #292]	; (8008f74 <parseMessage+0x10d4>)
 8008e4e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8008e52:	3305      	adds	r3, #5
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	e000      	b.n	8008e5a <parseMessage+0xfba>
 8008e58:	2364      	movs	r3, #100	; 0x64
 8008e5a:	4a46      	ldr	r2, [pc, #280]	; (8008f74 <parseMessage+0x10d4>)
 8008e5c:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
 8008e60:	e083      	b.n	8008f6a <parseMessage+0x10ca>
			}
		}
		else if(b == XPAD_HAT_DOWN) // -5
 8008e62:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008e66:	2c00      	cmp	r4, #0
 8008e68:	bf08      	it	eq
 8008e6a:	2b02      	cmpeq	r3, #2
 8008e6c:	d116      	bne.n	8008e9c <parseMessage+0xffc>
		{
			if(xpadButtonPressed == 0)
 8008e6e:	4b40      	ldr	r3, [pc, #256]	; (8008f70 <parseMessage+0x10d0>)
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d179      	bne.n	8008f6a <parseMessage+0x10ca>
			{
				xpadButtonPressed = 1;
 8008e76:	4b3e      	ldr	r3, [pc, #248]	; (8008f70 <parseMessage+0x10d0>)
 8008e78:	2201      	movs	r2, #1
 8008e7a:	701a      	strb	r2, [r3, #0]
				controls.XpadControls.deadzone = controls.XpadControls.deadzone > 5 ? controls.XpadControls.deadzone-5 : 0;
 8008e7c:	4b3d      	ldr	r3, [pc, #244]	; (8008f74 <parseMessage+0x10d4>)
 8008e7e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8008e82:	2b05      	cmp	r3, #5
 8008e84:	d905      	bls.n	8008e92 <parseMessage+0xff2>
 8008e86:	4b3b      	ldr	r3, [pc, #236]	; (8008f74 <parseMessage+0x10d4>)
 8008e88:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8008e8c:	3b05      	subs	r3, #5
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	e000      	b.n	8008e94 <parseMessage+0xff4>
 8008e92:	2300      	movs	r3, #0
 8008e94:	4a37      	ldr	r2, [pc, #220]	; (8008f74 <parseMessage+0x10d4>)
 8008e96:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
 8008e9a:	e066      	b.n	8008f6a <parseMessage+0x10ca>
			}
		}
		else if(b == XPAD_HAT_LEFT) // -1
 8008e9c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008ea0:	2c00      	cmp	r4, #0
 8008ea2:	bf08      	it	eq
 8008ea4:	2b04      	cmpeq	r3, #4
 8008ea6:	d116      	bne.n	8008ed6 <parseMessage+0x1036>
		{
			if(xpadButtonPressed == 0)
 8008ea8:	4b31      	ldr	r3, [pc, #196]	; (8008f70 <parseMessage+0x10d0>)
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d15c      	bne.n	8008f6a <parseMessage+0x10ca>
			{
				xpadButtonPressed = 1;
 8008eb0:	4b2f      	ldr	r3, [pc, #188]	; (8008f70 <parseMessage+0x10d0>)
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	701a      	strb	r2, [r3, #0]
				controls.XpadControls.deadzone = controls.XpadControls.deadzone > 1 ? controls.XpadControls.deadzone-1 : 0;
 8008eb6:	4b2f      	ldr	r3, [pc, #188]	; (8008f74 <parseMessage+0x10d4>)
 8008eb8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d905      	bls.n	8008ecc <parseMessage+0x102c>
 8008ec0:	4b2c      	ldr	r3, [pc, #176]	; (8008f74 <parseMessage+0x10d4>)
 8008ec2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	e000      	b.n	8008ece <parseMessage+0x102e>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	4a29      	ldr	r2, [pc, #164]	; (8008f74 <parseMessage+0x10d4>)
 8008ed0:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
 8008ed4:	e049      	b.n	8008f6a <parseMessage+0x10ca>
			}
						}
		else if(b == XPAD_HAT_RIGHT)// +1
 8008ed6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008eda:	2c00      	cmp	r4, #0
 8008edc:	bf08      	it	eq
 8008ede:	2b08      	cmpeq	r3, #8
 8008ee0:	d116      	bne.n	8008f10 <parseMessage+0x1070>
		{
			if(xpadButtonPressed == 0)
 8008ee2:	4b23      	ldr	r3, [pc, #140]	; (8008f70 <parseMessage+0x10d0>)
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d13f      	bne.n	8008f6a <parseMessage+0x10ca>
			{
				xpadButtonPressed = 1;
 8008eea:	4b21      	ldr	r3, [pc, #132]	; (8008f70 <parseMessage+0x10d0>)
 8008eec:	2201      	movs	r2, #1
 8008eee:	701a      	strb	r2, [r3, #0]
				controls.XpadControls.deadzone = controls.XpadControls.deadzone < 99 ? controls.XpadControls.deadzone+1 : 100;
 8008ef0:	4b20      	ldr	r3, [pc, #128]	; (8008f74 <parseMessage+0x10d4>)
 8008ef2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8008ef6:	2b62      	cmp	r3, #98	; 0x62
 8008ef8:	d805      	bhi.n	8008f06 <parseMessage+0x1066>
 8008efa:	4b1e      	ldr	r3, [pc, #120]	; (8008f74 <parseMessage+0x10d4>)
 8008efc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8008f00:	3301      	adds	r3, #1
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	e000      	b.n	8008f08 <parseMessage+0x1068>
 8008f06:	2364      	movs	r3, #100	; 0x64
 8008f08:	4a1a      	ldr	r2, [pc, #104]	; (8008f74 <parseMessage+0x10d4>)
 8008f0a:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
 8008f0e:	e02c      	b.n	8008f6a <parseMessage+0x10ca>
			}
		}
		else if(b == XPAD_PAD_A) // OK
 8008f10:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008f14:	2c00      	cmp	r4, #0
 8008f16:	bf08      	it	eq
 8008f18:	f5b3 5f80 	cmpeq.w	r3, #4096	; 0x1000
 8008f1c:	d106      	bne.n	8008f2c <parseMessage+0x108c>
		{
			if(xpadButtonPressed == 0)
 8008f1e:	4b14      	ldr	r3, [pc, #80]	; (8008f70 <parseMessage+0x10d0>)
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d121      	bne.n	8008f6a <parseMessage+0x10ca>
			{
				//keep xpadButtonPressed at 0 for next time since we're done
				AdvanceState();
 8008f26:	f001 fea9 	bl	800ac7c <AdvanceState>
 8008f2a:	e01e      	b.n	8008f6a <parseMessage+0x10ca>
			}
		}
		else
		{
			xpadButtonPressed = 0;
 8008f2c:	4b10      	ldr	r3, [pc, #64]	; (8008f70 <parseMessage+0x10d0>)
 8008f2e:	2200      	movs	r2, #0
 8008f30:	701a      	strb	r2, [r3, #0]
 8008f32:	e01a      	b.n	8008f6a <parseMessage+0x10ca>
		}
	}
    else // state > 0 so we are in the process of changing controls
    {
    	uint64_t b = DetectButton(); // read for button presses (just do linear search)
 8008f34:	f7fe ff02 	bl	8007d3c <DetectButton>
 8008f38:	e9c7 0106 	strd	r0, r1, [r7, #24]
    	if(b != 0) /*button was actually is pressed*/
 8008f3c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008f40:	4323      	orrs	r3, r4
 8008f42:	d00d      	beq.n	8008f60 <parseMessage+0x10c0>
    	{
    		if(xpadButtonPressed == 0)
 8008f44:	4b0a      	ldr	r3, [pc, #40]	; (8008f70 <parseMessage+0x10d0>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10e      	bne.n	8008f6a <parseMessage+0x10ca>
    		{
    			xpadButtonPressed = 1;
 8008f4c:	4b08      	ldr	r3, [pc, #32]	; (8008f70 <parseMessage+0x10d0>)
 8008f4e:	2201      	movs	r2, #1
 8008f50:	701a      	strb	r2, [r3, #0]
    			ChangeButtonMappingController(b);
 8008f52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008f56:	f001 fd9f 	bl	800aa98 <ChangeButtonMappingController>
    			AdvanceState();
 8008f5a:	f001 fe8f 	bl	800ac7c <AdvanceState>
 8008f5e:	e004      	b.n	8008f6a <parseMessage+0x10ca>
    		}
    	}
    	else
    	{
    		xpadButtonPressed = 0;
 8008f60:	4b03      	ldr	r3, [pc, #12]	; (8008f70 <parseMessage+0x10d0>)
 8008f62:	2200      	movs	r2, #0
 8008f64:	701a      	strb	r2, [r3, #0]
 8008f66:	e000      	b.n	8008f6a <parseMessage+0x10ca>
        return;
 8008f68:	bf00      	nop
    	}
    }
}
 8008f6a:	3774      	adds	r7, #116	; 0x74
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd90      	pop	{r4, r7, pc}
 8008f70:	20000109 	.word	0x20000109
 8008f74:	20000284 	.word	0x20000284
 8008f78:	2000010a 	.word	0x2000010a

08008f7c <XPAD_360_WIRELESS_ProcessInputData>:

void XPAD_360_WIRELESS_ProcessInputData(USBH_HandleTypeDef *phost)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
	if(report[0] == 0x00)
 8008f84:	4b1b      	ldr	r3, [pc, #108]	; (8008ff4 <XPAD_360_WIRELESS_ProcessInputData+0x78>)
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d123      	bne.n	8008fd4 <XPAD_360_WIRELESS_ProcessInputData+0x58>
	{
		if (report[1] == 0x01 && report[2] == 0x00 && report[3] == 0xf0 && report[4] == 0x00 && report[5] == 0x13)
 8008f8c:	4b19      	ldr	r3, [pc, #100]	; (8008ff4 <XPAD_360_WIRELESS_ProcessInputData+0x78>)
 8008f8e:	785b      	ldrb	r3, [r3, #1]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d113      	bne.n	8008fbc <XPAD_360_WIRELESS_ProcessInputData+0x40>
 8008f94:	4b17      	ldr	r3, [pc, #92]	; (8008ff4 <XPAD_360_WIRELESS_ProcessInputData+0x78>)
 8008f96:	789b      	ldrb	r3, [r3, #2]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10f      	bne.n	8008fbc <XPAD_360_WIRELESS_ProcessInputData+0x40>
 8008f9c:	4b15      	ldr	r3, [pc, #84]	; (8008ff4 <XPAD_360_WIRELESS_ProcessInputData+0x78>)
 8008f9e:	78db      	ldrb	r3, [r3, #3]
 8008fa0:	2bf0      	cmp	r3, #240	; 0xf0
 8008fa2:	d10b      	bne.n	8008fbc <XPAD_360_WIRELESS_ProcessInputData+0x40>
 8008fa4:	4b13      	ldr	r3, [pc, #76]	; (8008ff4 <XPAD_360_WIRELESS_ProcessInputData+0x78>)
 8008fa6:	791b      	ldrb	r3, [r3, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d107      	bne.n	8008fbc <XPAD_360_WIRELESS_ProcessInputData+0x40>
 8008fac:	4b11      	ldr	r3, [pc, #68]	; (8008ff4 <XPAD_360_WIRELESS_ProcessInputData+0x78>)
 8008fae:	795b      	ldrb	r3, [r3, #5]
 8008fb0:	2b13      	cmp	r3, #19
 8008fb2:	d103      	bne.n	8008fbc <XPAD_360_WIRELESS_ProcessInputData+0x40>
		{
			// Event data
			parseMessage(phost);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7fe ff73 	bl	8007ea0 <parseMessage>
		 {
			 //USBH_XPAD_Led(phost, LED1_ON);
			 USBH_XPAD_Start(phost);
		 }
	}
}
 8008fba:	e016      	b.n	8008fea <XPAD_360_WIRELESS_ProcessInputData+0x6e>
		else if(report[1] == 0x0f)
 8008fbc:	4b0d      	ldr	r3, [pc, #52]	; (8008ff4 <XPAD_360_WIRELESS_ProcessInputData+0x78>)
 8008fbe:	785b      	ldrb	r3, [r3, #1]
 8008fc0:	2b0f      	cmp	r3, #15
 8008fc2:	d112      	bne.n	8008fea <XPAD_360_WIRELESS_ProcessInputData+0x6e>
			USBH_XPAD_Led(phost, LED1_ON);
 8008fc4:	2106      	movs	r1, #6
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f8ba 	bl	8009140 <USBH_XPAD_Led>
			USBH_XPAD_Start(phost);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f847 	bl	8009060 <USBH_XPAD_Start>
}
 8008fd2:	e00a      	b.n	8008fea <XPAD_360_WIRELESS_ProcessInputData+0x6e>
	else if(report[0] == 0x08)
 8008fd4:	4b07      	ldr	r3, [pc, #28]	; (8008ff4 <XPAD_360_WIRELESS_ProcessInputData+0x78>)
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	2b08      	cmp	r3, #8
 8008fda:	d106      	bne.n	8008fea <XPAD_360_WIRELESS_ProcessInputData+0x6e>
		 if(report[1] == 0x80)
 8008fdc:	4b05      	ldr	r3, [pc, #20]	; (8008ff4 <XPAD_360_WIRELESS_ProcessInputData+0x78>)
 8008fde:	785b      	ldrb	r3, [r3, #1]
 8008fe0:	2b80      	cmp	r3, #128	; 0x80
 8008fe2:	d102      	bne.n	8008fea <XPAD_360_WIRELESS_ProcessInputData+0x6e>
			 USBH_XPAD_Start(phost);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f83b 	bl	8009060 <USBH_XPAD_Start>
}
 8008fea:	bf00      	nop
 8008fec:	3708      	adds	r7, #8
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	20000154 	.word	0x20000154

08008ff8 <XPAD_360_WIRED_ProcessInputData>:

void XPAD_360_WIRED_ProcessInputData(USBH_HandleTypeDef *phost)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
	if(report[0] == 0x00)
 8009000:	4b07      	ldr	r3, [pc, #28]	; (8009020 <XPAD_360_WIRED_ProcessInputData+0x28>)
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d106      	bne.n	8009016 <XPAD_360_WIRED_ProcessInputData+0x1e>
	{
		if(report[1] == 0x14)
 8009008:	4b05      	ldr	r3, [pc, #20]	; (8009020 <XPAD_360_WIRED_ProcessInputData+0x28>)
 800900a:	785b      	ldrb	r3, [r3, #1]
 800900c:	2b14      	cmp	r3, #20
 800900e:	d102      	bne.n	8009016 <XPAD_360_WIRED_ProcessInputData+0x1e>
		{
			// Event data
			parseMessage(phost);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7fe ff45 	bl	8007ea0 <parseMessage>
		}
	}
}
 8009016:	bf00      	nop
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	20000154 	.word	0x20000154

08009024 <XPAD_XBONE_ProcessInputData>:

void XPAD_XBONE_ProcessInputData(USBH_HandleTypeDef *phost)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
	if(report[0] == 0x02) // auth
 800902c:	4b0b      	ldr	r3, [pc, #44]	; (800905c <XPAD_XBONE_ProcessInputData+0x38>)
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	2b02      	cmp	r3, #2
 8009032:	d107      	bne.n	8009044 <XPAD_XBONE_ProcessInputData+0x20>
	{
		if(report[1] == 0x20) // request
 8009034:	4b09      	ldr	r3, [pc, #36]	; (800905c <XPAD_XBONE_ProcessInputData+0x38>)
 8009036:	785b      	ldrb	r3, [r3, #1]
 8009038:	2b20      	cmp	r3, #32
 800903a:	d10a      	bne.n	8009052 <XPAD_XBONE_ProcessInputData+0x2e>
		{
			USBH_XPAD_Start(phost);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f80f 	bl	8009060 <USBH_XPAD_Start>
	else if(report[0] == 0x20)
	{
		// buttons update
		parseMessage(phost);
	}
}
 8009042:	e006      	b.n	8009052 <XPAD_XBONE_ProcessInputData+0x2e>
	else if(report[0] == 0x20)
 8009044:	4b05      	ldr	r3, [pc, #20]	; (800905c <XPAD_XBONE_ProcessInputData+0x38>)
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	2b20      	cmp	r3, #32
 800904a:	d102      	bne.n	8009052 <XPAD_XBONE_ProcessInputData+0x2e>
		parseMessage(phost);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7fe ff27 	bl	8007ea0 <parseMessage>
}
 8009052:	bf00      	nop
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	20000154 	.word	0x20000154

08009060 <USBH_XPAD_Start>:

static USBH_StatusTypeDef USBH_XPAD_Start(USBH_HandleTypeDef *phost)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b08c      	sub	sp, #48	; 0x30
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
	XPAD_HandleTypeDef *XPAD_Handle =  (XPAD_HandleTypeDef *) phost->pActiveClass->pData;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 800906e:	69db      	ldr	r3, [r3, #28]
 8009070:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t odata[32];
	memset(odata, 0, sizeof(odata));
 8009072:	f107 030c 	add.w	r3, r7, #12
 8009076:	2220      	movs	r2, #32
 8009078:	2100      	movs	r1, #0
 800907a:	4618      	mov	r0, r3
 800907c:	f002 fed9 	bl	800be32 <memset>
	switch(XPAD_Handle->xpad_type)
 8009080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009082:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009086:	2b02      	cmp	r3, #2
 8009088:	db52      	blt.n	8009130 <USBH_XPAD_Start+0xd0>
 800908a:	2b03      	cmp	r3, #3
 800908c:	dd02      	ble.n	8009094 <USBH_XPAD_Start+0x34>
 800908e:	2b04      	cmp	r3, #4
 8009090:	d00c      	beq.n	80090ac <USBH_XPAD_Start+0x4c>
			odata[3] = 0x01;
			odata[4] = 0x00;
			return USBH_InterruptSendData(phost,odata,5,XPAD_Handle->OutPipe);
			break;
		default:
			break;
 8009092:	e04d      	b.n	8009130 <USBH_XPAD_Start+0xd0>
			odata[3] = 0x40;
 8009094:	2340      	movs	r3, #64	; 0x40
 8009096:	73fb      	strb	r3, [r7, #15]
			return USBH_InterruptSendData(phost,odata,12,XPAD_Handle->OutPipe);
 8009098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	f107 010c 	add.w	r1, r7, #12
 80090a0:	220c      	movs	r2, #12
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f001 fb94 	bl	800a7d0 <USBH_InterruptSendData>
 80090a8:	4603      	mov	r3, r0
 80090aa:	e043      	b.n	8009134 <USBH_XPAD_Start+0xd4>
			memset(odata, 0, sizeof(odata));
 80090ac:	f107 030c 	add.w	r3, r7, #12
 80090b0:	2220      	movs	r2, #32
 80090b2:	2100      	movs	r1, #0
 80090b4:	4618      	mov	r0, r3
 80090b6:	f002 febc 	bl	800be32 <memset>
			odata[0] = 0x05;
 80090ba:	2305      	movs	r3, #5
 80090bc:	733b      	strb	r3, [r7, #12]
			odata[1] = 0x20;
 80090be:	2320      	movs	r3, #32
 80090c0:	737b      	strb	r3, [r7, #13]
			odata[2] = serial++;
 80090c2:	4b1e      	ldr	r3, [pc, #120]	; (800913c <USBH_XPAD_Start+0xdc>)
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	1c5a      	adds	r2, r3, #1
 80090c8:	b2d1      	uxtb	r1, r2
 80090ca:	4a1c      	ldr	r2, [pc, #112]	; (800913c <USBH_XPAD_Start+0xdc>)
 80090cc:	7011      	strb	r1, [r2, #0]
 80090ce:	73bb      	strb	r3, [r7, #14]
			odata[3] = 0x09;
 80090d0:	2309      	movs	r3, #9
 80090d2:	73fb      	strb	r3, [r7, #15]
			odata[4] = 0x06;
 80090d4:	2306      	movs	r3, #6
 80090d6:	743b      	strb	r3, [r7, #16]
			odata[11] = 0x55;
 80090d8:	2355      	movs	r3, #85	; 0x55
 80090da:	75fb      	strb	r3, [r7, #23]
			odata[12] = 0x53;
 80090dc:	2353      	movs	r3, #83	; 0x53
 80090de:	763b      	strb	r3, [r7, #24]
			USBH_InterruptSendData(phost,odata,13,XPAD_Handle->OutPipe);
 80090e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	f107 010c 	add.w	r1, r7, #12
 80090e8:	220d      	movs	r2, #13
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f001 fb70 	bl	800a7d0 <USBH_InterruptSendData>
			memset(odata, 0, sizeof(odata));
 80090f0:	f107 030c 	add.w	r3, r7, #12
 80090f4:	2220      	movs	r2, #32
 80090f6:	2100      	movs	r1, #0
 80090f8:	4618      	mov	r0, r3
 80090fa:	f002 fe9a 	bl	800be32 <memset>
			odata[0] = 0x05;
 80090fe:	2305      	movs	r3, #5
 8009100:	733b      	strb	r3, [r7, #12]
			odata[1] = 0x20;
 8009102:	2320      	movs	r3, #32
 8009104:	737b      	strb	r3, [r7, #13]
			odata[2] = serial++;
 8009106:	4b0d      	ldr	r3, [pc, #52]	; (800913c <USBH_XPAD_Start+0xdc>)
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	1c5a      	adds	r2, r3, #1
 800910c:	b2d1      	uxtb	r1, r2
 800910e:	4a0b      	ldr	r2, [pc, #44]	; (800913c <USBH_XPAD_Start+0xdc>)
 8009110:	7011      	strb	r1, [r2, #0]
 8009112:	73bb      	strb	r3, [r7, #14]
			odata[3] = 0x01;
 8009114:	2301      	movs	r3, #1
 8009116:	73fb      	strb	r3, [r7, #15]
			odata[4] = 0x00;
 8009118:	2300      	movs	r3, #0
 800911a:	743b      	strb	r3, [r7, #16]
			return USBH_InterruptSendData(phost,odata,5,XPAD_Handle->OutPipe);
 800911c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	f107 010c 	add.w	r1, r7, #12
 8009124:	2205      	movs	r2, #5
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f001 fb52 	bl	800a7d0 <USBH_InterruptSendData>
 800912c:	4603      	mov	r3, r0
 800912e:	e001      	b.n	8009134 <USBH_XPAD_Start+0xd4>
			break;
 8009130:	bf00      	nop
	}
	return USBH_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3730      	adds	r7, #48	; 0x30
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	20000108 	.word	0x20000108

08009140 <USBH_XPAD_Led>:

static USBH_StatusTypeDef USBH_XPAD_Led(USBH_HandleTypeDef *phost,XPAD_LED cmd)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b08c      	sub	sp, #48	; 0x30
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	460b      	mov	r3, r1
 800914a:	70fb      	strb	r3, [r7, #3]
	XPAD_HandleTypeDef *XPAD_Handle =  (XPAD_HandleTypeDef *) phost->pActiveClass->pData;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8009152:	69db      	ldr	r3, [r3, #28]
 8009154:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t odata[32];
	memset(odata, 0, sizeof(odata));
 8009156:	f107 030c 	add.w	r3, r7, #12
 800915a:	2220      	movs	r2, #32
 800915c:	2100      	movs	r1, #0
 800915e:	4618      	mov	r0, r3
 8009160:	f002 fe67 	bl	800be32 <memset>

	switch(XPAD_Handle->xpad_type)
 8009164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009166:	f893 3020 	ldrb.w	r3, [r3, #32]
 800916a:	2b02      	cmp	r3, #2
 800916c:	d014      	beq.n	8009198 <USBH_XPAD_Led+0x58>
 800916e:	2b03      	cmp	r3, #3
 8009170:	d002      	beq.n	8009178 <USBH_XPAD_Led+0x38>
			return USBH_InterruptSendData(phost,odata,4,XPAD_Handle->OutPipe);
			break;
		case XPAD_ORIGINAL:
		case XPAD_XBONE:
		default:
			break;
 8009172:	bf00      	nop
	}
	return USBH_OK;
 8009174:	2300      	movs	r3, #0
 8009176:	e029      	b.n	80091cc <USBH_XPAD_Led+0x8c>
			odata[0] = 0x01;
 8009178:	2301      	movs	r3, #1
 800917a:	733b      	strb	r3, [r7, #12]
			odata[1] = 0x03;
 800917c:	2303      	movs	r3, #3
 800917e:	737b      	strb	r3, [r7, #13]
			odata[2] = cmd;
 8009180:	78fb      	ldrb	r3, [r7, #3]
 8009182:	73bb      	strb	r3, [r7, #14]
			return USBH_InterruptSendData(phost,odata,3,XPAD_Handle->OutPipe);
 8009184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	f107 010c 	add.w	r1, r7, #12
 800918c:	2203      	movs	r2, #3
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f001 fb1e 	bl	800a7d0 <USBH_InterruptSendData>
 8009194:	4603      	mov	r3, r0
 8009196:	e019      	b.n	80091cc <USBH_XPAD_Led+0x8c>
			odata[2] = 0x08;
 8009198:	2308      	movs	r3, #8
 800919a:	73bb      	strb	r3, [r7, #14]
			odata[3] = 0x40 + (cmd % 0x0e);
 800919c:	78fa      	ldrb	r2, [r7, #3]
 800919e:	0853      	lsrs	r3, r2, #1
 80091a0:	490c      	ldr	r1, [pc, #48]	; (80091d4 <USBH_XPAD_Led+0x94>)
 80091a2:	fba1 1303 	umull	r1, r3, r1, r3
 80091a6:	0899      	lsrs	r1, r3, #2
 80091a8:	460b      	mov	r3, r1
 80091aa:	00db      	lsls	r3, r3, #3
 80091ac:	1a5b      	subs	r3, r3, r1
 80091ae:	005b      	lsls	r3, r3, #1
 80091b0:	1ad3      	subs	r3, r2, r3
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	3340      	adds	r3, #64	; 0x40
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	73fb      	strb	r3, [r7, #15]
			return USBH_InterruptSendData(phost,odata,4,XPAD_Handle->OutPipe);
 80091ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	f107 010c 	add.w	r1, r7, #12
 80091c2:	2204      	movs	r2, #4
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f001 fb03 	bl	800a7d0 <USBH_InterruptSendData>
 80091ca:	4603      	mov	r3, r0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3730      	adds	r7, #48	; 0x30
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	92492493 	.word	0x92492493

080091d8 <USBH_XPAD_InterfaceInit>:
  *         The function init the XPAD class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_XPAD_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80091d8:	b590      	push	{r4, r7, lr}
 80091da:	b08b      	sub	sp, #44	; 0x2c
 80091dc:	af04      	add	r7, sp, #16
 80091de:	6078      	str	r0, [r7, #4]
	uint8_t max_ep;
	uint8_t num = 0;
 80091e0:	2300      	movs	r3, #0
 80091e2:	75fb      	strb	r3, [r7, #23]
	uint8_t interface;

	XPAD_HandleTypeDef *XPAD_Handle;
	XPAD_TypeTypeDef ctype = XPAD_UNKNOWN;
 80091e4:	23ff      	movs	r3, #255	; 0xff
 80091e6:	757b      	strb	r3, [r7, #21]

	memset(report,0,sizeof(report));
 80091e8:	2220      	movs	r2, #32
 80091ea:	2100      	movs	r1, #0
 80091ec:	4891      	ldr	r0, [pc, #580]	; (8009434 <USBH_XPAD_InterfaceInit+0x25c>)
 80091ee:	f002 fe20 	bl	800be32 <memset>

	// phost, class, subclass, protocol
	interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0x5D, 0x81); // X360 wireless
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 80091f8:	7919      	ldrb	r1, [r3, #4]
 80091fa:	2381      	movs	r3, #129	; 0x81
 80091fc:	225d      	movs	r2, #93	; 0x5d
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fa8b 	bl	800971a <USBH_FindInterface>
 8009204:	4603      	mov	r3, r0
 8009206:	75bb      	strb	r3, [r7, #22]

	if (interface == 0xFF)
 8009208:	7dbb      	ldrb	r3, [r7, #22]
 800920a:	2bff      	cmp	r3, #255	; 0xff
 800920c:	d123      	bne.n	8009256 <USBH_XPAD_InterfaceInit+0x7e>
	{
		interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0x5D, 0x01); // X360 wired
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8009214:	7919      	ldrb	r1, [r3, #4]
 8009216:	2301      	movs	r3, #1
 8009218:	225d      	movs	r2, #93	; 0x5d
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fa7d 	bl	800971a <USBH_FindInterface>
 8009220:	4603      	mov	r3, r0
 8009222:	75bb      	strb	r3, [r7, #22]

		if (interface == 0xFF)
 8009224:	7dbb      	ldrb	r3, [r7, #22]
 8009226:	2bff      	cmp	r3, #255	; 0xff
 8009228:	d112      	bne.n	8009250 <USBH_XPAD_InterfaceInit+0x78>
		{
			  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0x47, 0xD0); // XBONE wired
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8009230:	7919      	ldrb	r1, [r3, #4]
 8009232:	23d0      	movs	r3, #208	; 0xd0
 8009234:	2247      	movs	r2, #71	; 0x47
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 fa6f 	bl	800971a <USBH_FindInterface>
 800923c:	4603      	mov	r3, r0
 800923e:	75bb      	strb	r3, [r7, #22]

			  if(interface == 0xFF) /* No Valid Interface */
 8009240:	7dbb      	ldrb	r3, [r7, #22]
 8009242:	2bff      	cmp	r3, #255	; 0xff
 8009244:	d101      	bne.n	800924a <USBH_XPAD_InterfaceInit+0x72>
			  {
				USBH_DbgLog ("Cannot Find any valid interface for %s class.", phost->pActiveClass->Name);
				return USBH_FAIL;
 8009246:	2302      	movs	r3, #2
 8009248:	e0ef      	b.n	800942a <USBH_XPAD_InterfaceInit+0x252>
			  }
			  else
			  {
				  ctype = XPAD_XBONE;
 800924a:	2304      	movs	r3, #4
 800924c:	757b      	strb	r3, [r7, #21]
 800924e:	e004      	b.n	800925a <USBH_XPAD_InterfaceInit+0x82>
			  }
		}
		else
		{
			ctype = XPAD_360_WIRED;
 8009250:	2303      	movs	r3, #3
 8009252:	757b      	strb	r3, [r7, #21]
 8009254:	e001      	b.n	800925a <USBH_XPAD_InterfaceInit+0x82>
		}
	}
	else
	{
		ctype = XPAD_360_WIRELESS;
 8009256:	2302      	movs	r3, #2
 8009258:	757b      	strb	r3, [r7, #21]
	}
	type = CONTROLLER_XPAD;
 800925a:	4b77      	ldr	r3, [pc, #476]	; (8009438 <USBH_XPAD_InterfaceInit+0x260>)
 800925c:	2201      	movs	r2, #1
 800925e:	701a      	strb	r2, [r3, #0]

	// open endpoints and stuff
	serial = 0;
 8009260:	4b76      	ldr	r3, [pc, #472]	; (800943c <USBH_XPAD_InterfaceInit+0x264>)
 8009262:	2200      	movs	r2, #0
 8009264:	701a      	strb	r2, [r3, #0]
	USBH_SelectInterface (phost, interface);
 8009266:	7dbb      	ldrb	r3, [r7, #22]
 8009268:	4619      	mov	r1, r3
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fa42 	bl	80096f4 <USBH_SelectInterface>
	phost->pActiveClass->pData = (XPAD_HandleTypeDef *)USBH_malloc (sizeof(XPAD_HandleTypeDef));
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 4714 	ldr.w	r4, [r3, #1812]	; 0x714
 8009276:	2024      	movs	r0, #36	; 0x24
 8009278:	f002 fdc0 	bl	800bdfc <malloc>
 800927c:	4603      	mov	r3, r0
 800927e:	61e3      	str	r3, [r4, #28]
	XPAD_Handle =  (XPAD_HandleTypeDef *) phost->pActiveClass->pData;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8009286:	69db      	ldr	r3, [r3, #28]
 8009288:	613b      	str	r3, [r7, #16]

	XPAD_Handle->state     = XPAD_INIT;
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	2200      	movs	r2, #0
 800928e:	709a      	strb	r2, [r3, #2]
	XPAD_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 361f 	ldrb.w	r3, [r3, #1567]	; 0x61f
 8009296:	4619      	mov	r1, r3
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	231a      	movs	r3, #26
 800929c:	fb03 f301 	mul.w	r3, r3, r1
 80092a0:	4413      	add	r3, r2
 80092a2:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 80092a6:	781a      	ldrb	r2, [r3, #0]
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	739a      	strb	r2, [r3, #14]
	XPAD_Handle->length    = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 361f 	ldrb.w	r3, [r3, #1567]	; 0x61f
 80092b2:	4619      	mov	r1, r3
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	231a      	movs	r3, #26
 80092b8:	fb03 f301 	mul.w	r3, r3, r1
 80092bc:	4413      	add	r3, r2
 80092be:	f203 634a 	addw	r3, r3, #1610	; 0x64a
 80092c2:	881a      	ldrh	r2, [r3, #0]
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	819a      	strh	r2, [r3, #12]
	XPAD_Handle->poll      = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bInterval;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 361f 	ldrb.w	r3, [r3, #1567]	; 0x61f
 80092ce:	4619      	mov	r1, r3
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	231a      	movs	r3, #26
 80092d4:	fb03 f301 	mul.w	r3, r3, r1
 80092d8:	4413      	add	r3, r2
 80092da:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	821a      	strh	r2, [r3, #16]
	XPAD_Handle->xpad_type = ctype;
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	7d7a      	ldrb	r2, [r7, #21]
 80092ea:	f883 2020 	strb.w	r2, [r3, #32]

	/* Check for available number of endpoints */
	/* Find the number of EPs in the Interface Descriptor */
	/* Choose the lower number in order not to overrun the buffer allocated */
	max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
			  phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints :
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 361f 	ldrb.w	r3, [r3, #1567]	; 0x61f
 80092f4:	4619      	mov	r1, r3
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	231a      	movs	r3, #26
 80092fa:	fb03 f301 	mul.w	r3, r3, r1
 80092fe:	4413      	add	r3, r2
 8009300:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8009304:	781b      	ldrb	r3, [r3, #0]
	max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8009306:	2b02      	cmp	r3, #2
 8009308:	bf28      	it	cs
 800930a:	2302      	movcs	r3, #2
 800930c:	73fb      	strb	r3, [r7, #15]
				  USBH_MAX_NUM_ENDPOINTS);


	/* Decode endpoint IN and OUT address from interface descriptor */
	for ( ;num < max_ep; num++)
 800930e:	e086      	b.n	800941e <USBH_XPAD_InterfaceInit+0x246>
	{
	  if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress & 0x80)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f893 361f 	ldrb.w	r3, [r3, #1567]	; 0x61f
 8009316:	4618      	mov	r0, r3
 8009318:	7dfb      	ldrb	r3, [r7, #23]
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	3301      	adds	r3, #1
 800931e:	00d9      	lsls	r1, r3, #3
 8009320:	231a      	movs	r3, #26
 8009322:	fb03 f300 	mul.w	r3, r3, r0
 8009326:	440b      	add	r3, r1
 8009328:	4413      	add	r3, r2
 800932a:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	b25b      	sxtb	r3, r3
 8009332:	2b00      	cmp	r3, #0
 8009334:	da38      	bge.n	80093a8 <USBH_XPAD_InterfaceInit+0x1d0>
	  {
		  XPAD_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f893 361f 	ldrb.w	r3, [r3, #1567]	; 0x61f
 800933c:	4618      	mov	r0, r3
 800933e:	7dfb      	ldrb	r3, [r7, #23]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	3301      	adds	r3, #1
 8009344:	00d9      	lsls	r1, r3, #3
 8009346:	231a      	movs	r3, #26
 8009348:	fb03 f300 	mul.w	r3, r3, r0
 800934c:	440b      	add	r3, r1
 800934e:	4413      	add	r3, r2
 8009350:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8009354:	781a      	ldrb	r2, [r3, #0]
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	711a      	strb	r2, [r3, #4]
		  XPAD_Handle->InPipe  =\
		  USBH_AllocPipe(phost, XPAD_Handle->InEp);
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	791b      	ldrb	r3, [r3, #4]
 800935e:	4619      	mov	r1, r3
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f001 fa83 	bl	800a86c <USBH_AllocPipe>
 8009366:	4603      	mov	r3, r0
 8009368:	461a      	mov	r2, r3
		  XPAD_Handle->InPipe  =\
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	705a      	strb	r2, [r3, #1]

		/* Open pipe for IN endpoint */
		USBH_OpenPipe  (phost,
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	7859      	ldrb	r1, [r3, #1]
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	7918      	ldrb	r0, [r3, #4]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 461c 	ldrb.w	r4, [r3, #1564]	; 0x61c
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 361d 	ldrb.w	r3, [r3, #1565]	; 0x61d
 8009382:	693a      	ldr	r2, [r7, #16]
 8009384:	8992      	ldrh	r2, [r2, #12]
 8009386:	9202      	str	r2, [sp, #8]
 8009388:	2203      	movs	r2, #3
 800938a:	9201      	str	r2, [sp, #4]
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	4623      	mov	r3, r4
 8009390:	4602      	mov	r2, r0
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f001 fa3b 	bl	800a80e <USBH_OpenPipe>
						phost->device.address,
						phost->device.speed,
						USB_EP_TYPE_INTR,
						XPAD_Handle->length);

		USBH_LL_SetToggle (phost, XPAD_Handle->InPipe, 0);
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	785b      	ldrb	r3, [r3, #1]
 800939c:	2200      	movs	r2, #0
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f002 fc9e 	bl	800bce2 <USBH_LL_SetToggle>
 80093a6:	e037      	b.n	8009418 <USBH_XPAD_InterfaceInit+0x240>

	  }
	  else
	  {
		  XPAD_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 361f 	ldrb.w	r3, [r3, #1567]	; 0x61f
 80093ae:	4618      	mov	r0, r3
 80093b0:	7dfb      	ldrb	r3, [r7, #23]
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	3301      	adds	r3, #1
 80093b6:	00d9      	lsls	r1, r3, #3
 80093b8:	231a      	movs	r3, #26
 80093ba:	fb03 f300 	mul.w	r3, r3, r0
 80093be:	440b      	add	r3, r1
 80093c0:	4413      	add	r3, r2
 80093c2:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80093c6:	781a      	ldrb	r2, [r3, #0]
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	70da      	strb	r2, [r3, #3]
		  XPAD_Handle->OutPipe  =\
		  USBH_AllocPipe(phost, XPAD_Handle->OutEp);
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	78db      	ldrb	r3, [r3, #3]
 80093d0:	4619      	mov	r1, r3
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f001 fa4a 	bl	800a86c <USBH_AllocPipe>
 80093d8:	4603      	mov	r3, r0
 80093da:	461a      	mov	r2, r3
		  XPAD_Handle->OutPipe  =\
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	701a      	strb	r2, [r3, #0]

		/* Open pipe for OUT endpoint */
		USBH_OpenPipe  (phost,
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	7819      	ldrb	r1, [r3, #0]
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	78d8      	ldrb	r0, [r3, #3]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 461c 	ldrb.w	r4, [r3, #1564]	; 0x61c
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 361d 	ldrb.w	r3, [r3, #1565]	; 0x61d
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	8992      	ldrh	r2, [r2, #12]
 80093f8:	9202      	str	r2, [sp, #8]
 80093fa:	2203      	movs	r2, #3
 80093fc:	9201      	str	r2, [sp, #4]
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	4623      	mov	r3, r4
 8009402:	4602      	mov	r2, r0
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f001 fa02 	bl	800a80e <USBH_OpenPipe>
						phost->device.address,
						phost->device.speed,
						USB_EP_TYPE_INTR,
						XPAD_Handle->length);

		USBH_LL_SetToggle (phost, XPAD_Handle->OutPipe, 0);
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	2200      	movs	r2, #0
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f002 fc65 	bl	800bce2 <USBH_LL_SetToggle>
	for ( ;num < max_ep; num++)
 8009418:	7dfb      	ldrb	r3, [r7, #23]
 800941a:	3301      	adds	r3, #1
 800941c:	75fb      	strb	r3, [r7, #23]
 800941e:	7dfa      	ldrb	r2, [r7, #23]
 8009420:	7bfb      	ldrb	r3, [r7, #15]
 8009422:	429a      	cmp	r2, r3
 8009424:	f4ff af74 	bcc.w	8009310 <USBH_XPAD_InterfaceInit+0x138>
	  }

	}

	return USBH_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	371c      	adds	r7, #28
 800942e:	46bd      	mov	sp, r7
 8009430:	bd90      	pop	{r4, r7, pc}
 8009432:	bf00      	nop
 8009434:	20000154 	.word	0x20000154
 8009438:	2000010c 	.word	0x2000010c
 800943c:	20000108 	.word	0x20000108

08009440 <USBH_XPAD_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the XPAD class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_XPAD_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  XPAD_HandleTypeDef *XPAD_Handle =  (XPAD_HandleTypeDef *) phost->pActiveClass->pData;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 800944e:	69db      	ldr	r3, [r3, #28]
 8009450:	60fb      	str	r3, [r7, #12]

  if(XPAD_Handle->InPipe != 0x00)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	785b      	ldrb	r3, [r3, #1]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00e      	beq.n	8009478 <USBH_XPAD_InterfaceDeInit+0x38>
  {
	USBH_ClosePipe  (phost, XPAD_Handle->InPipe);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	785b      	ldrb	r3, [r3, #1]
 800945e:	4619      	mov	r1, r3
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f001 f9f3 	bl	800a84c <USBH_ClosePipe>
	USBH_FreePipe  (phost, XPAD_Handle->InPipe);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	785b      	ldrb	r3, [r3, #1]
 800946a:	4619      	mov	r1, r3
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f001 fa1e 	bl	800a8ae <USBH_FreePipe>
	XPAD_Handle->InPipe = 0;     /* Reset the pipe as Free */
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2200      	movs	r2, #0
 8009476:	705a      	strb	r2, [r3, #1]
  }

  if(XPAD_Handle->OutPipe != 0x00)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00e      	beq.n	800949e <USBH_XPAD_InterfaceDeInit+0x5e>
  {
	USBH_ClosePipe(phost, XPAD_Handle->OutPipe);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	4619      	mov	r1, r3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f001 f9e0 	bl	800a84c <USBH_ClosePipe>
	USBH_FreePipe  (phost, XPAD_Handle->OutPipe);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	4619      	mov	r1, r3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f001 fa0b 	bl	800a8ae <USBH_FreePipe>
	XPAD_Handle->OutPipe = 0;     /* Reset the pipe as Free */
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	701a      	strb	r2, [r3, #0]
  }

  if(phost->pActiveClass->pData)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 80094a4:	69db      	ldr	r3, [r3, #28]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d006      	beq.n	80094b8 <USBH_XPAD_InterfaceDeInit+0x78>
  {
	USBH_free(phost->pActiveClass->pData);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 80094b0:	69db      	ldr	r3, [r3, #28]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f002 fcaa 	bl	800be0c <free>
  }

  serial = 0;
 80094b8:	4b05      	ldr	r3, [pc, #20]	; (80094d0 <USBH_XPAD_InterfaceDeInit+0x90>)
 80094ba:	2200      	movs	r2, #0
 80094bc:	701a      	strb	r2, [r3, #0]
  type = CONTROLLER_NONE;
 80094be:	4b05      	ldr	r3, [pc, #20]	; (80094d4 <USBH_XPAD_InterfaceDeInit+0x94>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	701a      	strb	r2, [r3, #0]

  return USBH_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	20000108 	.word	0x20000108
 80094d4:	2000010c 	.word	0x2000010c

080094d8 <USBH_XPAD_ClassRequest>:
  *         for XPAD class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_XPAD_ClassRequest (USBH_HandleTypeDef *phost)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
	// should be fine to keep this blank since there are no standard class requests for a custom class!
	return USBH_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	370c      	adds	r7, #12
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
	...

080094f0 <USBH_XPAD_Process>:
  *         The function is for managing state machine for XPAD data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_XPAD_Process (USBH_HandleTypeDef *phost)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
	XPAD_HandleTypeDef *XPAD_Handle =  (XPAD_HandleTypeDef *) phost->pActiveClass->pData;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 80094fe:	69db      	ldr	r3, [r3, #28]
 8009500:	60fb      	str	r3, [r7, #12]

	switch(XPAD_Handle->state)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	789b      	ldrb	r3, [r3, #2]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d002      	beq.n	8009510 <USBH_XPAD_Process+0x20>
 800950a:	2b01      	cmp	r3, #1
 800950c:	d01d      	beq.n	800954a <USBH_XPAD_Process+0x5a>
				default:
					break;
			}
			break;
		default:
			break;
 800950e:	e03d      	b.n	800958c <USBH_XPAD_Process+0x9c>
			USBH_InterruptReceiveData(phost,report,32,XPAD_Handle->InPipe);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	785b      	ldrb	r3, [r3, #1]
 8009514:	2220      	movs	r2, #32
 8009516:	4920      	ldr	r1, [pc, #128]	; (8009598 <USBH_XPAD_Process+0xa8>)
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f001 f93a 	bl	800a792 <USBH_InterruptReceiveData>
			USBH_Delay(100);
 800951e:	2064      	movs	r0, #100	; 0x64
 8009520:	f002 fc12 	bl	800bd48 <USBH_Delay>
			switch(XPAD_Handle->xpad_type)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f893 3020 	ldrb.w	r3, [r3, #32]
 800952a:	2b03      	cmp	r3, #3
 800952c:	d104      	bne.n	8009538 <USBH_XPAD_Process+0x48>
					USBH_XPAD_Led(phost, LED1_ON);
 800952e:	2106      	movs	r1, #6
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f7ff fe05 	bl	8009140 <USBH_XPAD_Led>
					break;
 8009536:	e004      	b.n	8009542 <USBH_XPAD_Process+0x52>
					USBH_XPAD_Led(phost, LED_OFF);
 8009538:	2100      	movs	r1, #0
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7ff fe00 	bl	8009140 <USBH_XPAD_Led>
					break;
 8009540:	bf00      	nop
			XPAD_Handle->state = XPAD_IDLE;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2201      	movs	r2, #1
 8009546:	709a      	strb	r2, [r3, #2]
			break;
 8009548:	e020      	b.n	800958c <USBH_XPAD_Process+0x9c>
			USBH_InterruptReceiveData(phost,report,32,XPAD_Handle->InPipe);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	785b      	ldrb	r3, [r3, #1]
 800954e:	2220      	movs	r2, #32
 8009550:	4911      	ldr	r1, [pc, #68]	; (8009598 <USBH_XPAD_Process+0xa8>)
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f001 f91d 	bl	800a792 <USBH_InterruptReceiveData>
			USBH_Delay(1);
 8009558:	2001      	movs	r0, #1
 800955a:	f002 fbf5 	bl	800bd48 <USBH_Delay>
			switch(XPAD_Handle->xpad_type)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009564:	2b03      	cmp	r3, #3
 8009566:	d008      	beq.n	800957a <USBH_XPAD_Process+0x8a>
 8009568:	2b04      	cmp	r3, #4
 800956a:	d00a      	beq.n	8009582 <USBH_XPAD_Process+0x92>
 800956c:	2b02      	cmp	r3, #2
 800956e:	d000      	beq.n	8009572 <USBH_XPAD_Process+0x82>
					break;
 8009570:	e00b      	b.n	800958a <USBH_XPAD_Process+0x9a>
					XPAD_360_WIRELESS_ProcessInputData(phost);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7ff fd02 	bl	8008f7c <XPAD_360_WIRELESS_ProcessInputData>
					break;
 8009578:	e007      	b.n	800958a <USBH_XPAD_Process+0x9a>
					XPAD_360_WIRED_ProcessInputData(phost);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f7ff fd3c 	bl	8008ff8 <XPAD_360_WIRED_ProcessInputData>
					break;
 8009580:	e003      	b.n	800958a <USBH_XPAD_Process+0x9a>
					XPAD_XBONE_ProcessInputData(phost);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f7ff fd4e 	bl	8009024 <XPAD_XBONE_ProcessInputData>
					break;
 8009588:	bf00      	nop
			break;
 800958a:	bf00      	nop
	}
 
	return USBH_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	20000154 	.word	0x20000154

0800959c <USBH_XPAD_SOFProcess>:

static USBH_StatusTypeDef USBH_XPAD_SOFProcess (USBH_HandleTypeDef *phost)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  
  return USBH_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t ), uint8_t id)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b084      	sub	sp, #16
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	60f8      	str	r0, [r7, #12]
 80095ba:	60b9      	str	r1, [r7, #8]
 80095bc:	4613      	mov	r3, r2
 80095be:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d101      	bne.n	80095ca <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL; 
 80095c6:	2302      	movs	r3, #2
 80095c8:	e019      	b.n	80095fe <USBH_Init+0x4c>
  }
  
  /* Set DRiver ID */
  phost->id = id;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	79fa      	ldrb	r2, [r7, #7]
 80095ce:	f883 275c 	strb.w	r2, [r3, #1884]	; 0x75c
  
  /* Unlink class*/
  phost->pActiveClass = NULL;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
  phost->ClassNumber = 0;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2200      	movs	r2, #0
 80095de:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
  
  /* Restore default states and prepare EP0 */ 
  DeInitStateMachine(phost);
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	f000 f80f 	bl	8009606 <DeInitStateMachine>
  
  /* Assign User process */
  if(pUsrFunc != NULL)
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d003      	beq.n	80095f6 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	f8c3 2764 	str.w	r2, [r3, #1892]	; 0x764
#endif  
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
#endif  
  
  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f002 f992 	bl	800b920 <USBH_LL_Init>
  return USBH_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009606:	b480      	push	{r7}
 8009608:	b085      	sub	sp, #20
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8009612:	e00a      	b.n	800962a <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0;
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	4413      	add	r3, r2
 8009620:	2200      	movs	r2, #0
 8009622:	605a      	str	r2, [r3, #4]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	3301      	adds	r3, #1
 8009628:	60fb      	str	r3, [r7, #12]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2b0e      	cmp	r3, #14
 800962e:	d9f1      	bls.n	8009614 <DeInitStateMachine+0xe>
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 8009630:	2300      	movs	r3, #0
 8009632:	60fb      	str	r3, [r7, #12]
 8009634:	e009      	b.n	800964a <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0;
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	4413      	add	r3, r2
 800963c:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8009640:	2200      	movs	r2, #0
 8009642:	701a      	strb	r2, [r3, #0]
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	3301      	adds	r3, #1
 8009648:	60fb      	str	r3, [r7, #12]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009650:	d3f1      	bcc.n	8009636 <DeInitStateMachine+0x30>
  }
  
  phost->gState = HOST_IDLE;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2201      	movs	r2, #1
 8009662:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0;  
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	f8c3 2758 	str.w	r2, [r3, #1880]	; 0x758
  
  phost->Control.state = CTRL_SETUP;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2240      	movs	r2, #64	; 0x40
 8009676:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	765a      	strb	r2, [r3, #25]
  
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	f883 261c 	strb.w	r2, [r3, #1564]	; 0x61c
  phost->device.speed   = USBH_SPEED_FULL;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	f883 261d 	strb.w	r2, [r3, #1565]	; 0x61d
  
  return USBH_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3714      	adds	r7, #20
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 80096a6:	2300      	movs	r3, #0
 80096a8:	73fb      	strb	r3, [r7, #15]
  
  if(pclass != 0)
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d018      	beq.n	80096e2 <USBH_RegisterClass+0x46>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 3718 	ldr.w	r3, [r3, #1816]	; 0x718
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d810      	bhi.n	80096dc <USBH_RegisterClass+0x40>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 3718 	ldr.w	r3, [r3, #1816]	; 0x718
 80096c0:	1c59      	adds	r1, r3, #1
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	f8c2 1718 	str.w	r1, [r2, #1816]	; 0x718
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	4413      	add	r3, r2
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80096d6:	2300      	movs	r3, #0
 80096d8:	73fb      	strb	r3, [r7, #15]
 80096da:	e004      	b.n	80096e6 <USBH_RegisterClass+0x4a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL; 
 80096dc:	2302      	movs	r3, #2
 80096de:	73fb      	strb	r3, [r7, #15]
 80096e0:	e001      	b.n	80096e6 <USBH_RegisterClass+0x4a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL; 
 80096e2:	2302      	movs	r3, #2
 80096e4:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80096e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3714      	adds	r7, #20
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	460b      	mov	r3, r1
 80096fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8009700:	2300      	movs	r3, #0
 8009702:	73fb      	strb	r3, [r7, #15]
  // This check got removed because, for example, the DS4v2 controller has 4 interfaces
  // but one interface has two entries for some reason so the driver reads it as 5 interfaces
  // since 5 is not less than bNumInterfaces(4), it fails to select the interface :(
  //if(interface < phost->device.CfgDesc.bNumInterfaces)
  //{
    phost->device.current_interface = interface;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	78fa      	ldrb	r2, [r7, #3]
 8009708:	f883 261f 	strb.w	r2, [r3, #1567]	; 0x61f
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL; 
  }*/
  return status;  
 800970c:	7bfb      	ldrb	r3, [r7, #15]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3714      	adds	r7, #20
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr

0800971a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800971a:	b480      	push	{r7}
 800971c:	b087      	sub	sp, #28
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	4608      	mov	r0, r1
 8009724:	4611      	mov	r1, r2
 8009726:	461a      	mov	r2, r3
 8009728:	4603      	mov	r3, r0
 800972a:	70fb      	strb	r3, [r7, #3]
 800972c:	460b      	mov	r3, r1
 800972e:	70bb      	strb	r3, [r7, #2]
 8009730:	4613      	mov	r3, r2
 8009732:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  int8_t                        if_ix = 0;
 8009734:	2300      	movs	r3, #0
 8009736:	75fb      	strb	r3, [r7, #23]
  
  pif = (USBH_InterfaceDescTypeDef *)0;
 8009738:	2300      	movs	r3, #0
 800973a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;  
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f203 6332 	addw	r3, r3, #1586	; 0x632
 8009742:	60fb      	str	r3, [r7, #12]
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009744:	e029      	b.n	800979a <USBH_FindInterface+0x80>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009746:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800974a:	221a      	movs	r2, #26
 800974c:	fb02 f303 	mul.w	r3, r2, r3
 8009750:	3308      	adds	r3, #8
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	4413      	add	r3, r2
 8009756:	3302      	adds	r3, #2
 8009758:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	795b      	ldrb	r3, [r3, #5]
 800975e:	78fa      	ldrb	r2, [r7, #3]
 8009760:	429a      	cmp	r2, r3
 8009762:	d002      	beq.n	800976a <USBH_FindInterface+0x50>
 8009764:	78fb      	ldrb	r3, [r7, #3]
 8009766:	2bff      	cmp	r3, #255	; 0xff
 8009768:	d111      	bne.n	800978e <USBH_FindInterface+0x74>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 800976e:	78ba      	ldrb	r2, [r7, #2]
 8009770:	429a      	cmp	r2, r3
 8009772:	d002      	beq.n	800977a <USBH_FindInterface+0x60>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8009774:	78bb      	ldrb	r3, [r7, #2]
 8009776:	2bff      	cmp	r3, #255	; 0xff
 8009778:	d109      	bne.n	800978e <USBH_FindInterface+0x74>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 800977e:	787a      	ldrb	r2, [r7, #1]
 8009780:	429a      	cmp	r2, r3
 8009782:	d002      	beq.n	800978a <USBH_FindInterface+0x70>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 8009784:	787b      	ldrb	r3, [r7, #1]
 8009786:	2bff      	cmp	r3, #255	; 0xff
 8009788:	d101      	bne.n	800978e <USBH_FindInterface+0x74>
    {
      return  if_ix;
 800978a:	7dfb      	ldrb	r3, [r7, #23]
 800978c:	e00a      	b.n	80097a4 <USBH_FindInterface+0x8a>
    }
    if_ix++;
 800978e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009792:	b2db      	uxtb	r3, r3
 8009794:	3301      	adds	r3, #1
 8009796:	b2db      	uxtb	r3, r3
 8009798:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800979a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800979e:	2b07      	cmp	r3, #7
 80097a0:	ddd1      	ble.n	8009746 <USBH_FindInterface+0x2c>
  }
  return 0xFF;
 80097a2:	23ff      	movs	r3, #255	; 0xff
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	371c      	adds	r7, #28
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f002 f8f1 	bl	800b9a0 <USBH_LL_Start>
  
  /* Activate VBUS on the port */ 
  USBH_LL_DriverVBUS (phost, TRUE);
 80097be:	2101      	movs	r1, #1
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f002 fa80 	bl	800bcc6 <USBH_LL_DriverVBUS>
  
  return USBH_OK;  
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3708      	adds	r7, #8
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08a      	sub	sp, #40	; 0x28
 80097d4:	af04      	add	r7, sp, #16
 80097d6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80097d8:	2302      	movs	r3, #2
 80097da:	73fb      	strb	r3, [r7, #15]
  uint8_t idx = 0;
 80097dc:	2300      	movs	r3, #0
 80097de:	75fb      	strb	r3, [r7, #23]
  
  switch (phost->gState)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	2b0a      	cmp	r3, #10
 80097e8:	f200 813b 	bhi.w	8009a62 <USBH_Process+0x292>
 80097ec:	a201      	add	r2, pc, #4	; (adr r2, 80097f4 <USBH_Process+0x24>)
 80097ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f2:	bf00      	nop
 80097f4:	08009821 	.word	0x08009821
 80097f8:	08009a63 	.word	0x08009a63
 80097fc:	08009843 	.word	0x08009843
 8009800:	08009a3d 	.word	0x08009a3d
 8009804:	08009a63 	.word	0x08009a63
 8009808:	080098d1 	.word	0x080098d1
 800980c:	080099f3 	.word	0x080099f3
 8009810:	08009901 	.word	0x08009901
 8009814:	08009921 	.word	0x08009921
 8009818:	08009941 	.word	0x08009941
 800981c:	08009a25 	.word	0x08009a25
  {
  case HOST_IDLE :
    
    if (phost->device.is_connected)  
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f893 361e 	ldrb.w	r3, [r3, #1566]	; 0x61e
 8009826:	b2db      	uxtb	r3, r3
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 811c 	beq.w	8009a66 <USBH_Process+0x296>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT; 
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200); 
 8009834:	20c8      	movs	r0, #200	; 0xc8
 8009836:	f002 fa87 	bl	800bd48 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f002 f93a 	bl	800bab4 <USBH_LL_ResetPort>
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif
    }
    break;
 8009840:	e111      	b.n	8009a66 <USBH_Process+0x296>
  case HOST_DEV_ATTACHED :
    
    USBH_UsrLog("USB Device Attached");  
      
    /* Wait for 100 ms after Reset */
    USBH_Delay(100); 
 8009842:	2064      	movs	r0, #100	; 0x64
 8009844:	f002 fa80 	bl	800bd48 <USBH_Delay>
          
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f002 f90d 	bl	800ba68 <USBH_LL_GetSpeed>
 800984e:	4603      	mov	r3, r0
 8009850:	461a      	mov	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f883 261d 	strb.w	r2, [r3, #1565]	; 0x61d
    
    phost->gState = HOST_ENUMERATION;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2205      	movs	r2, #5
 800985c:	701a      	strb	r2, [r3, #0]
    
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 800985e:	2100      	movs	r1, #0
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f001 f803 	bl	800a86c <USBH_AllocPipe>
 8009866:	4603      	mov	r3, r0
 8009868:	461a      	mov	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 800986e:	2180      	movs	r1, #128	; 0x80
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 fffb 	bl	800a86c <USBH_AllocPipe>
 8009876:	4603      	mov	r3, r0
 8009878:	461a      	mov	r2, r3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	711a      	strb	r2, [r3, #4]
    
    
    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	7919      	ldrb	r1, [r3, #4]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f893 061c 	ldrb.w	r0, [r3, #1564]	; 0x61c
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 361d 	ldrb.w	r3, [r3, #1565]	; 0x61d
                   phost->Control.pipe_in,
                   0x80,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size); 
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8009892:	b292      	uxth	r2, r2
 8009894:	9202      	str	r2, [sp, #8]
 8009896:	2200      	movs	r2, #0
 8009898:	9201      	str	r2, [sp, #4]
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	4603      	mov	r3, r0
 800989e:	2280      	movs	r2, #128	; 0x80
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 ffb4 	bl	800a80e <USBH_OpenPipe>
    
    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	7959      	ldrb	r1, [r3, #5]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 061c 	ldrb.w	r0, [r3, #1564]	; 0x61c
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 361d 	ldrb.w	r3, [r3, #1565]	; 0x61d
                   phost->Control.pipe_out,
                   0x00,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size);
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80098ba:	b292      	uxth	r2, r2
 80098bc:	9202      	str	r2, [sp, #8]
 80098be:	2200      	movs	r2, #0
 80098c0:	9201      	str	r2, [sp, #4]
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	4603      	mov	r3, r0
 80098c6:	2200      	movs	r2, #0
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 ffa0 	bl	800a80e <USBH_OpenPipe>
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif    
    
    break;
 80098ce:	e0d9      	b.n	8009a84 <USBH_Process+0x2b4>
    
  case HOST_ENUMERATION:     
    /* Check for enumeration status */  
    if ( USBH_HandleEnum(phost) == USBH_OK)
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 f8dd 	bl	8009a90 <USBH_HandleEnum>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f040 80c6 	bne.w	8009a6a <USBH_Process+0x29a>
    { 
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f883 261f 	strb.w	r2, [r3, #1567]	; 0x61f
      if(phost->device.DevDesc.bNumConfigurations == 1)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 3631 	ldrb.w	r3, [r3, #1585]	; 0x631
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d103      	bne.n	80098f8 <USBH_Process+0x128>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;        
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2208      	movs	r2, #8
 80098f4:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT; 
      }
          
    }
    break;
 80098f6:	e0b8      	b.n	8009a6a <USBH_Process+0x29a>
        phost->gState  = HOST_INPUT; 
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2207      	movs	r2, #7
 80098fc:	701a      	strb	r2, [r3, #0]
    break;
 80098fe:	e0b4      	b.n	8009a6a <USBH_Process+0x29a>
    
  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 8009906:	2b00      	cmp	r3, #0
 8009908:	f000 80b1 	beq.w	8009a6e <USBH_Process+0x29e>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 8009912:	2101      	movs	r1, #1
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2208      	movs	r2, #8
 800991c:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1)
        osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif         
      }
    }
    break;
 800991e:	e0a6      	b.n	8009a6e <USBH_Process+0x29e>
    
  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f893 3637 	ldrb.w	r3, [r3, #1591]	; 0x637
 8009926:	b29b      	uxth	r3, r3
 8009928:	4619      	mov	r1, r3
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fb26 	bl	8009f7c <USBH_SetCfg>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	f040 809d 	bne.w	8009a72 <USBH_Process+0x2a2>
    {
      phost->gState  = HOST_CHECK_CLASS;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2209      	movs	r2, #9
 800993c:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
      
    }      
    
    break;
 800993e:	e098      	b.n	8009a72 <USBH_Process+0x2a2>
    
  case HOST_CHECK_CLASS:
    
    if(phost->ClassNumber == 0)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 3718 	ldr.w	r3, [r3, #1816]	; 0x718
 8009946:	2b00      	cmp	r3, #0
 8009948:	f000 8095 	beq.w	8009a76 <USBH_Process+0x2a6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
      
      for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
 8009954:	2300      	movs	r3, #0
 8009956:	75fb      	strb	r3, [r7, #23]
 8009958:	e028      	b.n	80099ac <USBH_Process+0x1dc>
      {
    	for(int dev_itf_index = 0; dev_itf_index < USBH_MAX_NUM_INTERFACES;dev_itf_index++)
 800995a:	2300      	movs	r3, #0
 800995c:	613b      	str	r3, [r7, #16]
 800995e:	e01f      	b.n	80099a0 <USBH_Process+0x1d0>
    	{
          if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[dev_itf_index].bInterfaceClass)
 8009960:	7dfb      	ldrb	r3, [r7, #23]
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4413      	add	r3, r2
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	791a      	ldrb	r2, [r3, #4]
 8009970:	6879      	ldr	r1, [r7, #4]
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	201a      	movs	r0, #26
 8009976:	fb00 f303 	mul.w	r3, r0, r3
 800997a:	440b      	add	r3, r1
 800997c:	f203 6341 	addw	r3, r3, #1601	; 0x641
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	429a      	cmp	r2, r3
 8009984:	d109      	bne.n	800999a <USBH_Process+0x1ca>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009986:	7dfb      	ldrb	r3, [r7, #23]
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	4413      	add	r3, r2
 8009992:	685a      	ldr	r2, [r3, #4]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
    	for(int dev_itf_index = 0; dev_itf_index < USBH_MAX_NUM_INTERFACES;dev_itf_index++)
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	3301      	adds	r3, #1
 800999e:	613b      	str	r3, [r7, #16]
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	2b07      	cmp	r3, #7
 80099a4:	dddc      	ble.n	8009960 <USBH_Process+0x190>
      for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
 80099a6:	7dfb      	ldrb	r3, [r7, #23]
 80099a8:	3301      	adds	r3, #1
 80099aa:	75fb      	strb	r3, [r7, #23]
 80099ac:	7dfb      	ldrb	r3, [r7, #23]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d9d3      	bls.n	800995a <USBH_Process+0x18a>
          }
    	}
      }
      
      if(phost->pActiveClass != NULL)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d016      	beq.n	80099ea <USBH_Process+0x21a>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	4798      	blx	r3
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d109      	bne.n	80099e2 <USBH_Process+0x212>
        {
          phost->gState  = HOST_CLASS_REQUEST; 
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2206      	movs	r2, #6
 80099d2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);
          
          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 80099da:	2103      	movs	r1, #3
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	4798      	blx	r3
    }
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif 
    break;    
 80099e0:	e049      	b.n	8009a76 <USBH_Process+0x2a6>
          phost->gState  = HOST_ABORT_STATE;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	220c      	movs	r2, #12
 80099e6:	701a      	strb	r2, [r3, #0]
    break;    
 80099e8:	e045      	b.n	8009a76 <USBH_Process+0x2a6>
        phost->gState  = HOST_ABORT_STATE;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	220c      	movs	r2, #12
 80099ee:	701a      	strb	r2, [r3, #0]
    break;    
 80099f0:	e041      	b.n	8009a76 <USBH_Process+0x2a6>
    
  case HOST_CLASS_REQUEST:  
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00f      	beq.n	8009a1c <USBH_Process+0x24c>
    {
      status = phost->pActiveClass->Requests(phost);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8009a02:	691b      	ldr	r3, [r3, #16]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	4798      	blx	r3
 8009a08:	4603      	mov	r3, r0
 8009a0a:	73fb      	strb	r3, [r7, #15]
      
      if(status == USBH_OK)
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d132      	bne.n	8009a7a <USBH_Process+0x2aa>
      {
        phost->gState  = HOST_CLASS;        
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	220a      	movs	r2, #10
 8009a18:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif       
    }
    
    break;    
 8009a1a:	e02e      	b.n	8009a7a <USBH_Process+0x2aa>
      phost->gState  = HOST_ABORT_STATE;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	220c      	movs	r2, #12
 8009a20:	701a      	strb	r2, [r3, #0]
    break;    
 8009a22:	e02a      	b.n	8009a7a <USBH_Process+0x2aa>
  case HOST_CLASS:   
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d027      	beq.n	8009a7e <USBH_Process+0x2ae>
    { 
      phost->pActiveClass->BgndProcess(phost);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8009a34:	695b      	ldr	r3, [r3, #20]
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	4798      	blx	r3
    }
    break;       
 8009a3a:	e020      	b.n	8009a7e <USBH_Process+0x2ae>

  case HOST_DEV_DISCONNECTED :
    
    DeInitStateMachine(phost);  
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f7ff fde2 	bl	8009606 <DeInitStateMachine>
    
    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d01a      	beq.n	8009a82 <USBH_Process+0x2b2>
    {
      phost->pActiveClass->DeInit(phost); 
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
    }     
    break;
 8009a60:	e00f      	b.n	8009a82 <USBH_Process+0x2b2>
    
  case HOST_ABORT_STATE:
  default :
    break;
 8009a62:	bf00      	nop
 8009a64:	e00e      	b.n	8009a84 <USBH_Process+0x2b4>
    break;
 8009a66:	bf00      	nop
 8009a68:	e00c      	b.n	8009a84 <USBH_Process+0x2b4>
    break;
 8009a6a:	bf00      	nop
 8009a6c:	e00a      	b.n	8009a84 <USBH_Process+0x2b4>
    break;
 8009a6e:	bf00      	nop
 8009a70:	e008      	b.n	8009a84 <USBH_Process+0x2b4>
    break;
 8009a72:	bf00      	nop
 8009a74:	e006      	b.n	8009a84 <USBH_Process+0x2b4>
    break;    
 8009a76:	bf00      	nop
 8009a78:	e004      	b.n	8009a84 <USBH_Process+0x2b4>
    break;    
 8009a7a:	bf00      	nop
 8009a7c:	e002      	b.n	8009a84 <USBH_Process+0x2b4>
    break;       
 8009a7e:	bf00      	nop
 8009a80:	e000      	b.n	8009a84 <USBH_Process+0x2b4>
    break;
 8009a82:	bf00      	nop
  }
 return USBH_OK;  
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3718      	adds	r7, #24
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop

08009a90 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b088      	sub	sp, #32
 8009a94:	af04      	add	r7, sp, #16
 8009a96:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;  
 8009a98:	2301      	movs	r3, #1
 8009a9a:	73fb      	strb	r3, [r7, #15]
  
  switch (phost->EnumState)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	785b      	ldrb	r3, [r3, #1]
 8009aa0:	2b07      	cmp	r3, #7
 8009aa2:	f200 80f8 	bhi.w	8009c96 <USBH_HandleEnum+0x206>
 8009aa6:	a201      	add	r2, pc, #4	; (adr r2, 8009aac <USBH_HandleEnum+0x1c>)
 8009aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aac:	08009acd 	.word	0x08009acd
 8009ab0:	08009b3f 	.word	0x08009b3f
 8009ab4:	08009b57 	.word	0x08009b57
 8009ab8:	08009bcd 	.word	0x08009bcd
 8009abc:	08009be3 	.word	0x08009be3
 8009ac0:	08009bff 	.word	0x08009bff
 8009ac4:	08009c33 	.word	0x08009c33
 8009ac8:	08009c67 	.word	0x08009c67
  {
  case ENUM_IDLE:  
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8) == USBH_OK)
 8009acc:	2108      	movs	r1, #8
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f984 	bl	8009ddc <USBH_Get_DevDesc>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	f040 80df 	bne.w	8009c9a <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 2627 	ldrb.w	r2, [r3, #1575]	; 0x627
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	705a      	strb	r2, [r3, #1]
      
      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	7919      	ldrb	r1, [r3, #4]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f893 061c 	ldrb.w	r0, [r3, #1564]	; 0x61c
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f893 361d 	ldrb.w	r3, [r3, #1565]	; 0x61d
                           phost->Control.pipe_in,
                           0x80,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009b00:	b292      	uxth	r2, r2
 8009b02:	9202      	str	r2, [sp, #8]
 8009b04:	2200      	movs	r2, #0
 8009b06:	9201      	str	r2, [sp, #4]
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2280      	movs	r2, #128	; 0x80
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fe7d 	bl	800a80e <USBH_OpenPipe>
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	7959      	ldrb	r1, [r3, #5]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 061c 	ldrb.w	r0, [r3, #1564]	; 0x61c
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 361d 	ldrb.w	r3, [r3, #1565]	; 0x61d
                           phost->Control.pipe_out,
                           0x00,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size);           
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009b28:	b292      	uxth	r2, r2
 8009b2a:	9202      	str	r2, [sp, #8]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	9201      	str	r2, [sp, #4]
 8009b30:	9300      	str	r3, [sp, #0]
 8009b32:	4603      	mov	r3, r0
 8009b34:	2200      	movs	r2, #0
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fe69 	bl	800a80e <USBH_OpenPipe>
      
    }
    break;
 8009b3c:	e0ad      	b.n	8009c9a <USBH_HandleEnum+0x20a>
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8009b3e:	2112      	movs	r1, #18
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 f94b 	bl	8009ddc <USBH_Get_DevDesc>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f040 80a8 	bne.w	8009c9e <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );  
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );  
      
      phost->EnumState = ENUM_SET_ADDR;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2202      	movs	r2, #2
 8009b52:	705a      	strb	r2, [r3, #1]
       
    }
    break;
 8009b54:	e0a3      	b.n	8009c9e <USBH_HandleEnum+0x20e>
   
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8009b56:	2101      	movs	r1, #1
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f9eb 	bl	8009f34 <USBH_SetAddress>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f040 809e 	bne.w	8009ca2 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2);
 8009b66:	2002      	movs	r0, #2
 8009b68:	f002 f8ee 	bl	800bd48 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 261c 	strb.w	r2, [r3, #1564]	; 0x61c
      
      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2203      	movs	r2, #3
 8009b78:	705a      	strb	r2, [r3, #1]
      
      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	7919      	ldrb	r1, [r3, #4]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 061c 	ldrb.w	r0, [r3, #1564]	; 0x61c
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f893 361d 	ldrb.w	r3, [r3, #1565]	; 0x61d
                           phost->Control.pipe_in,
                           0x80,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009b8e:	b292      	uxth	r2, r2
 8009b90:	9202      	str	r2, [sp, #8]
 8009b92:	2200      	movs	r2, #0
 8009b94:	9201      	str	r2, [sp, #4]
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2280      	movs	r2, #128	; 0x80
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 fe36 	bl	800a80e <USBH_OpenPipe>
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	7959      	ldrb	r1, [r3, #5]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f893 061c 	ldrb.w	r0, [r3, #1564]	; 0x61c
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f893 361d 	ldrb.w	r3, [r3, #1565]	; 0x61d
                           phost->Control.pipe_out,
                           0x00,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size);        
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009bb6:	b292      	uxth	r2, r2
 8009bb8:	9202      	str	r2, [sp, #8]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	9201      	str	r2, [sp, #4]
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fe22 	bl	800a80e <USBH_OpenPipe>
    }
    break;
 8009bca:	e06a      	b.n	8009ca2 <USBH_HandleEnum+0x212>
    
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost, 
 8009bcc:	2109      	movs	r1, #9
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f92c 	bl	8009e2c <USBH_Get_CfgDesc>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d165      	bne.n	8009ca6 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2204      	movs	r2, #4
 8009bde:	705a      	strb	r2, [r3, #1]
    }
    break;
 8009be0:	e061      	b.n	8009ca6 <USBH_HandleEnum+0x216>
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost, 
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 8009be8:	4619      	mov	r1, r3
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 f91e 	bl	8009e2c <USBH_Get_CfgDesc>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d159      	bne.n	8009caa <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;       
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2205      	movs	r2, #5
 8009bfa:	705a      	strb	r2, [r3, #1]
    }
    break;
 8009bfc:	e055      	b.n	8009caa <USBH_HandleEnum+0x21a>
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device.DevDesc.iManufacturer != 0)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f893 362e 	ldrb.w	r3, [r3, #1582]	; 0x62e
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d010      	beq.n	8009c2a <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(phost,
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 162e 	ldrb.w	r1, [r3, #1582]	; 0x62e
                               phost->device.DevDesc.iManufacturer, 
                                phost->device.Data , 
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f503 7207 	add.w	r2, r3, #540	; 0x21c
      if ( USBH_Get_StringDesc(phost,
 8009c14:	23ff      	movs	r3, #255	; 0xff
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f92c 	bl	8009e74 <USBH_Get_StringDesc>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d145      	bne.n	8009cae <USBH_HandleEnum+0x21e>
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2206      	movs	r2, #6
 8009c26:	705a      	strb	r2, [r3, #1]
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif       
    }
    break;
 8009c28:	e041      	b.n	8009cae <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2206      	movs	r2, #6
 8009c2e:	705a      	strb	r2, [r3, #1]
    break;
 8009c30:	e03d      	b.n	8009cae <USBH_HandleEnum+0x21e>
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device.DevDesc.iProduct != 0)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 362f 	ldrb.w	r3, [r3, #1583]	; 0x62f
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d010      	beq.n	8009c5e <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f893 162f 	ldrb.w	r1, [r3, #1583]	; 0x62f
                               phost->device.DevDesc.iProduct, 
                               phost->device.Data, 
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f503 7207 	add.w	r2, r3, #540	; 0x21c
      if ( USBH_Get_StringDesc(phost,
 8009c48:	23ff      	movs	r3, #255	; 0xff
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f912 	bl	8009e74 <USBH_Get_StringDesc>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d12d      	bne.n	8009cb2 <USBH_HandleEnum+0x222>
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;        
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2207      	movs	r2, #7
 8009c5a:	705a      	strb	r2, [r3, #1]
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif        
    } 
    break;
 8009c5c:	e029      	b.n	8009cb2 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2207      	movs	r2, #7
 8009c62:	705a      	strb	r2, [r3, #1]
    break;
 8009c64:	e025      	b.n	8009cb2 <USBH_HandleEnum+0x222>
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device.DevDesc.iSerialNumber != 0)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 3630 	ldrb.w	r3, [r3, #1584]	; 0x630
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00f      	beq.n	8009c90 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(phost,
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f893 1630 	ldrb.w	r1, [r3, #1584]	; 0x630
                               phost->device.DevDesc.iSerialNumber, 
                               phost->device.Data, 
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f503 7207 	add.w	r2, r3, #540	; 0x21c
      if ( USBH_Get_StringDesc(phost,
 8009c7c:	23ff      	movs	r3, #255	; 0xff
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 f8f8 	bl	8009e74 <USBH_Get_StringDesc>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d115      	bne.n	8009cb6 <USBH_HandleEnum+0x226>
                               0xff) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)phost->device.Data);
        Status = USBH_OK;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	73fb      	strb	r3, [r7, #15]
      Status = USBH_OK;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif        
    }  
    break;
 8009c8e:	e012      	b.n	8009cb6 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8009c90:	2300      	movs	r3, #0
 8009c92:	73fb      	strb	r3, [r7, #15]
    break;
 8009c94:	e00f      	b.n	8009cb6 <USBH_HandleEnum+0x226>
    
  default:
    break;
 8009c96:	bf00      	nop
 8009c98:	e00e      	b.n	8009cb8 <USBH_HandleEnum+0x228>
    break;
 8009c9a:	bf00      	nop
 8009c9c:	e00c      	b.n	8009cb8 <USBH_HandleEnum+0x228>
    break;
 8009c9e:	bf00      	nop
 8009ca0:	e00a      	b.n	8009cb8 <USBH_HandleEnum+0x228>
    break;
 8009ca2:	bf00      	nop
 8009ca4:	e008      	b.n	8009cb8 <USBH_HandleEnum+0x228>
    break;
 8009ca6:	bf00      	nop
 8009ca8:	e006      	b.n	8009cb8 <USBH_HandleEnum+0x228>
    break;
 8009caa:	bf00      	nop
 8009cac:	e004      	b.n	8009cb8 <USBH_HandleEnum+0x228>
    break;
 8009cae:	bf00      	nop
 8009cb0:	e002      	b.n	8009cb8 <USBH_HandleEnum+0x228>
    break;
 8009cb2:	bf00      	nop
 8009cb4:	e000      	b.n	8009cb8 <USBH_HandleEnum+0x228>
    break;
 8009cb6:	bf00      	nop
  }  
  return Status;
 8009cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop

08009cc4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	683a      	ldr	r2, [r7, #0]
 8009cd2:	f8c3 2758 	str.w	r2, [r3, #1880]	; 0x758
}
 8009cd6:	bf00      	nop
 8009cd8:	370c      	adds	r7, #12
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr

08009ce2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b082      	sub	sp, #8
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 3758 	ldr.w	r3, [r3, #1880]	; 0x758
 8009cf0:	1c5a      	adds	r2, r3, #1
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8c3 2758 	str.w	r2, [r3, #1880]	; 0x758
  USBH_HandleSof(phost);
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f804 	bl	8009d06 <USBH_HandleSof>
}
 8009cfe:	bf00      	nop
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b082      	sub	sp, #8
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	2b0a      	cmp	r3, #10
 8009d16:	d10a      	bne.n	8009d2e <USBH_HandleSof+0x28>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d005      	beq.n	8009d2e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8009d28:	699b      	ldr	r3, [r3, #24]
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	4798      	blx	r3
  }
}
 8009d2e:	bf00      	nop
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b082      	sub	sp, #8
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10f      	bne.n	8009d68 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	f883 261e 	strb.w	r2, [r3, #1566]	; 0x61e
    
    if(phost->pUser != NULL)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00e      	beq.n	8009d78 <USBH_LL_Connect+0x42>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 8009d60:	2104      	movs	r1, #4
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	4798      	blx	r3
 8009d66:	e007      	b.n	8009d78 <USBH_LL_Connect+0x42>
    }
  } 
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d102      	bne.n	8009d78 <USBH_LL_Connect+0x42>
  {
    phost->gState = HOST_DEV_ATTACHED ;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2202      	movs	r2, #2
 8009d76:	701a      	strb	r2, [r3, #0]
  }
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3708      	adds	r7, #8
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b082      	sub	sp, #8
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f001 fe3a 	bl	800ba04 <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	791b      	ldrb	r3, [r3, #4]
 8009d94:	4619      	mov	r1, r3
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fd89 	bl	800a8ae <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	795b      	ldrb	r3, [r3, #5]
 8009da0:	4619      	mov	r1, r3
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 fd83 	bl	800a8ae <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 261e 	strb.w	r2, [r3, #1566]	; 0x61e
   
  if(phost->pUser != NULL)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d005      	beq.n	8009dc6 <USBH_LL_Disconnect+0x44>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 8009dc0:	2105      	movs	r1, #5
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f001 fdea 	bl	800b9a0 <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2203      	movs	r2, #3
 8009dd0:	701a      	strb	r2, [r3, #0]
  
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b086      	sub	sp, #24
 8009de0:	af02      	add	r7, sp, #8
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	460b      	mov	r3, r1
 8009de6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;
  
  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_DEVICE, 
                                  phost->device.Data,
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f503 7207 	add.w	r2, r3, #540	; 0x21c
  if((status = USBH_GetDescriptor(phost,
 8009dee:	78fb      	ldrb	r3, [r7, #3]
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	4613      	mov	r3, r2
 8009df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 f864 	bl	8009eca <USBH_GetDescriptor>
 8009e02:	4603      	mov	r3, r0
 8009e04:	73fb      	strb	r3, [r7, #15]
 8009e06:	7bfb      	ldrb	r3, [r7, #15]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10a      	bne.n	8009e22 <USBH_Get_DevDesc+0x46>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */       
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data, length);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f503 60c4 	add.w	r0, r3, #1568	; 0x620
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8009e18:	78fa      	ldrb	r2, [r7, #3]
 8009e1a:	b292      	uxth	r2, r2
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	f000 f8f4 	bl	800a00a <USBH_ParseDevDesc>
  }
  return status;      
 8009e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,                      
                             uint16_t length)

{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b086      	sub	sp, #24
 8009e30:	af02      	add	r7, sp, #8
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	460b      	mov	r3, r1
 8009e36:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1)  
  pData = phost->device.CfgDesc_Raw;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	331c      	adds	r3, #28
 8009e3c:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif  
  if((status = USBH_GetDescriptor(phost,
 8009e3e:	887b      	ldrh	r3, [r7, #2]
 8009e40:	9300      	str	r3, [sp, #0]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e48:	2100      	movs	r1, #0
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 f83d 	bl	8009eca <USBH_GetDescriptor>
 8009e50:	4603      	mov	r3, r0
 8009e52:	72fb      	strb	r3, [r7, #11]
 8009e54:	7afb      	ldrb	r3, [r7, #11]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d107      	bne.n	8009e6a <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {
    
    /* Commands successfully sent and Response Received  */       
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f203 6332 	addw	r3, r3, #1586	; 0x632
 8009e60:	887a      	ldrh	r2, [r7, #2]
 8009e62:	68f9      	ldr	r1, [r7, #12]
 8009e64:	4618      	mov	r0, r3
 8009e66:	f000 f940 	bl	800a0ea <USBH_ParseCfgDesc>
                       pData,
                       length); 
    
  }
  return status;
 8009e6a:	7afb      	ldrb	r3, [r7, #11]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b088      	sub	sp, #32
 8009e78:	af02      	add	r7, sp, #8
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	607a      	str	r2, [r7, #4]
 8009e7e:	461a      	mov	r2, r3
 8009e80:	460b      	mov	r3, r1
 8009e82:	72fb      	strb	r3, [r7, #11]
 8009e84:	4613      	mov	r3, r2
 8009e86:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8009e88:	7afb      	ldrb	r3, [r7, #11]
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009e90:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                                    
                                  USB_DESC_STRING | string_index, 
                                  phost->device.Data,
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f503 7107 	add.w	r1, r3, #540	; 0x21c
  if((status = USBH_GetDescriptor(phost,
 8009e98:	893b      	ldrh	r3, [r7, #8]
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	68f8      	ldr	r0, [r7, #12]
 8009ea2:	f000 f812 	bl	8009eca <USBH_GetDescriptor>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	75fb      	strb	r3, [r7, #23]
 8009eaa:	7dfb      	ldrb	r3, [r7, #23]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d107      	bne.n	8009ec0 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */       
    USBH_ParseStringDesc(phost->device.Data,buff, length);    
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8009eb6:	893a      	ldrh	r2, [r7, #8]
 8009eb8:	6879      	ldr	r1, [r7, #4]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f000 fa17 	bl	800a2ee <USBH_ParseStringDesc>
  }
  return status;
 8009ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3718      	adds	r7, #24
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,                          
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b084      	sub	sp, #16
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	60f8      	str	r0, [r7, #12]
 8009ed2:	607b      	str	r3, [r7, #4]
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	72fb      	strb	r3, [r7, #11]
 8009ed8:	4613      	mov	r3, r2
 8009eda:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	789b      	ldrb	r3, [r3, #2]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d11c      	bne.n	8009f1e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009ee4:	7afb      	ldrb	r3, [r7, #11]
 8009ee6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009eea:	b2da      	uxtb	r2, r3
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2206      	movs	r2, #6
 8009ef4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	893a      	ldrh	r2, [r7, #8]
 8009efa:	825a      	strh	r2, [r3, #18]
    
    if ((value_idx & 0xff00) == USB_DESC_STRING)
 8009efc:	893b      	ldrh	r3, [r7, #8]
 8009efe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009f02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f06:	d104      	bne.n	8009f12 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f240 4209 	movw	r2, #1033	; 0x409
 8009f0e:	829a      	strh	r2, [r3, #20]
 8009f10:	e002      	b.n	8009f18 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2200      	movs	r2, #0
 8009f16:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length; 
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	8b3a      	ldrh	r2, [r7, #24]
 8009f1c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff , length );     
 8009f1e:	8b3b      	ldrh	r3, [r7, #24]
 8009f20:	461a      	mov	r2, r3
 8009f22:	6879      	ldr	r1, [r7, #4]
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f000 fa30 	bl	800a38a <USBH_CtlReq>
 8009f2a:	4603      	mov	r3, r0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost, 
                                   uint8_t DeviceAddress)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	789b      	ldrb	r3, [r3, #2]
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d10f      	bne.n	8009f68 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;
    
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2205      	movs	r2, #5
 8009f52:	745a      	strb	r2, [r3, #17]
    
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009f54:	78fb      	ldrb	r3, [r7, #3]
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0 , 0 );
 8009f68:	2200      	movs	r2, #0
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 fa0c 	bl	800a38a <USBH_CtlReq>
 8009f72:	4603      	mov	r3, r0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3708      	adds	r7, #8
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <USBH_SetCfg>:
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, 
                               uint16_t cfg_idx)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	460b      	mov	r3, r1
 8009f86:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	789b      	ldrb	r3, [r3, #2]
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d10e      	bne.n	8009fae <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2209      	movs	r2, #9
 8009f9a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	887a      	ldrh	r2, [r7, #2]
 8009fa0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0; 
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	82da      	strh	r2, [r3, #22]
  }
  
  return USBH_CtlReq(phost, 0 , 0 );      
 8009fae:	2200      	movs	r2, #0
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 f9e9 	bl	800a38a <USBH_CtlReq>
 8009fb8:	4603      	mov	r3, r0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <USBH_ClrFeature>:
  * @param  hc_num: Host channel number 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost,
                                   uint8_t ep_num) 
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b082      	sub	sp, #8
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	460b      	mov	r3, r1
 8009fcc:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	789b      	ldrb	r3, [r3, #2]
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d10f      	bne.n	8009ff6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2202      	movs	r2, #2
 8009fda:	741a      	strb	r2, [r3, #16]
      USB_REQ_RECIPIENT_ENDPOINT |
        USB_REQ_TYPE_STANDARD;
    
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009fe8:	78fb      	ldrb	r3, [r7, #3]
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0;           
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0 , 0 );   
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f9c5 	bl	800a38a <USBH_CtlReq>
 800a000:	4603      	mov	r3, r0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <USBH_ParseDevDesc>:
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc,
                                uint8_t *buf, 
                                uint16_t length)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b085      	sub	sp, #20
 800a00e:	af00      	add	r7, sp, #0
 800a010:	60f8      	str	r0, [r7, #12]
 800a012:	60b9      	str	r1, [r7, #8]
 800a014:	4613      	mov	r3, r2
 800a016:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	781a      	ldrb	r2, [r3, #0]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	785a      	ldrb	r2, [r3, #1]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	3302      	adds	r3, #2
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	b29a      	uxth	r2, r3
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	3303      	adds	r3, #3
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	b29b      	uxth	r3, r3
 800a038:	021b      	lsls	r3, r3, #8
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	4413      	add	r3, r2
 800a03e:	b29a      	uxth	r2, r3
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	791a      	ldrb	r2, [r3, #4]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	795a      	ldrb	r2, [r3, #5]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	799a      	ldrb	r2, [r3, #6]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	79da      	ldrb	r2, [r3, #7]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	71da      	strb	r2, [r3, #7]
  
  if (length > 8)
 800a064:	88fb      	ldrh	r3, [r7, #6]
 800a066:	2b08      	cmp	r3, #8
 800a068:	d939      	bls.n	800a0de <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for 
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	3308      	adds	r3, #8
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	b29a      	uxth	r2, r3
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	3309      	adds	r3, #9
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	b29b      	uxth	r3, r3
 800a07a:	021b      	lsls	r3, r3, #8
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	4413      	add	r3, r2
 800a080:	b29a      	uxth	r2, r3
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	330a      	adds	r3, #10
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	330b      	adds	r3, #11
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	b29b      	uxth	r3, r3
 800a096:	021b      	lsls	r3, r3, #8
 800a098:	b29b      	uxth	r3, r3
 800a09a:	4413      	add	r3, r2
 800a09c:	b29a      	uxth	r2, r3
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	330c      	adds	r3, #12
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	330d      	adds	r3, #13
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	021b      	lsls	r3, r3, #8
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	4413      	add	r3, r2
 800a0b8:	b29a      	uxth	r2, r3
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	7b9a      	ldrb	r2, [r3, #14]
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	7bda      	ldrb	r2, [r3, #15]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	7c1a      	ldrb	r2, [r3, #16]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	7c5a      	ldrb	r2, [r3, #17]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	745a      	strb	r2, [r3, #17]
  }
}
 800a0de:	bf00      	nop
 800a0e0:	3714      	adds	r7, #20
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <USBH_ParseCfgDesc>:
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc,
                               uint8_t *buf, 
                               uint16_t length)
{  
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b08a      	sub	sp, #40	; 0x28
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	60f8      	str	r0, [r7, #12]
 800a0f2:	60b9      	str	r1, [r7, #8]
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;  
  USBH_DescHeader_t             *pdesc = (USBH_DescHeader_t *)buf;
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                      ptr;
  int8_t                        if_ix = 0;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  int8_t                        ep_ix = 0;  
 800a102:	2300      	movs	r3, #0
 800a104:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  
  pdesc   = (USBH_DescHeader_t *)buf;
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	781a      	ldrb	r2, [r3, #0]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	785a      	ldrb	r2, [r3, #1]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	3302      	adds	r3, #2
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	b29a      	uxth	r2, r3
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	3303      	adds	r3, #3
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	021b      	lsls	r3, r3, #8
 800a12e:	b29b      	uxth	r3, r3
 800a130:	4413      	add	r3, r2
 800a132:	b29a      	uxth	r2, r3
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	791a      	ldrb	r2, [r3, #4]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	795a      	ldrb	r2, [r3, #5]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	799a      	ldrb	r2, [r3, #6]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	79da      	ldrb	r2, [r3, #7]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	7a1a      	ldrb	r2, [r3, #8]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	721a      	strb	r2, [r3, #8]
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a160:	88fb      	ldrh	r3, [r7, #6]
 800a162:	2b09      	cmp	r3, #9
 800a164:	d963      	bls.n	800a22e <USBH_ParseCfgDesc+0x144>
  {
    ptr = USB_LEN_CFG_DESC;
 800a166:	2309      	movs	r3, #9
 800a168:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a16a:	2300      	movs	r3, #0
 800a16c:	61fb      	str	r3, [r7, #28]
    
    
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 800a16e:	e055      	b.n	800a21c <USBH_ParseCfgDesc+0x132>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a170:	f107 0316 	add.w	r3, r7, #22
 800a174:	4619      	mov	r1, r3
 800a176:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a178:	f000 f8ec 	bl	800a354 <USBH_GetNextDesc>
 800a17c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 800a17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a180:	785b      	ldrb	r3, [r3, #1]
 800a182:	2b04      	cmp	r3, #4
 800a184:	d14a      	bne.n	800a21c <USBH_ParseCfgDesc+0x132>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a186:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a18a:	221a      	movs	r2, #26
 800a18c:	fb02 f303 	mul.w	r3, r2, r3
 800a190:	3308      	adds	r3, #8
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	4413      	add	r3, r2
 800a196:	3302      	adds	r3, #2
 800a198:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)pdesc);            
 800a19a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a19c:	69f8      	ldr	r0, [r7, #28]
 800a19e:	f000 f84a 	bl	800a236 <USBH_ParseInterfaceDesc>
        
        ep_ix = 0;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;        
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a1ac:	e024      	b.n	800a1f8 <USBH_ParseCfgDesc+0x10e>
        {
          pdesc = USBH_GetNextDesc((uint8_t*) pdesc, &ptr);
 800a1ae:	f107 0316 	add.w	r3, r7, #22
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1b6:	f000 f8cd 	bl	800a354 <USBH_GetNextDesc>
 800a1ba:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1be:	785b      	ldrb	r3, [r3, #1]
 800a1c0:	2b05      	cmp	r3, #5
 800a1c2:	d119      	bne.n	800a1f8 <USBH_ParseCfgDesc+0x10e>
          {  
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a1c4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a1c8:	f997 2022 	ldrsb.w	r2, [r7, #34]	; 0x22
 800a1cc:	3201      	adds	r2, #1
 800a1ce:	00d2      	lsls	r2, r2, #3
 800a1d0:	211a      	movs	r1, #26
 800a1d2:	fb01 f303 	mul.w	r3, r1, r3
 800a1d6:	4413      	add	r3, r2
 800a1d8:	3308      	adds	r3, #8
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	4413      	add	r3, r2
 800a1de:	3304      	adds	r3, #4
 800a1e0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
 800a1e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1e4:	69b8      	ldr	r0, [r7, #24]
 800a1e6:	f000 f855 	bl	800a294 <USBH_ParseEPDesc>
            ep_ix++;
 800a1ea:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a1f8:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800a1fc:	69fa      	ldr	r2, [r7, #28]
 800a1fe:	7912      	ldrb	r2, [r2, #4]
 800a200:	4293      	cmp	r3, r2
 800a202:	da04      	bge.n	800a20e <USBH_ParseCfgDesc+0x124>
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	885a      	ldrh	r2, [r3, #2]
 800a208:	8afb      	ldrh	r3, [r7, #22]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d8cf      	bhi.n	800a1ae <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a20e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a212:	b2db      	uxtb	r3, r3
 800a214:	3301      	adds	r3, #1
 800a216:	b2db      	uxtb	r3, r3
 800a218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 800a21c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a220:	2b07      	cmp	r3, #7
 800a222:	dc04      	bgt.n	800a22e <USBH_ParseCfgDesc+0x144>
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	885a      	ldrh	r2, [r3, #2]
 800a228:	8afb      	ldrh	r3, [r7, #22]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d8a0      	bhi.n	800a170 <USBH_ParseCfgDesc+0x86>
      }
    }
  }  
}
 800a22e:	bf00      	nop
 800a230:	3728      	adds	r7, #40	; 0x28
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor, 
                                      uint8_t *buf)
{
 800a236:	b480      	push	{r7}
 800a238:	b083      	sub	sp, #12
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
 800a23e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	781a      	ldrb	r2, [r3, #0]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	785a      	ldrb	r2, [r3, #1]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	789a      	ldrb	r2, [r3, #2]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	78da      	ldrb	r2, [r3, #3]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	791a      	ldrb	r2, [r3, #4]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	795a      	ldrb	r2, [r3, #5]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	799a      	ldrb	r2, [r3, #6]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	79da      	ldrb	r2, [r3, #7]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	7a1a      	ldrb	r2, [r3, #8]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	721a      	strb	r2, [r3, #8]
}
 800a288:	bf00      	nop
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor, 
                               uint8_t *buf)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
  
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	781a      	ldrb	r2, [r3, #0]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	785a      	ldrb	r2, [r3, #1]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	789a      	ldrb	r2, [r3, #2]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	78da      	ldrb	r2, [r3, #3]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	3304      	adds	r3, #4
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	b29a      	uxth	r2, r3
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	3305      	adds	r3, #5
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	021b      	lsls	r3, r3, #8
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	4413      	add	r3, r2
 800a2d4:	b29a      	uxth	r2, r3
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	799a      	ldrb	r2, [r3, #6]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	719a      	strb	r2, [r3, #6]
}
 800a2e2:	bf00      	nop
 800a2e4:	370c      	adds	r7, #12
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr

0800a2ee <USBH_ParseStringDesc>:
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, 
                                  uint8_t* pdest, 
                                  uint16_t length)
{
 800a2ee:	b480      	push	{r7}
 800a2f0:	b087      	sub	sp, #28
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	60f8      	str	r0, [r7, #12]
 800a2f6:	60b9      	str	r1, [r7, #8]
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	80fb      	strh	r3, [r7, #6]
  */
  
  /* Check which is lower size, the Size of string or the length of bytes read 
  from the device */
  
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	3301      	adds	r3, #1
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	2b03      	cmp	r3, #3
 800a304:	d120      	bne.n	800a348 <USBH_ParseStringDesc+0x5a>
  { /* Make sure the Descriptor is String Type */
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	1e9a      	subs	r2, r3, #2
 800a30c:	88fb      	ldrh	r3, [r7, #6]
 800a30e:	4293      	cmp	r3, r2
 800a310:	bfa8      	it	ge
 800a312:	4613      	movge	r3, r2
 800a314:	82bb      	strh	r3, [r7, #20]
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	3302      	adds	r3, #2
 800a31a:	60fb      	str	r3, [r7, #12]
    
    for (idx = 0; idx < strlength; idx+=2 )
 800a31c:	2300      	movs	r3, #0
 800a31e:	82fb      	strh	r3, [r7, #22]
 800a320:	e00b      	b.n	800a33a <USBH_ParseStringDesc+0x4c>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a322:	8afb      	ldrh	r3, [r7, #22]
 800a324:	68fa      	ldr	r2, [r7, #12]
 800a326:	4413      	add	r3, r2
 800a328:	781a      	ldrb	r2, [r3, #0]
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	3301      	adds	r3, #1
 800a332:	60bb      	str	r3, [r7, #8]
    for (idx = 0; idx < strlength; idx+=2 )
 800a334:	8afb      	ldrh	r3, [r7, #22]
 800a336:	3302      	adds	r3, #2
 800a338:	82fb      	strh	r3, [r7, #22]
 800a33a:	8afa      	ldrh	r2, [r7, #22]
 800a33c:	8abb      	ldrh	r3, [r7, #20]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d3ef      	bcc.n	800a322 <USBH_ParseStringDesc+0x34>
    }  
    *pdest = 0; /* mark end of string */  
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	2200      	movs	r2, #0
 800a346:	701a      	strb	r2, [r3, #0]
  }
}
 800a348:	bf00      	nop
 800a34a:	371c      	adds	r7, #28
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	881a      	ldrh	r2, [r3, #0]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	b29b      	uxth	r3, r3
 800a368:	4413      	add	r3, r2
 800a36a:	b29a      	uxth	r2, r3
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
         ((USBH_DescHeader_t *)pbuf)->bLength);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	4413      	add	r3, r2
 800a37a:	60fb      	str	r3, [r7, #12]
 
  return(pnext);
 800a37c:	68fb      	ldr	r3, [r7, #12]
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3714      	adds	r7, #20
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr

0800a38a <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b086      	sub	sp, #24
 800a38e:	af00      	add	r7, sp, #0
 800a390:	60f8      	str	r0, [r7, #12]
 800a392:	60b9      	str	r1, [r7, #8]
 800a394:	4613      	mov	r3, r2
 800a396:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a398:	2301      	movs	r3, #1
 800a39a:	75fb      	strb	r3, [r7, #23]
  
  switch (phost->RequestState)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	789b      	ldrb	r3, [r3, #2]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d002      	beq.n	800a3aa <USBH_CtlReq+0x20>
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d00f      	beq.n	800a3c8 <USBH_CtlReq+0x3e>
      status = USBH_FAIL;
    }   
    break;
    
  default:
    break; 
 800a3a8:	e028      	b.n	800a3fc <USBH_CtlReq+0x72>
    phost->Control.buff = buff; 
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	68ba      	ldr	r2, [r7, #8]
 800a3ae:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	88fa      	ldrh	r2, [r7, #6]
 800a3b4:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;  
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2202      	movs	r2, #2
 800a3c0:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	75fb      	strb	r3, [r7, #23]
    break;
 800a3c6:	e019      	b.n	800a3fc <USBH_CtlReq+0x72>
    status = USBH_HandleControl(phost);
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f000 f81d 	bl	800a408 <USBH_HandleControl>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	75fb      	strb	r3, [r7, #23]
     if (status == USBH_OK) 
 800a3d2:	7dfb      	ldrb	r3, [r7, #23]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d108      	bne.n	800a3ea <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;  
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;      
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	75fb      	strb	r3, [r7, #23]
    break;
 800a3e8:	e007      	b.n	800a3fa <USBH_CtlReq+0x70>
    else if  (status == USBH_FAIL)
 800a3ea:	7dfb      	ldrb	r3, [r7, #23]
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d104      	bne.n	800a3fa <USBH_CtlReq+0x70>
      phost->RequestState = CMD_SEND;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	709a      	strb	r2, [r3, #2]
      status = USBH_FAIL;
 800a3f6:	2302      	movs	r3, #2
 800a3f8:	75fb      	strb	r3, [r7, #23]
    break;
 800a3fa:	bf00      	nop
  }
  return status;
 800a3fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3718      	adds	r7, #24
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
	...

0800a408 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b086      	sub	sp, #24
 800a40c:	af02      	add	r7, sp, #8
 800a40e:	6078      	str	r0, [r7, #4]
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 800a410:	2301      	movs	r3, #1
 800a412:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a414:	2300      	movs	r3, #0
 800a416:	73bb      	strb	r3, [r7, #14]
  
  switch (phost->Control.state)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	7e1b      	ldrb	r3, [r3, #24]
 800a41c:	3b01      	subs	r3, #1
 800a41e:	2b0a      	cmp	r3, #10
 800a420:	f200 8149 	bhi.w	800a6b6 <USBH_HandleControl+0x2ae>
 800a424:	a201      	add	r2, pc, #4	; (adr r2, 800a42c <USBH_HandleControl+0x24>)
 800a426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a42a:	bf00      	nop
 800a42c:	0800a459 	.word	0x0800a459
 800a430:	0800a473 	.word	0x0800a473
 800a434:	0800a4d7 	.word	0x0800a4d7
 800a438:	0800a4fd 	.word	0x0800a4fd
 800a43c:	0800a535 	.word	0x0800a535
 800a440:	0800a561 	.word	0x0800a561
 800a444:	0800a5b3 	.word	0x0800a5b3
 800a448:	0800a5d5 	.word	0x0800a5d5
 800a44c:	0800a611 	.word	0x0800a611
 800a450:	0800a639 	.word	0x0800a639
 800a454:	0800a677 	.word	0x0800a677
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (phost, 
	                   (uint8_t *)phost->Control.setup.d8 , 
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f103 0110 	add.w	r1, r3, #16
    USBH_CtlSendSetup     (phost, 
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	795b      	ldrb	r3, [r3, #5]
 800a462:	461a      	mov	r2, r3
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 f937 	bl	800a6d8 <USBH_CtlSendSetup>
	                   phost->Control.pipe_out); 
    
    phost->Control.state = CTRL_SETUP_WAIT; 
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2202      	movs	r2, #2
 800a46e:	761a      	strb	r2, [r3, #24]
    break; 
 800a470:	e12c      	b.n	800a6cc <USBH_HandleControl+0x2c4>
    
  case CTRL_SETUP_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out); 
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	795b      	ldrb	r3, [r3, #5]
 800a476:	4619      	mov	r1, r3
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f001 fc11 	bl	800bca0 <USBH_LL_GetURBState>
 800a47e:	4603      	mov	r3, r0
 800a480:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800a482:	7bbb      	ldrb	r3, [r7, #14]
 800a484:	2b01      	cmp	r3, #1
 800a486:	d11e      	bne.n	800a4c6 <USBH_HandleControl+0xbe>
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	7c1b      	ldrb	r3, [r3, #16]
 800a48c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a490:	737b      	strb	r3, [r7, #13]
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	8adb      	ldrh	r3, [r3, #22]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00a      	beq.n	800a4b0 <USBH_HandleControl+0xa8>
      {        
        if (direction == USB_D2H)
 800a49a:	7b7b      	ldrb	r3, [r7, #13]
 800a49c:	2b80      	cmp	r3, #128	; 0x80
 800a49e:	d103      	bne.n	800a4a8 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2203      	movs	r2, #3
 800a4a4:	761a      	strb	r2, [r3, #24]
      phost->Control.state = CTRL_ERROR;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }    
    break;
 800a4a6:	e108      	b.n	800a6ba <USBH_HandleControl+0x2b2>
          phost->Control.state = CTRL_DATA_OUT;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2205      	movs	r2, #5
 800a4ac:	761a      	strb	r2, [r3, #24]
    break;
 800a4ae:	e104      	b.n	800a6ba <USBH_HandleControl+0x2b2>
        if (direction == USB_D2H)
 800a4b0:	7b7b      	ldrb	r3, [r7, #13]
 800a4b2:	2b80      	cmp	r3, #128	; 0x80
 800a4b4:	d103      	bne.n	800a4be <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2209      	movs	r2, #9
 800a4ba:	761a      	strb	r2, [r3, #24]
    break;
 800a4bc:	e0fd      	b.n	800a6ba <USBH_HandleControl+0x2b2>
          phost->Control.state = CTRL_STATUS_IN;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2207      	movs	r2, #7
 800a4c2:	761a      	strb	r2, [r3, #24]
    break;
 800a4c4:	e0f9      	b.n	800a6ba <USBH_HandleControl+0x2b2>
    else if(URB_Status == USBH_URB_ERROR)
 800a4c6:	7bbb      	ldrb	r3, [r7, #14]
 800a4c8:	2b04      	cmp	r3, #4
 800a4ca:	f040 80f6 	bne.w	800a6ba <USBH_HandleControl+0x2b2>
      phost->Control.state = CTRL_ERROR;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	220b      	movs	r2, #11
 800a4d2:	761a      	strb	r2, [r3, #24]
    break;
 800a4d4:	e0f1      	b.n	800a6ba <USBH_HandleControl+0x2b2>
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
     phost->Control.timer = phost->Timer;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8d3 3758 	ldr.w	r3, [r3, #1880]	; 0x758
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6899      	ldr	r1, [r3, #8]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	899a      	ldrh	r2, [r3, #12]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	791b      	ldrb	r3, [r3, #4]
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f931 	bl	800a756 <USBH_CtlReceiveData>
                        phost->Control.buff, 
                        phost->Control.length,
                        phost->Control.pipe_in);
 
    phost->Control.state = CTRL_DATA_IN_WAIT;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2204      	movs	r2, #4
 800a4f8:	761a      	strb	r2, [r3, #24]
    break;    
 800a4fa:	e0e7      	b.n	800a6cc <USBH_HandleControl+0x2c4>
    
  case CTRL_DATA_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	791b      	ldrb	r3, [r3, #4]
 800a500:	4619      	mov	r1, r3
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f001 fbcc 	bl	800bca0 <USBH_LL_GetURBState>
 800a508:	4603      	mov	r3, r0
 800a50a:	73bb      	strb	r3, [r7, #14]
    
    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800a50c:	7bbb      	ldrb	r3, [r7, #14]
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d102      	bne.n	800a518 <USBH_HandleControl+0x110>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2209      	movs	r2, #9
 800a516:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
   
    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL) 
 800a518:	7bbb      	ldrb	r3, [r7, #14]
 800a51a:	2b05      	cmp	r3, #5
 800a51c:	d102      	bne.n	800a524 <USBH_HandleControl+0x11c>
    { 
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800a51e:	2303      	movs	r3, #3
 800a520:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_ERROR;  
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 800a522:	e0cc      	b.n	800a6be <USBH_HandleControl+0x2b6>
    else if (URB_Status == USBH_URB_ERROR)
 800a524:	7bbb      	ldrb	r3, [r7, #14]
 800a526:	2b04      	cmp	r3, #4
 800a528:	f040 80c9 	bne.w	800a6be <USBH_HandleControl+0x2b6>
      phost->Control.state = CTRL_ERROR;  
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	220b      	movs	r2, #11
 800a530:	761a      	strb	r2, [r3, #24]
    break;
 800a532:	e0c4      	b.n	800a6be <USBH_HandleControl+0x2b6>
    
  case CTRL_DATA_OUT:
    
    USBH_CtlSendData (phost,
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6899      	ldr	r1, [r3, #8]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	899a      	ldrh	r2, [r3, #12]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	7958      	ldrb	r0, [r3, #5]
 800a540:	2301      	movs	r3, #1
 800a542:	9300      	str	r3, [sp, #0]
 800a544:	4603      	mov	r3, r0
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f8e0 	bl	800a70c <USBH_CtlSendData>
                      phost->Control.buff, 
                      phost->Control.length , 
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 3758 	ldr.w	r3, [r3, #1880]	; 0x758
 800a552:	b29a      	uxth	r2, r3
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2206      	movs	r2, #6
 800a55c:	761a      	strb	r2, [r3, #24]
    break;
 800a55e:	e0b5      	b.n	800a6cc <USBH_HandleControl+0x2c4>
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);     
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	795b      	ldrb	r3, [r3, #5]
 800a564:	4619      	mov	r1, r3
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f001 fb9a 	bl	800bca0 <USBH_LL_GetURBState>
 800a56c:	4603      	mov	r3, r0
 800a56e:	73bb      	strb	r3, [r7, #14]
    
    if  (URB_Status == USBH_URB_DONE)
 800a570:	7bbb      	ldrb	r3, [r7, #14]
 800a572:	2b01      	cmp	r3, #1
 800a574:	d103      	bne.n	800a57e <USBH_HandleControl+0x176>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2207      	movs	r2, #7
 800a57a:	761a      	strb	r2, [r3, #24]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    } 
    break;
 800a57c:	e0a1      	b.n	800a6c2 <USBH_HandleControl+0x2ba>
    else if  (URB_Status == USBH_URB_STALL) 
 800a57e:	7bbb      	ldrb	r3, [r7, #14]
 800a580:	2b05      	cmp	r3, #5
 800a582:	d105      	bne.n	800a590 <USBH_HandleControl+0x188>
      phost->Control.state = CTRL_STALLED; 
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	220c      	movs	r2, #12
 800a588:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800a58a:	2303      	movs	r3, #3
 800a58c:	73fb      	strb	r3, [r7, #15]
    break;
 800a58e:	e098      	b.n	800a6c2 <USBH_HandleControl+0x2ba>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800a590:	7bbb      	ldrb	r3, [r7, #14]
 800a592:	2b02      	cmp	r3, #2
 800a594:	d103      	bne.n	800a59e <USBH_HandleControl+0x196>
      phost->Control.state = CTRL_DATA_OUT;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2205      	movs	r2, #5
 800a59a:	761a      	strb	r2, [r3, #24]
    break;
 800a59c:	e091      	b.n	800a6c2 <USBH_HandleControl+0x2ba>
    else if (URB_Status == USBH_URB_ERROR)
 800a59e:	7bbb      	ldrb	r3, [r7, #14]
 800a5a0:	2b04      	cmp	r3, #4
 800a5a2:	f040 808e 	bne.w	800a6c2 <USBH_HandleControl+0x2ba>
      phost->Control.state = CTRL_ERROR;  
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	220b      	movs	r2, #11
 800a5aa:	761a      	strb	r2, [r3, #24]
      status = USBH_FAIL;    
 800a5ac:	2302      	movs	r3, #2
 800a5ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a5b0:	e087      	b.n	800a6c2 <USBH_HandleControl+0x2ba>
    
    
  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	791b      	ldrb	r3, [r3, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 f8cb 	bl	800a756 <USBH_CtlReceiveData>
                         0,
                         0,
                         phost->Control.pipe_in);
    phost->Control.timer = phost->Timer;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 3758 	ldr.w	r3, [r3, #1880]	; 0x758
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2208      	movs	r2, #8
 800a5d0:	761a      	strb	r2, [r3, #24]
    
    break;
 800a5d2:	e07b      	b.n	800a6cc <USBH_HandleControl+0x2c4>
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	791b      	ldrb	r3, [r3, #4]
 800a5d8:	4619      	mov	r1, r3
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f001 fb60 	bl	800bca0 <USBH_LL_GetURBState>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	73bb      	strb	r3, [r7, #14]
    
    if  ( URB_Status == USBH_URB_DONE)
 800a5e4:	7bbb      	ldrb	r3, [r7, #14]
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d105      	bne.n	800a5f6 <USBH_HandleControl+0x1ee>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	220d      	movs	r2, #13
 800a5ee:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	73fb      	strb	r3, [r7, #15]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 800a5f4:	e067      	b.n	800a6c6 <USBH_HandleControl+0x2be>
    else if (URB_Status == USBH_URB_ERROR)
 800a5f6:	7bbb      	ldrb	r3, [r7, #14]
 800a5f8:	2b04      	cmp	r3, #4
 800a5fa:	d103      	bne.n	800a604 <USBH_HandleControl+0x1fc>
      phost->Control.state = CTRL_ERROR;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	220b      	movs	r2, #11
 800a600:	761a      	strb	r2, [r3, #24]
    break;
 800a602:	e060      	b.n	800a6c6 <USBH_HandleControl+0x2be>
     else if(URB_Status == USBH_URB_STALL)
 800a604:	7bbb      	ldrb	r3, [r7, #14]
 800a606:	2b05      	cmp	r3, #5
 800a608:	d15d      	bne.n	800a6c6 <USBH_HandleControl+0x2be>
      status = USBH_NOT_SUPPORTED;
 800a60a:	2303      	movs	r3, #3
 800a60c:	73fb      	strb	r3, [r7, #15]
    break;
 800a60e:	e05a      	b.n	800a6c6 <USBH_HandleControl+0x2be>
    
  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	795a      	ldrb	r2, [r3, #5]
 800a614:	2301      	movs	r3, #1
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	4613      	mov	r3, r2
 800a61a:	2200      	movs	r2, #0
 800a61c:	2100      	movs	r1, #0
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 f874 	bl	800a70c <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 3758 	ldr.w	r3, [r3, #1880]	; 0x758
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	220a      	movs	r2, #10
 800a634:	761a      	strb	r2, [r3, #24]
    break;
 800a636:	e049      	b.n	800a6cc <USBH_HandleControl+0x2c4>
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	795b      	ldrb	r3, [r3, #5]
 800a63c:	4619      	mov	r1, r3
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f001 fb2e 	bl	800bca0 <USBH_LL_GetURBState>
 800a644:	4603      	mov	r3, r0
 800a646:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800a648:	7bbb      	ldrb	r3, [r7, #14]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d105      	bne.n	800a65a <USBH_HandleControl+0x252>
    { 
      status = USBH_OK;      
 800a64e:	2300      	movs	r3, #0
 800a650:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE; 
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	220d      	movs	r2, #13
 800a656:	761a      	strb	r2, [r3, #24]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 800a658:	e037      	b.n	800a6ca <USBH_HandleControl+0x2c2>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800a65a:	7bbb      	ldrb	r3, [r7, #14]
 800a65c:	2b02      	cmp	r3, #2
 800a65e:	d103      	bne.n	800a668 <USBH_HandleControl+0x260>
      phost->Control.state = CTRL_STATUS_OUT;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2209      	movs	r2, #9
 800a664:	761a      	strb	r2, [r3, #24]
    break;
 800a666:	e030      	b.n	800a6ca <USBH_HandleControl+0x2c2>
    else if (URB_Status == USBH_URB_ERROR)
 800a668:	7bbb      	ldrb	r3, [r7, #14]
 800a66a:	2b04      	cmp	r3, #4
 800a66c:	d12d      	bne.n	800a6ca <USBH_HandleControl+0x2c2>
      phost->Control.state = CTRL_ERROR; 
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	220b      	movs	r2, #11
 800a672:	761a      	strb	r2, [r3, #24]
    break;
 800a674:	e029      	b.n	800a6ca <USBH_HandleControl+0x2c2>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	7e5b      	ldrb	r3, [r3, #25]
 800a67a:	3301      	adds	r3, #1
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	765a      	strb	r2, [r3, #25]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	7e5b      	ldrb	r3, [r3, #25]
 800a686:	2b02      	cmp	r3, #2
 800a688:	d809      	bhi.n	800a69e <USBH_HandleControl+0x296>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f001 f9ba 	bl	800ba04 <USBH_LL_Stop>
         
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2201      	movs	r2, #1
 800a694:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2201      	movs	r2, #1
 800a69a:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800a69c:	e016      	b.n	800a6cc <USBH_HandleControl+0x2c4>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 800a6a4:	2106      	movs	r1, #6
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	4798      	blx	r3
      phost->Control.errorcount = 0;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800a6b0:	2302      	movs	r3, #2
 800a6b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a6b4:	e00a      	b.n	800a6cc <USBH_HandleControl+0x2c4>
    
  default:
    break;
 800a6b6:	bf00      	nop
 800a6b8:	e008      	b.n	800a6cc <USBH_HandleControl+0x2c4>
    break;
 800a6ba:	bf00      	nop
 800a6bc:	e006      	b.n	800a6cc <USBH_HandleControl+0x2c4>
    break;
 800a6be:	bf00      	nop
 800a6c0:	e004      	b.n	800a6cc <USBH_HandleControl+0x2c4>
    break;
 800a6c2:	bf00      	nop
 800a6c4:	e002      	b.n	800a6cc <USBH_HandleControl+0x2c4>
    break;
 800a6c6:	bf00      	nop
 800a6c8:	e000      	b.n	800a6cc <USBH_HandleControl+0x2c4>
    break;
 800a6ca:	bf00      	nop
  }
  return status;
 800a6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop

0800a6d8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t pipe_num)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b088      	sub	sp, #32
 800a6dc:	af04      	add	r7, sp, #16
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a6e6:	79f9      	ldrb	r1, [r7, #7]
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	9303      	str	r3, [sp, #12]
 800a6ec:	2308      	movs	r3, #8
 800a6ee:	9302      	str	r3, [sp, #8]
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	9301      	str	r3, [sp, #4]
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f001 fa87 	bl	800bc10 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */ 
                          0);
  return USBH_OK;  
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b088      	sub	sp, #32
 800a710:	af04      	add	r7, sp, #16
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	4611      	mov	r1, r2
 800a718:	461a      	mov	r2, r3
 800a71a:	460b      	mov	r3, r1
 800a71c:	80fb      	strh	r3, [r7, #6]
 800a71e:	4613      	mov	r3, r2
 800a720:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f893 361d 	ldrb.w	r3, [r3, #1565]	; 0x61d
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d001      	beq.n	800a730 <USBH_CtlSendData+0x24>
  {
    do_ping = 0;
 800a72c:	2300      	movs	r3, #0
 800a72e:	763b      	strb	r3, [r7, #24]
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a730:	7979      	ldrb	r1, [r7, #5]
 800a732:	7e3b      	ldrb	r3, [r7, #24]
 800a734:	9303      	str	r3, [sp, #12]
 800a736:	88fb      	ldrh	r3, [r7, #6]
 800a738:	9302      	str	r3, [sp, #8]
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	9301      	str	r3, [sp, #4]
 800a73e:	2301      	movs	r3, #1
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	2300      	movs	r3, #0
 800a744:	2200      	movs	r2, #0
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f001 fa62 	bl	800bc10 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          do_ping);             /* do ping (HS Only)*/
  
  return USBH_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b088      	sub	sp, #32
 800a75a:	af04      	add	r7, sp, #16
 800a75c:	60f8      	str	r0, [r7, #12]
 800a75e:	60b9      	str	r1, [r7, #8]
 800a760:	4611      	mov	r1, r2
 800a762:	461a      	mov	r2, r3
 800a764:	460b      	mov	r3, r1
 800a766:	80fb      	strh	r3, [r7, #6]
 800a768:	4613      	mov	r3, r2
 800a76a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a76c:	7979      	ldrb	r1, [r7, #5]
 800a76e:	2300      	movs	r3, #0
 800a770:	9303      	str	r3, [sp, #12]
 800a772:	88fb      	ldrh	r3, [r7, #6]
 800a774:	9302      	str	r3, [sp, #8]
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	9301      	str	r3, [sp, #4]
 800a77a:	2301      	movs	r3, #1
 800a77c:	9300      	str	r3, [sp, #0]
 800a77e:	2300      	movs	r3, #0
 800a780:	2201      	movs	r2, #1
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	f001 fa44 	bl	800bc10 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */                          
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  return USBH_OK;
 800a788:	2300      	movs	r3, #0
  
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t length,
                                uint8_t pipe_num)
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b088      	sub	sp, #32
 800a796:	af04      	add	r7, sp, #16
 800a798:	60f8      	str	r0, [r7, #12]
 800a79a:	60b9      	str	r1, [r7, #8]
 800a79c:	4611      	mov	r1, r2
 800a79e:	461a      	mov	r2, r3
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	71fb      	strb	r3, [r7, #7]
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a7a8:	79fb      	ldrb	r3, [r7, #7]
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	79b9      	ldrb	r1, [r7, #6]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	9203      	str	r2, [sp, #12]
 800a7b2:	9302      	str	r3, [sp, #8]
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	9301      	str	r3, [sp, #4]
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	9300      	str	r3, [sp, #0]
 800a7bc:	2303      	movs	r3, #3
 800a7be:	2201      	movs	r2, #1
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f001 fa25 	bl	800bc10 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0); 
  
  return USBH_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <USBH_InterruptSendData>:
  */
USBH_StatusTypeDef USBH_InterruptSendData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t length,
                                uint8_t pipe_num)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b088      	sub	sp, #32
 800a7d4:	af04      	add	r7, sp, #16
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	4611      	mov	r1, r2
 800a7dc:	461a      	mov	r2, r3
 800a7de:	460b      	mov	r3, r1
 800a7e0:	71fb      	strb	r3, [r7, #7]
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a7e6:	79fb      	ldrb	r3, [r7, #7]
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	79b9      	ldrb	r1, [r7, #6]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	9203      	str	r2, [sp, #12]
 800a7f0:	9302      	str	r3, [sp, #8]
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	9301      	str	r3, [sp, #4]
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	2303      	movs	r3, #3
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f001 fa06 	bl	800bc10 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0);  
  
  return USBH_OK;
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3710      	adds	r7, #16
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b086      	sub	sp, #24
 800a812:	af04      	add	r7, sp, #16
 800a814:	6078      	str	r0, [r7, #4]
 800a816:	4608      	mov	r0, r1
 800a818:	4611      	mov	r1, r2
 800a81a:	461a      	mov	r2, r3
 800a81c:	4603      	mov	r3, r0
 800a81e:	70fb      	strb	r3, [r7, #3]
 800a820:	460b      	mov	r3, r1
 800a822:	70bb      	strb	r3, [r7, #2]
 800a824:	4613      	mov	r3, r2
 800a826:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800a828:	7878      	ldrb	r0, [r7, #1]
 800a82a:	78ba      	ldrb	r2, [r7, #2]
 800a82c:	78f9      	ldrb	r1, [r7, #3]
 800a82e:	8b3b      	ldrh	r3, [r7, #24]
 800a830:	9302      	str	r3, [sp, #8]
 800a832:	7d3b      	ldrb	r3, [r7, #20]
 800a834:	9301      	str	r3, [sp, #4]
 800a836:	7c3b      	ldrb	r3, [r7, #16]
 800a838:	9300      	str	r3, [sp, #0]
 800a83a:	4603      	mov	r3, r0
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f001 f96b 	bl	800bb18 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  
  return USBH_OK; 
 800a842:	2300      	movs	r3, #0

}
 800a844:	4618      	mov	r0, r3
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	460b      	mov	r3, r1
 800a856:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800a858:	78fb      	ldrb	r3, [r7, #3]
 800a85a:	4619      	mov	r1, r3
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f001 f9a1 	bl	800bba4 <USBH_LL_ClosePipe>
  
  return USBH_OK; 
 800a862:	2300      	movs	r3, #0

}
 800a864:	4618      	mov	r0, r3
 800a866:	3708      	adds	r7, #8
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	460b      	mov	r3, r1
 800a876:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;
  
  pipe =  USBH_GetFreePipe(phost);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 f838 	bl	800a8ee <USBH_GetFreePipe>
 800a87e:	4603      	mov	r3, r0
 800a880:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFF)
 800a882:	89fb      	ldrh	r3, [r7, #14]
 800a884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a888:	4293      	cmp	r3, r2
 800a88a:	d00a      	beq.n	800a8a2 <USBH_AllocPipe+0x36>
  {
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 800a88c:	89fb      	ldrh	r3, [r7, #14]
 800a88e:	78fa      	ldrb	r2, [r7, #3]
 800a890:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a894:	4611      	mov	r1, r2
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	4413      	add	r3, r2
 800a8a0:	6059      	str	r1, [r3, #4]
  }
  return pipe;
 800a8a2:	89fb      	ldrh	r3, [r7, #14]
 800a8a4:	b2db      	uxtb	r3, r3
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a8ae:	b480      	push	{r7}
 800a8b0:	b083      	sub	sp, #12
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	70fb      	strb	r3, [r7, #3]
   if(idx < 11)
 800a8ba:	78fb      	ldrb	r3, [r7, #3]
 800a8bc:	2b0a      	cmp	r3, #10
 800a8be:	d80f      	bhi.n	800a8e0 <USBH_FreePipe+0x32>
   {
	 phost->Pipes[idx] &= 0x7FFF;
 800a8c0:	78f8      	ldrb	r0, [r7, #3]
 800a8c2:	78fb      	ldrb	r3, [r7, #3]
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	4413      	add	r3, r2
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a8d4:	6879      	ldr	r1, [r7, #4]
 800a8d6:	f500 73e3 	add.w	r3, r0, #454	; 0x1c6
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	440b      	add	r3, r1
 800a8de:	605a      	str	r2, [r3, #4]
   }
   return USBH_OK;
 800a8e0:	2300      	movs	r3, #0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	370c      	adds	r7, #12
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr

0800a8ee <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800a8ee:	b480      	push	{r7}
 800a8f0:	b085      	sub	sp, #20
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	73fb      	strb	r3, [r7, #15]
  
  for (idx = 0 ; idx < 11 ; idx++)
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	73fb      	strb	r3, [r7, #15]
 800a8fe:	e010      	b.n	800a922 <USBH_GetFreePipe+0x34>
  {
	if ((phost->Pipes[idx] & 0x8000) == 0)
 800a900:	7bfb      	ldrb	r3, [r7, #15]
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	4413      	add	r3, r2
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a912:	2b00      	cmp	r3, #0
 800a914:	d102      	bne.n	800a91c <USBH_GetFreePipe+0x2e>
	{
	   return idx;
 800a916:	7bfb      	ldrb	r3, [r7, #15]
 800a918:	b29b      	uxth	r3, r3
 800a91a:	e007      	b.n	800a92c <USBH_GetFreePipe+0x3e>
  for (idx = 0 ; idx < 11 ; idx++)
 800a91c:	7bfb      	ldrb	r3, [r7, #15]
 800a91e:	3301      	adds	r3, #1
 800a920:	73fb      	strb	r3, [r7, #15]
 800a922:	7bfb      	ldrb	r3, [r7, #15]
 800a924:	2b0a      	cmp	r3, #10
 800a926:	d9eb      	bls.n	800a900 <USBH_GetFreePipe+0x12>
	} 
  }
  return 0xFFFF;
 800a928:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3714      	adds	r7, #20
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <ChangeButtonMappingKB>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void ChangeButtonMappingKB(uint8_t bt)
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	4603      	mov	r3, r0
 800a940:	71fb      	strb	r3, [r7, #7]
    if(state == A_UP) // state = 1 --> analog up
 800a942:	4b53      	ldr	r3, [pc, #332]	; (800aa90 <ChangeButtonMappingKB+0x158>)
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	2b01      	cmp	r3, #1
 800a948:	d104      	bne.n	800a954 <ChangeButtonMappingKB+0x1c>
    {
        controls.KBControls.KEYBOARD_a_up = bt;
 800a94a:	4a52      	ldr	r2, [pc, #328]	; (800aa94 <ChangeButtonMappingKB+0x15c>)
 800a94c:	79fb      	ldrb	r3, [r7, #7]
 800a94e:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    }
    else if(state == BUTTON_Z) // state = 18 --> Z
    {
        controls.KBControls.KEYBOARD_z = bt;
    }
}
 800a952:	e097      	b.n	800aa84 <ChangeButtonMappingKB+0x14c>
    else if(state == A_DOWN) // state = 2 --> analog up
 800a954:	4b4e      	ldr	r3, [pc, #312]	; (800aa90 <ChangeButtonMappingKB+0x158>)
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d104      	bne.n	800a966 <ChangeButtonMappingKB+0x2e>
        controls.KBControls.KEYBOARD_a_down = bt;
 800a95c:	4a4d      	ldr	r2, [pc, #308]	; (800aa94 <ChangeButtonMappingKB+0x15c>)
 800a95e:	79fb      	ldrb	r3, [r7, #7]
 800a960:	f882 3081 	strb.w	r3, [r2, #129]	; 0x81
}
 800a964:	e08e      	b.n	800aa84 <ChangeButtonMappingKB+0x14c>
    else if(state == A_LEFT) // state = 3 --> analog up
 800a966:	4b4a      	ldr	r3, [pc, #296]	; (800aa90 <ChangeButtonMappingKB+0x158>)
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	2b03      	cmp	r3, #3
 800a96c:	d104      	bne.n	800a978 <ChangeButtonMappingKB+0x40>
        controls.KBControls.KEYBOARD_a_left = bt;
 800a96e:	4a49      	ldr	r2, [pc, #292]	; (800aa94 <ChangeButtonMappingKB+0x15c>)
 800a970:	79fb      	ldrb	r3, [r7, #7]
 800a972:	f882 3082 	strb.w	r3, [r2, #130]	; 0x82
}
 800a976:	e085      	b.n	800aa84 <ChangeButtonMappingKB+0x14c>
    else if(state == A_RIGHT) // state = 4 --> analog up
 800a978:	4b45      	ldr	r3, [pc, #276]	; (800aa90 <ChangeButtonMappingKB+0x158>)
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	2b04      	cmp	r3, #4
 800a97e:	d104      	bne.n	800a98a <ChangeButtonMappingKB+0x52>
        controls.KBControls.KEYBOARD_a_right = bt;
 800a980:	4a44      	ldr	r2, [pc, #272]	; (800aa94 <ChangeButtonMappingKB+0x15c>)
 800a982:	79fb      	ldrb	r3, [r7, #7]
 800a984:	f882 3083 	strb.w	r3, [r2, #131]	; 0x83
}
 800a988:	e07c      	b.n	800aa84 <ChangeButtonMappingKB+0x14c>
    else if(state == DPAD_UP) // state = 5 --> dpad up
 800a98a:	4b41      	ldr	r3, [pc, #260]	; (800aa90 <ChangeButtonMappingKB+0x158>)
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	2b05      	cmp	r3, #5
 800a990:	d104      	bne.n	800a99c <ChangeButtonMappingKB+0x64>
        controls.KBControls.KEYBOARD_d_up = bt;
 800a992:	4a40      	ldr	r2, [pc, #256]	; (800aa94 <ChangeButtonMappingKB+0x15c>)
 800a994:	79fb      	ldrb	r3, [r7, #7]
 800a996:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
}
 800a99a:	e073      	b.n	800aa84 <ChangeButtonMappingKB+0x14c>
    else if(state == DPAD_DOWN) // state = 6 --> dpad down
 800a99c:	4b3c      	ldr	r3, [pc, #240]	; (800aa90 <ChangeButtonMappingKB+0x158>)
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	2b06      	cmp	r3, #6
 800a9a2:	d104      	bne.n	800a9ae <ChangeButtonMappingKB+0x76>
        controls.KBControls.KEYBOARD_d_down = bt;
 800a9a4:	4a3b      	ldr	r2, [pc, #236]	; (800aa94 <ChangeButtonMappingKB+0x15c>)
 800a9a6:	79fb      	ldrb	r3, [r7, #7]
 800a9a8:	f882 3077 	strb.w	r3, [r2, #119]	; 0x77
}
 800a9ac:	e06a      	b.n	800aa84 <ChangeButtonMappingKB+0x14c>
    else if(state == DPAD_LEFT) // state = 7 --> dpad left
 800a9ae:	4b38      	ldr	r3, [pc, #224]	; (800aa90 <ChangeButtonMappingKB+0x158>)
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	2b07      	cmp	r3, #7
 800a9b4:	d104      	bne.n	800a9c0 <ChangeButtonMappingKB+0x88>
        controls.KBControls.KEYBOARD_d_left = bt;
 800a9b6:	4a37      	ldr	r2, [pc, #220]	; (800aa94 <ChangeButtonMappingKB+0x15c>)
 800a9b8:	79fb      	ldrb	r3, [r7, #7]
 800a9ba:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
}
 800a9be:	e061      	b.n	800aa84 <ChangeButtonMappingKB+0x14c>
    else if(state == DPAD_RIGHT) // state = 8 --> dpad right
 800a9c0:	4b33      	ldr	r3, [pc, #204]	; (800aa90 <ChangeButtonMappingKB+0x158>)
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	2b08      	cmp	r3, #8
 800a9c6:	d104      	bne.n	800a9d2 <ChangeButtonMappingKB+0x9a>
        controls.KBControls.KEYBOARD_d_right = bt;
 800a9c8:	4a32      	ldr	r2, [pc, #200]	; (800aa94 <ChangeButtonMappingKB+0x15c>)
 800a9ca:	79fb      	ldrb	r3, [r7, #7]
 800a9cc:	f882 3079 	strb.w	r3, [r2, #121]	; 0x79
}
 800a9d0:	e058      	b.n	800aa84 <ChangeButtonMappingKB+0x14c>
    else if(state == BUTTON_START) // state = 9 --> start
 800a9d2:	4b2f      	ldr	r3, [pc, #188]	; (800aa90 <ChangeButtonMappingKB+0x158>)
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	2b09      	cmp	r3, #9
 800a9d8:	d104      	bne.n	800a9e4 <ChangeButtonMappingKB+0xac>
        controls.KBControls.KEYBOARD_start = bt;
 800a9da:	4a2e      	ldr	r2, [pc, #184]	; (800aa94 <ChangeButtonMappingKB+0x15c>)
 800a9dc:	79fb      	ldrb	r3, [r7, #7]
 800a9de:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
}
 800a9e2:	e04f      	b.n	800aa84 <ChangeButtonMappingKB+0x14c>
    else if(state == BUTTON_B) // state = 10 --> B
 800a9e4:	4b2a      	ldr	r3, [pc, #168]	; (800aa90 <ChangeButtonMappingKB+0x158>)
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	2b0a      	cmp	r3, #10
 800a9ea:	d104      	bne.n	800a9f6 <ChangeButtonMappingKB+0xbe>
        controls.KBControls.KEYBOARD_b = bt;
 800a9ec:	4a29      	ldr	r2, [pc, #164]	; (800aa94 <ChangeButtonMappingKB+0x15c>)
 800a9ee:	79fb      	ldrb	r3, [r7, #7]
 800a9f0:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
}
 800a9f4:	e046      	b.n	800aa84 <ChangeButtonMappingKB+0x14c>
    else if(state == BUTTON_A) // state = 11 --> A
 800a9f6:	4b26      	ldr	r3, [pc, #152]	; (800aa90 <ChangeButtonMappingKB+0x158>)
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	2b0b      	cmp	r3, #11
 800a9fc:	d104      	bne.n	800aa08 <ChangeButtonMappingKB+0xd0>
        controls.KBControls.KEYBOARD_a = bt;
 800a9fe:	4a25      	ldr	r2, [pc, #148]	; (800aa94 <ChangeButtonMappingKB+0x15c>)
 800aa00:	79fb      	ldrb	r3, [r7, #7]
 800aa02:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
}
 800aa06:	e03d      	b.n	800aa84 <ChangeButtonMappingKB+0x14c>
    else if(state == C_UP) // state = 12 --> c up
 800aa08:	4b21      	ldr	r3, [pc, #132]	; (800aa90 <ChangeButtonMappingKB+0x158>)
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	2b0c      	cmp	r3, #12
 800aa0e:	d104      	bne.n	800aa1a <ChangeButtonMappingKB+0xe2>
        controls.KBControls.KEYBOARD_c_up = bt;
 800aa10:	4a20      	ldr	r2, [pc, #128]	; (800aa94 <ChangeButtonMappingKB+0x15c>)
 800aa12:	79fb      	ldrb	r3, [r7, #7]
 800aa14:	f882 307c 	strb.w	r3, [r2, #124]	; 0x7c
}
 800aa18:	e034      	b.n	800aa84 <ChangeButtonMappingKB+0x14c>
    else if(state == C_DOWN) // state = 13 --> c down
 800aa1a:	4b1d      	ldr	r3, [pc, #116]	; (800aa90 <ChangeButtonMappingKB+0x158>)
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	2b0d      	cmp	r3, #13
 800aa20:	d104      	bne.n	800aa2c <ChangeButtonMappingKB+0xf4>
        controls.KBControls.KEYBOARD_c_down = bt;
 800aa22:	4a1c      	ldr	r2, [pc, #112]	; (800aa94 <ChangeButtonMappingKB+0x15c>)
 800aa24:	79fb      	ldrb	r3, [r7, #7]
 800aa26:	f882 307d 	strb.w	r3, [r2, #125]	; 0x7d
}
 800aa2a:	e02b      	b.n	800aa84 <ChangeButtonMappingKB+0x14c>
    else if(state == C_LEFT) // state = 14 --> c left
 800aa2c:	4b18      	ldr	r3, [pc, #96]	; (800aa90 <ChangeButtonMappingKB+0x158>)
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	2b0e      	cmp	r3, #14
 800aa32:	d104      	bne.n	800aa3e <ChangeButtonMappingKB+0x106>
        controls.KBControls.KEYBOARD_c_left = bt;
 800aa34:	4a17      	ldr	r2, [pc, #92]	; (800aa94 <ChangeButtonMappingKB+0x15c>)
 800aa36:	79fb      	ldrb	r3, [r7, #7]
 800aa38:	f882 307e 	strb.w	r3, [r2, #126]	; 0x7e
}
 800aa3c:	e022      	b.n	800aa84 <ChangeButtonMappingKB+0x14c>
    else if(state == C_RIGHT) // state = 15 --> c right
 800aa3e:	4b14      	ldr	r3, [pc, #80]	; (800aa90 <ChangeButtonMappingKB+0x158>)
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	2b0f      	cmp	r3, #15
 800aa44:	d104      	bne.n	800aa50 <ChangeButtonMappingKB+0x118>
        controls.KBControls.KEYBOARD_c_right = bt;
 800aa46:	4a13      	ldr	r2, [pc, #76]	; (800aa94 <ChangeButtonMappingKB+0x15c>)
 800aa48:	79fb      	ldrb	r3, [r7, #7]
 800aa4a:	f882 307f 	strb.w	r3, [r2, #127]	; 0x7f
}
 800aa4e:	e019      	b.n	800aa84 <ChangeButtonMappingKB+0x14c>
    else if(state == BUTTON_L) // state = 16 --> L
 800aa50:	4b0f      	ldr	r3, [pc, #60]	; (800aa90 <ChangeButtonMappingKB+0x158>)
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	2b10      	cmp	r3, #16
 800aa56:	d104      	bne.n	800aa62 <ChangeButtonMappingKB+0x12a>
        controls.KBControls.KEYBOARD_l = bt;
 800aa58:	4a0e      	ldr	r2, [pc, #56]	; (800aa94 <ChangeButtonMappingKB+0x15c>)
 800aa5a:	79fb      	ldrb	r3, [r7, #7]
 800aa5c:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
}
 800aa60:	e010      	b.n	800aa84 <ChangeButtonMappingKB+0x14c>
    else if(state == BUTTON_R) // state = 17 --> R
 800aa62:	4b0b      	ldr	r3, [pc, #44]	; (800aa90 <ChangeButtonMappingKB+0x158>)
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	2b11      	cmp	r3, #17
 800aa68:	d104      	bne.n	800aa74 <ChangeButtonMappingKB+0x13c>
        controls.KBControls.KEYBOARD_r = bt;
 800aa6a:	4a0a      	ldr	r2, [pc, #40]	; (800aa94 <ChangeButtonMappingKB+0x15c>)
 800aa6c:	79fb      	ldrb	r3, [r7, #7]
 800aa6e:	f882 307b 	strb.w	r3, [r2, #123]	; 0x7b
}
 800aa72:	e007      	b.n	800aa84 <ChangeButtonMappingKB+0x14c>
    else if(state == BUTTON_Z) // state = 18 --> Z
 800aa74:	4b06      	ldr	r3, [pc, #24]	; (800aa90 <ChangeButtonMappingKB+0x158>)
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	2b12      	cmp	r3, #18
 800aa7a:	d103      	bne.n	800aa84 <ChangeButtonMappingKB+0x14c>
        controls.KBControls.KEYBOARD_z = bt;
 800aa7c:	4a05      	ldr	r2, [pc, #20]	; (800aa94 <ChangeButtonMappingKB+0x15c>)
 800aa7e:	79fb      	ldrb	r3, [r7, #7]
 800aa80:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
}
 800aa84:	bf00      	nop
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr
 800aa90:	2000010a 	.word	0x2000010a
 800aa94:	20000284 	.word	0x20000284

0800aa98 <ChangeButtonMappingController>:

void ChangeButtonMappingController(uint64_t bt)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	e9c7 0100 	strd	r0, r1, [r7]
    if(state == DPAD_UP) // state = 5 --> dpad up
 800aaa2:	4b48      	ldr	r3, [pc, #288]	; (800abc4 <ChangeButtonMappingController+0x12c>)
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	2b05      	cmp	r3, #5
 800aaa8:	d105      	bne.n	800aab6 <ChangeButtonMappingController+0x1e>
    {
    	controls.XpadControls.up = bt;
 800aaaa:	4b47      	ldr	r3, [pc, #284]	; (800abc8 <ChangeButtonMappingController+0x130>)
 800aaac:	683a      	ldr	r2, [r7, #0]
 800aaae:	621a      	str	r2, [r3, #32]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	625a      	str	r2, [r3, #36]	; 0x24
    }
    else if(state == BUTTON_Z) // state = 18 --> Z
    {
        controls.XpadControls.z = bt;
    }
}
 800aab4:	e080      	b.n	800abb8 <ChangeButtonMappingController+0x120>
    else if(state == DPAD_DOWN) // state = 6 --> dpad down
 800aab6:	4b43      	ldr	r3, [pc, #268]	; (800abc4 <ChangeButtonMappingController+0x12c>)
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	2b06      	cmp	r3, #6
 800aabc:	d105      	bne.n	800aaca <ChangeButtonMappingController+0x32>
    	controls.XpadControls.down = bt;
 800aabe:	4b42      	ldr	r3, [pc, #264]	; (800abc8 <ChangeButtonMappingController+0x130>)
 800aac0:	683a      	ldr	r2, [r7, #0]
 800aac2:	629a      	str	r2, [r3, #40]	; 0x28
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800aac8:	e076      	b.n	800abb8 <ChangeButtonMappingController+0x120>
    else if(state == DPAD_LEFT) // state = 7 --> dpad left
 800aaca:	4b3e      	ldr	r3, [pc, #248]	; (800abc4 <ChangeButtonMappingController+0x12c>)
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	2b07      	cmp	r3, #7
 800aad0:	d105      	bne.n	800aade <ChangeButtonMappingController+0x46>
        controls.XpadControls.left = bt;
 800aad2:	4b3d      	ldr	r3, [pc, #244]	; (800abc8 <ChangeButtonMappingController+0x130>)
 800aad4:	683a      	ldr	r2, [r7, #0]
 800aad6:	631a      	str	r2, [r3, #48]	; 0x30
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	635a      	str	r2, [r3, #52]	; 0x34
}
 800aadc:	e06c      	b.n	800abb8 <ChangeButtonMappingController+0x120>
    else if(state == DPAD_RIGHT) // state = 8 --> dpad right
 800aade:	4b39      	ldr	r3, [pc, #228]	; (800abc4 <ChangeButtonMappingController+0x12c>)
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	2b08      	cmp	r3, #8
 800aae4:	d105      	bne.n	800aaf2 <ChangeButtonMappingController+0x5a>
        controls.XpadControls.right = bt;
 800aae6:	4b38      	ldr	r3, [pc, #224]	; (800abc8 <ChangeButtonMappingController+0x130>)
 800aae8:	683a      	ldr	r2, [r7, #0]
 800aaea:	639a      	str	r2, [r3, #56]	; 0x38
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800aaf0:	e062      	b.n	800abb8 <ChangeButtonMappingController+0x120>
    else if(state == BUTTON_START) // state = 9 --> start
 800aaf2:	4b34      	ldr	r3, [pc, #208]	; (800abc4 <ChangeButtonMappingController+0x12c>)
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	2b09      	cmp	r3, #9
 800aaf8:	d105      	bne.n	800ab06 <ChangeButtonMappingController+0x6e>
        controls.XpadControls.start = bt;
 800aafa:	4b33      	ldr	r3, [pc, #204]	; (800abc8 <ChangeButtonMappingController+0x130>)
 800aafc:	683a      	ldr	r2, [r7, #0]
 800aafe:	619a      	str	r2, [r3, #24]
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	61da      	str	r2, [r3, #28]
}
 800ab04:	e058      	b.n	800abb8 <ChangeButtonMappingController+0x120>
    else if(state == BUTTON_B) // state = 10 --> B
 800ab06:	4b2f      	ldr	r3, [pc, #188]	; (800abc4 <ChangeButtonMappingController+0x12c>)
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	2b0a      	cmp	r3, #10
 800ab0c:	d105      	bne.n	800ab1a <ChangeButtonMappingController+0x82>
        controls.XpadControls.b = bt;
 800ab0e:	4b2e      	ldr	r3, [pc, #184]	; (800abc8 <ChangeButtonMappingController+0x130>)
 800ab10:	683a      	ldr	r2, [r7, #0]
 800ab12:	609a      	str	r2, [r3, #8]
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	60da      	str	r2, [r3, #12]
}
 800ab18:	e04e      	b.n	800abb8 <ChangeButtonMappingController+0x120>
    else if(state == BUTTON_A) // state = 11 --> A
 800ab1a:	4b2a      	ldr	r3, [pc, #168]	; (800abc4 <ChangeButtonMappingController+0x12c>)
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	2b0b      	cmp	r3, #11
 800ab20:	d105      	bne.n	800ab2e <ChangeButtonMappingController+0x96>
        controls.XpadControls.a = bt;
 800ab22:	4b29      	ldr	r3, [pc, #164]	; (800abc8 <ChangeButtonMappingController+0x130>)
 800ab24:	683a      	ldr	r2, [r7, #0]
 800ab26:	601a      	str	r2, [r3, #0]
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	605a      	str	r2, [r3, #4]
}
 800ab2c:	e044      	b.n	800abb8 <ChangeButtonMappingController+0x120>
    else if(state == C_UP) // state = 12 --> c up
 800ab2e:	4b25      	ldr	r3, [pc, #148]	; (800abc4 <ChangeButtonMappingController+0x12c>)
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	2b0c      	cmp	r3, #12
 800ab34:	d105      	bne.n	800ab42 <ChangeButtonMappingController+0xaa>
        controls.XpadControls.c_up = bt;
 800ab36:	4b24      	ldr	r3, [pc, #144]	; (800abc8 <ChangeButtonMappingController+0x130>)
 800ab38:	683a      	ldr	r2, [r7, #0]
 800ab3a:	651a      	str	r2, [r3, #80]	; 0x50
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	655a      	str	r2, [r3, #84]	; 0x54
}
 800ab40:	e03a      	b.n	800abb8 <ChangeButtonMappingController+0x120>
    else if(state == C_DOWN) // state = 13 --> c down
 800ab42:	4b20      	ldr	r3, [pc, #128]	; (800abc4 <ChangeButtonMappingController+0x12c>)
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	2b0d      	cmp	r3, #13
 800ab48:	d105      	bne.n	800ab56 <ChangeButtonMappingController+0xbe>
        controls.XpadControls.c_down = bt;
 800ab4a:	4b1f      	ldr	r3, [pc, #124]	; (800abc8 <ChangeButtonMappingController+0x130>)
 800ab4c:	683a      	ldr	r2, [r7, #0]
 800ab4e:	659a      	str	r2, [r3, #88]	; 0x58
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800ab54:	e030      	b.n	800abb8 <ChangeButtonMappingController+0x120>
    else if(state == C_LEFT) // state = 14 --> c left
 800ab56:	4b1b      	ldr	r3, [pc, #108]	; (800abc4 <ChangeButtonMappingController+0x12c>)
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	2b0e      	cmp	r3, #14
 800ab5c:	d105      	bne.n	800ab6a <ChangeButtonMappingController+0xd2>
        controls.XpadControls.c_left = bt;
 800ab5e:	4b1a      	ldr	r3, [pc, #104]	; (800abc8 <ChangeButtonMappingController+0x130>)
 800ab60:	683a      	ldr	r2, [r7, #0]
 800ab62:	661a      	str	r2, [r3, #96]	; 0x60
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ab68:	e026      	b.n	800abb8 <ChangeButtonMappingController+0x120>
    else if(state == C_RIGHT) // state = 15 --> c right
 800ab6a:	4b16      	ldr	r3, [pc, #88]	; (800abc4 <ChangeButtonMappingController+0x12c>)
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	2b0f      	cmp	r3, #15
 800ab70:	d105      	bne.n	800ab7e <ChangeButtonMappingController+0xe6>
        controls.XpadControls.c_right = bt;
 800ab72:	4b15      	ldr	r3, [pc, #84]	; (800abc8 <ChangeButtonMappingController+0x130>)
 800ab74:	683a      	ldr	r2, [r7, #0]
 800ab76:	669a      	str	r2, [r3, #104]	; 0x68
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800ab7c:	e01c      	b.n	800abb8 <ChangeButtonMappingController+0x120>
    else if(state == BUTTON_L) // state = 16 --> L
 800ab7e:	4b11      	ldr	r3, [pc, #68]	; (800abc4 <ChangeButtonMappingController+0x12c>)
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	2b10      	cmp	r3, #16
 800ab84:	d105      	bne.n	800ab92 <ChangeButtonMappingController+0xfa>
        controls.XpadControls.l = bt;
 800ab86:	4b10      	ldr	r3, [pc, #64]	; (800abc8 <ChangeButtonMappingController+0x130>)
 800ab88:	683a      	ldr	r2, [r7, #0]
 800ab8a:	641a      	str	r2, [r3, #64]	; 0x40
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	645a      	str	r2, [r3, #68]	; 0x44
}
 800ab90:	e012      	b.n	800abb8 <ChangeButtonMappingController+0x120>
    else if(state == BUTTON_R) // state = 17 --> R
 800ab92:	4b0c      	ldr	r3, [pc, #48]	; (800abc4 <ChangeButtonMappingController+0x12c>)
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	2b11      	cmp	r3, #17
 800ab98:	d105      	bne.n	800aba6 <ChangeButtonMappingController+0x10e>
        controls.XpadControls.r = bt;
 800ab9a:	4b0b      	ldr	r3, [pc, #44]	; (800abc8 <ChangeButtonMappingController+0x130>)
 800ab9c:	683a      	ldr	r2, [r7, #0]
 800ab9e:	649a      	str	r2, [r3, #72]	; 0x48
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800aba4:	e008      	b.n	800abb8 <ChangeButtonMappingController+0x120>
    else if(state == BUTTON_Z) // state = 18 --> Z
 800aba6:	4b07      	ldr	r3, [pc, #28]	; (800abc4 <ChangeButtonMappingController+0x12c>)
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	2b12      	cmp	r3, #18
 800abac:	d104      	bne.n	800abb8 <ChangeButtonMappingController+0x120>
        controls.XpadControls.z = bt;
 800abae:	4b06      	ldr	r3, [pc, #24]	; (800abc8 <ChangeButtonMappingController+0x130>)
 800abb0:	683a      	ldr	r2, [r7, #0]
 800abb2:	611a      	str	r2, [r3, #16]
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	615a      	str	r2, [r3, #20]
}
 800abb8:	bf00      	nop
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr
 800abc4:	2000010a 	.word	0x2000010a
 800abc8:	20000284 	.word	0x20000284

0800abcc <SaveControls>:

void SaveControls()
{
 800abcc:	b590      	push	{r4, r7, lr}
 800abce:	b089      	sub	sp, #36	; 0x24
 800abd0:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock(); //unlock flash writing
 800abd2:	f7f6 f80d 	bl	8000bf0 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 800abd6:	4b1e      	ldr	r3, [pc, #120]	; (800ac50 <SaveControls+0x84>)
 800abd8:	22f3      	movs	r2, #243	; 0xf3
 800abda:	60da      	str	r2, [r3, #12]
                  FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR|FLASH_FLAG_PGSERR);
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.Sector = FLASH_SECTOR_4;
 800abdc:	2304      	movs	r3, #4
 800abde:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.TypeErase = TYPEERASE_SECTORS;
 800abe0:	2300      	movs	r3, #0
 800abe2:	607b      	str	r3, [r7, #4]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800abe4:	2302      	movs	r3, #2
 800abe6:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbSectors = 1;
 800abe8:	2301      	movs	r3, #1
 800abea:	613b      	str	r3, [r7, #16]
	uint32_t SectorError = 0;
 800abec:	2300      	movs	r3, #0
 800abee:	603b      	str	r3, [r7, #0]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK) {
 800abf0:	463a      	mov	r2, r7
 800abf2:	1d3b      	adds	r3, r7, #4
 800abf4:	4611      	mov	r1, r2
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7f6 f966 	bl	8000ec8 <HAL_FLASHEx_Erase>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d002      	beq.n	800ac08 <SaveControls+0x3c>
	    HAL_FLASH_Lock();
 800ac02:	f7f6 f817 	bl	8000c34 <HAL_FLASH_Lock>
 800ac06:	e01f      	b.n	800ac48 <SaveControls+0x7c>
	    return;
	}

    uint32_t* data = (uint32_t*)&controls;
 800ac08:	4b12      	ldr	r3, [pc, #72]	; (800ac54 <SaveControls+0x88>)
 800ac0a:	61fb      	str	r3, [r7, #28]

    // Total size is 114 bytes + 18 bytes = 132 bytes
    // Each word is 4 bytes, so the total size is 33 Words
    for(int ct = 0;ct < 33;ct++)
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	61bb      	str	r3, [r7, #24]
 800ac10:	e015      	b.n	800ac3e <SaveControls+0x72>
    {
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,SAVE_ADDR+(ct*4),*data); //each SAVE_ADDR+4 is 4 bytes because it is a memory address
 800ac12:	69bb      	ldr	r3, [r7, #24]
 800ac14:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800ac18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	4619      	mov	r1, r3
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f04f 0400 	mov.w	r4, #0
 800ac28:	461a      	mov	r2, r3
 800ac2a:	4623      	mov	r3, r4
 800ac2c:	2002      	movs	r0, #2
 800ac2e:	f7f5 ff8b 	bl	8000b48 <HAL_FLASH_Program>
        data++; // each data+1 is 4 bytes because it is a 32 bit data type
 800ac32:	69fb      	ldr	r3, [r7, #28]
 800ac34:	3304      	adds	r3, #4
 800ac36:	61fb      	str	r3, [r7, #28]
    for(int ct = 0;ct < 33;ct++)
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	61bb      	str	r3, [r7, #24]
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	2b20      	cmp	r3, #32
 800ac42:	dde6      	ble.n	800ac12 <SaveControls+0x46>
    }

    HAL_FLASH_Lock(); // lock it back up
 800ac44:	f7f5 fff6 	bl	8000c34 <HAL_FLASH_Lock>
}
 800ac48:	3724      	adds	r7, #36	; 0x24
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd90      	pop	{r4, r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	40023c00 	.word	0x40023c00
 800ac54:	20000284 	.word	0x20000284

0800ac58 <LoadControls>:

void LoadControls()
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	af00      	add	r7, sp, #0
    memcpy(&controls,saveData,sizeof(Controls));
 800ac5c:	4b05      	ldr	r3, [pc, #20]	; (800ac74 <LoadControls+0x1c>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a05      	ldr	r2, [pc, #20]	; (800ac78 <LoadControls+0x20>)
 800ac62:	4610      	mov	r0, r2
 800ac64:	4619      	mov	r1, r3
 800ac66:	2384      	movs	r3, #132	; 0x84
 800ac68:	461a      	mov	r2, r3
 800ac6a:	f001 f8d7 	bl	800be1c <memcpy>
}
 800ac6e:	bf00      	nop
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	20000078 	.word	0x20000078
 800ac78:	20000284 	.word	0x20000284

0800ac7c <AdvanceState>:

void AdvanceState()
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	af00      	add	r7, sp, #0
    state++;
 800ac80:	4b15      	ldr	r3, [pc, #84]	; (800acd8 <AdvanceState+0x5c>)
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	3301      	adds	r3, #1
 800ac86:	b2da      	uxtb	r2, r3
 800ac88:	4b13      	ldr	r3, [pc, #76]	; (800acd8 <AdvanceState+0x5c>)
 800ac8a:	701a      	strb	r2, [r3, #0]
    if((state == STATE_SENSITIVITY && type == CONTROLLER_KB) || state > STATE_DEADZONE) // we're done mapping the controls
 800ac8c:	4b12      	ldr	r3, [pc, #72]	; (800acd8 <AdvanceState+0x5c>)
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	2b13      	cmp	r3, #19
 800ac92:	d103      	bne.n	800ac9c <AdvanceState+0x20>
 800ac94:	4b11      	ldr	r3, [pc, #68]	; (800acdc <AdvanceState+0x60>)
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	2b04      	cmp	r3, #4
 800ac9a:	d003      	beq.n	800aca4 <AdvanceState+0x28>
 800ac9c:	4b0e      	ldr	r3, [pc, #56]	; (800acd8 <AdvanceState+0x5c>)
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	2b14      	cmp	r3, #20
 800aca2:	d905      	bls.n	800acb0 <AdvanceState+0x34>
    {
		SaveControls(); // write directly to flash
 800aca4:	f7ff ff92 	bl	800abcc <SaveControls>
		state = NORMAL; // back to normal controller operation
 800aca8:	4b0b      	ldr	r3, [pc, #44]	; (800acd8 <AdvanceState+0x5c>)
 800acaa:	2200      	movs	r2, #0
 800acac:	701a      	strb	r2, [r3, #0]
    }
    else if(state == STATE_DEADZONE)
    {
    	controls.XpadControls.deadzone = DEFAULT_DEADZONE;
    }
}
 800acae:	e010      	b.n	800acd2 <AdvanceState+0x56>
    else if(state == STATE_SENSITIVITY)
 800acb0:	4b09      	ldr	r3, [pc, #36]	; (800acd8 <AdvanceState+0x5c>)
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	2b13      	cmp	r3, #19
 800acb6:	d104      	bne.n	800acc2 <AdvanceState+0x46>
    	controls.XpadControls.range = DEFAULT_RANGE;
 800acb8:	4b09      	ldr	r3, [pc, #36]	; (800ace0 <AdvanceState+0x64>)
 800acba:	2264      	movs	r2, #100	; 0x64
 800acbc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 800acc0:	e007      	b.n	800acd2 <AdvanceState+0x56>
    else if(state == STATE_DEADZONE)
 800acc2:	4b05      	ldr	r3, [pc, #20]	; (800acd8 <AdvanceState+0x5c>)
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	2b14      	cmp	r3, #20
 800acc8:	d103      	bne.n	800acd2 <AdvanceState+0x56>
    	controls.XpadControls.deadzone = DEFAULT_DEADZONE;
 800acca:	4b05      	ldr	r3, [pc, #20]	; (800ace0 <AdvanceState+0x64>)
 800accc:	2214      	movs	r2, #20
 800acce:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 800acd2:	bf00      	nop
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	2000010a 	.word	0x2000010a
 800acdc:	2000010c 	.word	0x2000010c
 800ace0:	20000284 	.word	0x20000284

0800ace4 <reverse>:

uint8_t reverse(uint8_t b)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
 800acea:	4603      	mov	r3, r0
 800acec:	71fb      	strb	r3, [r7, #7]
   b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 800acee:	79fb      	ldrb	r3, [r7, #7]
 800acf0:	091b      	lsrs	r3, r3, #4
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	b25a      	sxtb	r2, r3
 800acf6:	79fb      	ldrb	r3, [r7, #7]
 800acf8:	011b      	lsls	r3, r3, #4
 800acfa:	b25b      	sxtb	r3, r3
 800acfc:	4313      	orrs	r3, r2
 800acfe:	b25b      	sxtb	r3, r3
 800ad00:	71fb      	strb	r3, [r7, #7]
   b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 800ad02:	79fb      	ldrb	r3, [r7, #7]
 800ad04:	109b      	asrs	r3, r3, #2
 800ad06:	b25b      	sxtb	r3, r3
 800ad08:	f003 0333 	and.w	r3, r3, #51	; 0x33
 800ad0c:	b25a      	sxtb	r2, r3
 800ad0e:	79fb      	ldrb	r3, [r7, #7]
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	b25b      	sxtb	r3, r3
 800ad14:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 800ad18:	b25b      	sxtb	r3, r3
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	b25b      	sxtb	r3, r3
 800ad1e:	71fb      	strb	r3, [r7, #7]
   b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 800ad20:	79fb      	ldrb	r3, [r7, #7]
 800ad22:	105b      	asrs	r3, r3, #1
 800ad24:	b25b      	sxtb	r3, r3
 800ad26:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800ad2a:	b25a      	sxtb	r2, r3
 800ad2c:	79fb      	ldrb	r3, [r7, #7]
 800ad2e:	005b      	lsls	r3, r3, #1
 800ad30:	b25b      	sxtb	r3, r3
 800ad32:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 800ad36:	b25b      	sxtb	r3, r3
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	b25b      	sxtb	r3, r3
 800ad3c:	71fb      	strb	r3, [r7, #7]
   return b;
 800ad3e:	79fb      	ldrb	r3, [r7, #7]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <SetN64DataInputMode>:

void SetN64DataInputMode()
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	af00      	add	r7, sp, #0
	// port A8 to input mode
	GPIOA->MODER &= ~(1 << 17);
 800ad50:	4a08      	ldr	r2, [pc, #32]	; (800ad74 <SetN64DataInputMode+0x28>)
 800ad52:	4b08      	ldr	r3, [pc, #32]	; (800ad74 <SetN64DataInputMode+0x28>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ad5a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1 << 16);
 800ad5c:	4a05      	ldr	r2, [pc, #20]	; (800ad74 <SetN64DataInputMode+0x28>)
 800ad5e:	4b05      	ldr	r3, [pc, #20]	; (800ad74 <SetN64DataInputMode+0x28>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad66:	6013      	str	r3, [r2, #0]
}
 800ad68:	bf00      	nop
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop
 800ad74:	40020000 	.word	0x40020000

0800ad78 <SetN64DataOutputMode>:

void SetN64DataOutputMode()
{
 800ad78:	b480      	push	{r7}
 800ad7a:	af00      	add	r7, sp, #0
	// port A8 to output mode
	GPIOA->MODER &= ~(1 << 17);
 800ad7c:	4a08      	ldr	r2, [pc, #32]	; (800ada0 <SetN64DataOutputMode+0x28>)
 800ad7e:	4b08      	ldr	r3, [pc, #32]	; (800ada0 <SetN64DataOutputMode+0x28>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ad86:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1 << 16);
 800ad88:	4a05      	ldr	r2, [pc, #20]	; (800ada0 <SetN64DataOutputMode+0x28>)
 800ad8a:	4b05      	ldr	r3, [pc, #20]	; (800ada0 <SetN64DataOutputMode+0x28>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad92:	6013      	str	r3, [r2, #0]
}
 800ad94:	bf00      	nop
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr
 800ad9e:	bf00      	nop
 800ada0:	40020000 	.word	0x40020000

0800ada4 <write_1>:

void write_1()
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	af00      	add	r7, sp, #0
	GPIOA->BSRR = (1 << 24);
 800ada8:	4b07      	ldr	r3, [pc, #28]	; (800adc8 <write_1+0x24>)
 800adaa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800adae:	619a      	str	r2, [r3, #24]
	my_wait_us_asm(1);
 800adb0:	2001      	movs	r0, #1
 800adb2:	f7f5 fa27 	bl	8000204 <my_wait_us_asm>
	GPIOA->BSRR = (1 << 8);
 800adb6:	4b04      	ldr	r3, [pc, #16]	; (800adc8 <write_1+0x24>)
 800adb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800adbc:	619a      	str	r2, [r3, #24]
    my_wait_us_asm(3);
 800adbe:	2003      	movs	r0, #3
 800adc0:	f7f5 fa20 	bl	8000204 <my_wait_us_asm>
}
 800adc4:	bf00      	nop
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	40020000 	.word	0x40020000

0800adcc <write_0>:

void write_0()
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	af00      	add	r7, sp, #0
	GPIOA->BSRR = (1 << 24);
 800add0:	4b07      	ldr	r3, [pc, #28]	; (800adf0 <write_0+0x24>)
 800add2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800add6:	619a      	str	r2, [r3, #24]
	my_wait_us_asm(3);
 800add8:	2003      	movs	r0, #3
 800adda:	f7f5 fa13 	bl	8000204 <my_wait_us_asm>
	GPIOA->BSRR = (1 << 8);
 800adde:	4b04      	ldr	r3, [pc, #16]	; (800adf0 <write_0+0x24>)
 800ade0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ade4:	619a      	str	r2, [r3, #24]
    my_wait_us_asm(1);
 800ade6:	2001      	movs	r0, #1
 800ade8:	f7f5 fa0c 	bl	8000204 <my_wait_us_asm>
}
 800adec:	bf00      	nop
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	40020000 	.word	0x40020000

0800adf4 <SendStop>:

void SendStop()
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	af00      	add	r7, sp, #0
	GPIOA->BSRR = (1 << 24);
 800adf8:	4b06      	ldr	r3, [pc, #24]	; (800ae14 <SendStop+0x20>)
 800adfa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800adfe:	619a      	str	r2, [r3, #24]
	my_wait_us_asm(1);
 800ae00:	2001      	movs	r0, #1
 800ae02:	f7f5 f9ff 	bl	8000204 <my_wait_us_asm>
	GPIOA->BSRR = (1 << 8);
 800ae06:	4b03      	ldr	r3, [pc, #12]	; (800ae14 <SendStop+0x20>)
 800ae08:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae0c:	619a      	str	r2, [r3, #24]
}
 800ae0e:	bf00      	nop
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	40020000 	.word	0x40020000

0800ae18 <SendByte>:

// send a byte from LSB to MSB (proper serialization)
void SendByte(unsigned char b)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	4603      	mov	r3, r0
 800ae20:	71fb      	strb	r3, [r7, #7]
    for(int i = 0;i < 8;i++) // send all 8 bits, one at a time
 800ae22:	2300      	movs	r3, #0
 800ae24:	60fb      	str	r3, [r7, #12]
 800ae26:	e00f      	b.n	800ae48 <SendByte+0x30>
    {
        if((b >> i) & 1)
 800ae28:	79fa      	ldrb	r2, [r7, #7]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	fa42 f303 	asr.w	r3, r2, r3
 800ae30:	f003 0301 	and.w	r3, r3, #1
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d002      	beq.n	800ae3e <SendByte+0x26>
        {
            write_1();
 800ae38:	f7ff ffb4 	bl	800ada4 <write_1>
 800ae3c:	e001      	b.n	800ae42 <SendByte+0x2a>
        }
        else
        {
            write_0();
 800ae3e:	f7ff ffc5 	bl	800adcc <write_0>
    for(int i = 0;i < 8;i++) // send all 8 bits, one at a time
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	3301      	adds	r3, #1
 800ae46:	60fb      	str	r3, [r7, #12]
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2b07      	cmp	r3, #7
 800ae4c:	ddec      	ble.n	800ae28 <SendByte+0x10>
        }
    }
}
 800ae4e:	bf00      	nop
 800ae50:	3710      	adds	r7, #16
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <SendIdentityN64>:

void SendIdentityN64()
{
 800ae56:	b580      	push	{r7, lr}
 800ae58:	af00      	add	r7, sp, #0
    // reply 0x05, 0x00, 0x02
    SendByte(0x05);
 800ae5a:	2005      	movs	r0, #5
 800ae5c:	f7ff ffdc 	bl	800ae18 <SendByte>
    SendByte(0x00);
 800ae60:	2000      	movs	r0, #0
 800ae62:	f7ff ffd9 	bl	800ae18 <SendByte>
    SendByte(0x02);
 800ae66:	2002      	movs	r0, #2
 800ae68:	f7ff ffd6 	bl	800ae18 <SendByte>
    SendStop();
 800ae6c:	f7ff ffc2 	bl	800adf4 <SendStop>
}
 800ae70:	bf00      	nop
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <SendIdentityGC>:


void SendIdentityGC()
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	af00      	add	r7, sp, #0
    SendByte(0x90);
 800ae78:	2090      	movs	r0, #144	; 0x90
 800ae7a:	f7ff ffcd 	bl	800ae18 <SendByte>
    SendByte(0x00);
 800ae7e:	2000      	movs	r0, #0
 800ae80:	f7ff ffca 	bl	800ae18 <SendByte>
    SendByte(0x0C);
 800ae84:	200c      	movs	r0, #12
 800ae86:	f7ff ffc7 	bl	800ae18 <SendByte>
    SendStop();
 800ae8a:	f7ff ffb3 	bl	800adf4 <SendStop>
}
 800ae8e:	bf00      	nop
 800ae90:	bd80      	pop	{r7, pc}
	...

0800ae94 <SendControllerDataN64>:

void SendControllerDataN64()
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
    unsigned long data = *(unsigned long*)&n64_data;
 800ae9a:	4b11      	ldr	r3, [pc, #68]	; (800aee0 <SendControllerDataN64+0x4c>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	60bb      	str	r3, [r7, #8]
    unsigned int size = sizeof(data) * 8; // should be 4 bytes * 8 = 32 bits
 800aea0:	2320      	movs	r3, #32
 800aea2:	607b      	str	r3, [r7, #4]

    for(unsigned int i = 0;i < size;i++)
 800aea4:	2300      	movs	r3, #0
 800aea6:	60fb      	str	r3, [r7, #12]
 800aea8:	e00f      	b.n	800aeca <SendControllerDataN64+0x36>
    {
        if((data >> i) & 1)
 800aeaa:	68ba      	ldr	r2, [r7, #8]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	fa22 f303 	lsr.w	r3, r2, r3
 800aeb2:	f003 0301 	and.w	r3, r3, #1
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d002      	beq.n	800aec0 <SendControllerDataN64+0x2c>
        {
            write_1();
 800aeba:	f7ff ff73 	bl	800ada4 <write_1>
 800aebe:	e001      	b.n	800aec4 <SendControllerDataN64+0x30>
        }
        else
        {
            write_0();
 800aec0:	f7ff ff84 	bl	800adcc <write_0>
    for(unsigned int i = 0;i < size;i++)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	3301      	adds	r3, #1
 800aec8:	60fb      	str	r3, [r7, #12]
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d3eb      	bcc.n	800aeaa <SendControllerDataN64+0x16>
        }
    }

    SendStop();
 800aed2:	f7ff ff8f 	bl	800adf4 <SendStop>
}
 800aed6:	bf00      	nop
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	20000308 	.word	0x20000308

0800aee4 <SendControllerDataGC>:

void SendControllerDataGC()
{
 800aee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aee6:	b087      	sub	sp, #28
 800aee8:	af00      	add	r7, sp, #0
    uint64_t data = *(uint64_t*)&gc_data;
 800aeea:	4b1b      	ldr	r3, [pc, #108]	; (800af58 <SendControllerDataGC+0x74>)
 800aeec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    unsigned int size = sizeof(data) * 8; // should be 8 bytes * 8 = 64 bits
 800aef4:	2340      	movs	r3, #64	; 0x40
 800aef6:	607b      	str	r3, [r7, #4]

    for(unsigned int i = 0;i < size;i++)
 800aef8:	2300      	movs	r3, #0
 800aefa:	617b      	str	r3, [r7, #20]
 800aefc:	e022      	b.n	800af44 <SendControllerDataGC+0x60>
    {
        if((data >> i) & 1)
 800aefe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800af02:	6979      	ldr	r1, [r7, #20]
 800af04:	f1c1 0620 	rsb	r6, r1, #32
 800af08:	f1a1 0020 	sub.w	r0, r1, #32
 800af0c:	fa22 f401 	lsr.w	r4, r2, r1
 800af10:	fa03 f606 	lsl.w	r6, r3, r6
 800af14:	4334      	orrs	r4, r6
 800af16:	fa23 f000 	lsr.w	r0, r3, r0
 800af1a:	4304      	orrs	r4, r0
 800af1c:	fa23 f501 	lsr.w	r5, r3, r1
 800af20:	f04f 0201 	mov.w	r2, #1
 800af24:	f04f 0300 	mov.w	r3, #0
 800af28:	ea02 0204 	and.w	r2, r2, r4
 800af2c:	ea03 0305 	and.w	r3, r3, r5
 800af30:	4313      	orrs	r3, r2
 800af32:	d002      	beq.n	800af3a <SendControllerDataGC+0x56>
        {
            write_1();
 800af34:	f7ff ff36 	bl	800ada4 <write_1>
 800af38:	e001      	b.n	800af3e <SendControllerDataGC+0x5a>
        }
        else
        {
            write_0();
 800af3a:	f7ff ff47 	bl	800adcc <write_0>
    for(unsigned int i = 0;i < size;i++)
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	3301      	adds	r3, #1
 800af42:	617b      	str	r3, [r7, #20]
 800af44:	697a      	ldr	r2, [r7, #20]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d3d8      	bcc.n	800aefe <SendControllerDataGC+0x1a>
        }
    }

    SendStop();
 800af4c:	f7ff ff52 	bl	800adf4 <SendStop>
}
 800af50:	bf00      	nop
 800af52:	371c      	adds	r7, #28
 800af54:	46bd      	mov	sp, r7
 800af56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af58:	2000027c 	.word	0x2000027c

0800af5c <SendOriginGC>:

void SendOriginGC()
{
 800af5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af5e:	b087      	sub	sp, #28
 800af60:	af00      	add	r7, sp, #0
	gc_data.a_x_axis = reverse(128);
 800af62:	2080      	movs	r0, #128	; 0x80
 800af64:	f7ff febe 	bl	800ace4 <reverse>
 800af68:	4603      	mov	r3, r0
 800af6a:	461a      	mov	r2, r3
 800af6c:	4b2c      	ldr	r3, [pc, #176]	; (800b020 <SendOriginGC+0xc4>)
 800af6e:	709a      	strb	r2, [r3, #2]
	gc_data.a_y_axis = reverse(128);
 800af70:	2080      	movs	r0, #128	; 0x80
 800af72:	f7ff feb7 	bl	800ace4 <reverse>
 800af76:	4603      	mov	r3, r0
 800af78:	461a      	mov	r2, r3
 800af7a:	4b29      	ldr	r3, [pc, #164]	; (800b020 <SendOriginGC+0xc4>)
 800af7c:	70da      	strb	r2, [r3, #3]
	gc_data.c_x_axis = reverse(128);
 800af7e:	2080      	movs	r0, #128	; 0x80
 800af80:	f7ff feb0 	bl	800ace4 <reverse>
 800af84:	4603      	mov	r3, r0
 800af86:	461a      	mov	r2, r3
 800af88:	4b25      	ldr	r3, [pc, #148]	; (800b020 <SendOriginGC+0xc4>)
 800af8a:	711a      	strb	r2, [r3, #4]
	gc_data.c_y_axis = reverse(128);
 800af8c:	2080      	movs	r0, #128	; 0x80
 800af8e:	f7ff fea9 	bl	800ace4 <reverse>
 800af92:	4603      	mov	r3, r0
 800af94:	461a      	mov	r2, r3
 800af96:	4b22      	ldr	r3, [pc, #136]	; (800b020 <SendOriginGC+0xc4>)
 800af98:	715a      	strb	r2, [r3, #5]
	gc_data.l_trigger = 0;
 800af9a:	4b21      	ldr	r3, [pc, #132]	; (800b020 <SendOriginGC+0xc4>)
 800af9c:	2200      	movs	r2, #0
 800af9e:	719a      	strb	r2, [r3, #6]
	gc_data.r_trigger = 0;
 800afa0:	4b1f      	ldr	r3, [pc, #124]	; (800b020 <SendOriginGC+0xc4>)
 800afa2:	2200      	movs	r2, #0
 800afa4:	71da      	strb	r2, [r3, #7]

	uint64_t data = *(uint64_t*)&gc_data;
 800afa6:	4b1e      	ldr	r3, [pc, #120]	; (800b020 <SendOriginGC+0xc4>)
 800afa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afac:	e9c7 2302 	strd	r2, r3, [r7, #8]
	unsigned int size = sizeof(data) * 8; // should be 8 bytes * 8 = 64 bits
 800afb0:	2340      	movs	r3, #64	; 0x40
 800afb2:	607b      	str	r3, [r7, #4]

	for(unsigned int i = 0;i < size;i++)
 800afb4:	2300      	movs	r3, #0
 800afb6:	617b      	str	r3, [r7, #20]
 800afb8:	e022      	b.n	800b000 <SendOriginGC+0xa4>
	{
		if((data >> i) & 1)
 800afba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800afbe:	6979      	ldr	r1, [r7, #20]
 800afc0:	f1c1 0620 	rsb	r6, r1, #32
 800afc4:	f1a1 0020 	sub.w	r0, r1, #32
 800afc8:	fa22 f401 	lsr.w	r4, r2, r1
 800afcc:	fa03 f606 	lsl.w	r6, r3, r6
 800afd0:	4334      	orrs	r4, r6
 800afd2:	fa23 f000 	lsr.w	r0, r3, r0
 800afd6:	4304      	orrs	r4, r0
 800afd8:	fa23 f501 	lsr.w	r5, r3, r1
 800afdc:	f04f 0201 	mov.w	r2, #1
 800afe0:	f04f 0300 	mov.w	r3, #0
 800afe4:	ea02 0204 	and.w	r2, r2, r4
 800afe8:	ea03 0305 	and.w	r3, r3, r5
 800afec:	4313      	orrs	r3, r2
 800afee:	d002      	beq.n	800aff6 <SendOriginGC+0x9a>
		{
			write_1();
 800aff0:	f7ff fed8 	bl	800ada4 <write_1>
 800aff4:	e001      	b.n	800affa <SendOriginGC+0x9e>
		}
		else
		{
			write_0();
 800aff6:	f7ff fee9 	bl	800adcc <write_0>
	for(unsigned int i = 0;i < size;i++)
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	3301      	adds	r3, #1
 800affe:	617b      	str	r3, [r7, #20]
 800b000:	697a      	ldr	r2, [r7, #20]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	429a      	cmp	r2, r3
 800b006:	d3d8      	bcc.n	800afba <SendOriginGC+0x5e>
		}
	}

	SendByte(0x00);
 800b008:	2000      	movs	r0, #0
 800b00a:	f7ff ff05 	bl	800ae18 <SendByte>
	SendByte(0x00);
 800b00e:	2000      	movs	r0, #0
 800b010:	f7ff ff02 	bl	800ae18 <SendByte>
	SendStop();
 800b014:	f7ff feee 	bl	800adf4 <SendStop>
}
 800b018:	bf00      	nop
 800b01a:	371c      	adds	r7, #28
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b020:	2000027c 	.word	0x2000027c

0800b024 <GetMiddleOfPulse>:
// 0 is 3 microseconds low followed by 1 microsecond high
// 1 is 1 microsecond low followed by 3 microseconds high
// if either of these while loops is going on 4us or more, break out of the function

uint8_t GetMiddleOfPulse()
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
	uint8_t ct = 0;
 800b02a:	2300      	movs	r3, #0
 800b02c:	71fb      	strb	r3, [r7, #7]
    // wait for line to go high
    while(1)
    {
        if(GPIOA->IDR & 0x0100) break;
 800b02e:	4b18      	ldr	r3, [pc, #96]	; (800b090 <GetMiddleOfPulse+0x6c>)
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b036:	2b00      	cmp	r3, #0
 800b038:	d107      	bne.n	800b04a <GetMiddleOfPulse+0x26>

        ct++;
 800b03a:	79fb      	ldrb	r3, [r7, #7]
 800b03c:	3301      	adds	r3, #1
 800b03e:	71fb      	strb	r3, [r7, #7]
        if(ct == 200) // failsafe limit TBD
 800b040:	79fb      	ldrb	r3, [r7, #7]
 800b042:	2bc8      	cmp	r3, #200	; 0xc8
 800b044:	d1f3      	bne.n	800b02e <GetMiddleOfPulse+0xa>
        	return 5; // error code
 800b046:	2305      	movs	r3, #5
 800b048:	e01d      	b.n	800b086 <GetMiddleOfPulse+0x62>
        if(GPIOA->IDR & 0x0100) break;
 800b04a:	bf00      	nop
    }

    ct = 0;
 800b04c:	2300      	movs	r3, #0
 800b04e:	71fb      	strb	r3, [r7, #7]

    // wait for line to go low
    while(1)
    {
        if(!(GPIOA->IDR & 0x0100)) break;
 800b050:	4b0f      	ldr	r3, [pc, #60]	; (800b090 <GetMiddleOfPulse+0x6c>)
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d007      	beq.n	800b06c <GetMiddleOfPulse+0x48>

        ct++;
 800b05c:	79fb      	ldrb	r3, [r7, #7]
 800b05e:	3301      	adds	r3, #1
 800b060:	71fb      	strb	r3, [r7, #7]
		if(ct == 200) // failsafe limit TBD
 800b062:	79fb      	ldrb	r3, [r7, #7]
 800b064:	2bc8      	cmp	r3, #200	; 0xc8
 800b066:	d1f3      	bne.n	800b050 <GetMiddleOfPulse+0x2c>
			return 5; // error code
 800b068:	2305      	movs	r3, #5
 800b06a:	e00c      	b.n	800b086 <GetMiddleOfPulse+0x62>
        if(!(GPIOA->IDR & 0x0100)) break;
 800b06c:	bf00      	nop
    }

    // now we have the falling edge

    // wait 2 microseconds to be in the middle of the pulse, and read. high --> 1.  low --> 0.
    my_wait_us_asm(2);
 800b06e:	2002      	movs	r0, #2
 800b070:	f7f5 f8c8 	bl	8000204 <my_wait_us_asm>

    return (GPIOA->IDR & 0x0100) ? 1U : 0U;
 800b074:	4b06      	ldr	r3, [pc, #24]	; (800b090 <GetMiddleOfPulse+0x6c>)
 800b076:	691b      	ldr	r3, [r3, #16]
 800b078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d001      	beq.n	800b084 <GetMiddleOfPulse+0x60>
 800b080:	2301      	movs	r3, #1
 800b082:	e000      	b.n	800b086 <GetMiddleOfPulse+0x62>
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3708      	adds	r7, #8
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	40020000 	.word	0x40020000

0800b094 <readCommand>:



uint32_t readCommand()
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
	uint8_t retVal;

	// we are already at the first falling edge
	// get middle of first pulse, 2us later
	my_wait_us_asm(2);
 800b09a:	2002      	movs	r0, #2
 800b09c:	f7f5 f8b2 	bl	8000204 <my_wait_us_asm>
	uint32_t command = (GPIOA->IDR & 0x0100) ? 1U : 0U, bits_read = 1;
 800b0a0:	4b18      	ldr	r3, [pc, #96]	; (800b104 <readCommand+0x70>)
 800b0a2:	691b      	ldr	r3, [r3, #16]
 800b0a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d001      	beq.n	800b0b0 <readCommand+0x1c>
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e000      	b.n	800b0b2 <readCommand+0x1e>
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	60fb      	str	r3, [r7, #12]
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	60bb      	str	r3, [r7, #8]

    while(1) // read at least 9 bits (1 byte + stop bit)
    {
        command = command << 1; // make room for the new bit
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	005b      	lsls	r3, r3, #1
 800b0bc:	60fb      	str	r3, [r7, #12]
        retVal = GetMiddleOfPulse();
 800b0be:	f7ff ffb1 	bl	800b024 <GetMiddleOfPulse>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	71fb      	strb	r3, [r7, #7]
        if(retVal == 5) // timeout
 800b0c6:	79fb      	ldrb	r3, [r7, #7]
 800b0c8:	2b05      	cmp	r3, #5
 800b0ca:	d109      	bne.n	800b0e0 <readCommand+0x4c>
        {
        	if(bits_read >= 8)
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	2b07      	cmp	r3, #7
 800b0d0:	d904      	bls.n	800b0dc <readCommand+0x48>
        	{
				command = command >> 2; // get rid of the stop bit AND the room we made for an additional bit
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	089b      	lsrs	r3, r3, #2
 800b0d6:	60fb      	str	r3, [r7, #12]
				return command;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	e00f      	b.n	800b0fc <readCommand+0x68>
        	}
        	else // there is no possible way this can be a real command
        	{
        		return 5; // dummy value
 800b0dc:	2305      	movs	r3, #5
 800b0de:	e00d      	b.n	800b0fc <readCommand+0x68>
        	}
        }
        command += retVal;
 800b0e0:	79fb      	ldrb	r3, [r7, #7]
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	60fb      	str	r3, [r7, #12]

        bits_read++;
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	60bb      	str	r3, [r7, #8]

        if(bits_read >= 25) // this is the longest known command length
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	2b18      	cmp	r3, #24
 800b0f2:	d9e1      	bls.n	800b0b8 <readCommand+0x24>
        {
        	command = command >> 1; // get rid of the stop bit (which is always a 1)
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	085b      	lsrs	r3, r3, #1
 800b0f8:	60fb      	str	r3, [r7, #12]
        	return command;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3710      	adds	r7, #16
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	40020000 	.word	0x40020000

0800b108 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  output_type = OUTPUT_UNDEFINED;
 800b10c:	4b38      	ldr	r3, [pc, #224]	; (800b1f0 <main+0xe8>)
 800b10e:	2200      	movs	r2, #0
 800b110:	701a      	strb	r2, [r3, #0]
  memset(&n64_data,0,4); // clear controller state
 800b112:	2204      	movs	r2, #4
 800b114:	2100      	movs	r1, #0
 800b116:	4837      	ldr	r0, [pc, #220]	; (800b1f4 <main+0xec>)
 800b118:	f000 fe8b 	bl	800be32 <memset>
  memset(&gc_data,0,8); // clear controller state
 800b11c:	2208      	movs	r2, #8
 800b11e:	2100      	movs	r1, #0
 800b120:	4835      	ldr	r0, [pc, #212]	; (800b1f8 <main+0xf0>)
 800b122:	f000 fe86 	bl	800be32 <memset>
  gc_data.beginning_one = 1;
 800b126:	4a34      	ldr	r2, [pc, #208]	; (800b1f8 <main+0xf0>)
 800b128:	7853      	ldrb	r3, [r2, #1]
 800b12a:	f043 0301 	orr.w	r3, r3, #1
 800b12e:	7053      	strb	r3, [r2, #1]
  LoadControls();
 800b130:	f7ff fd92 	bl	800ac58 <LoadControls>
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b134:	f7f5 fb3e 	bl	80007b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b138:	f000 f86a 	bl	800b210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b13c:	f000 f92a 	bl	800b394 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800b140:	f000 f8fa 	bl	800b338 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 800b144:	f000 fb22 	bl	800b78c <MX_USB_HOST_Init>
  {

  /* USER CODE END WHILE */
	// check for button pressed to begin control re-map

	  if(state == NORMAL)
 800b148:	4b2c      	ldr	r3, [pc, #176]	; (800b1fc <main+0xf4>)
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d129      	bne.n	800b1a4 <main+0x9c>
	  {
		  if(!(GPIOC->IDR & 0x2000)) // user wants to change controls
 800b150:	4b2b      	ldr	r3, [pc, #172]	; (800b200 <main+0xf8>)
 800b152:	691b      	ldr	r3, [r3, #16]
 800b154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d11d      	bne.n	800b198 <main+0x90>
		  {
			  if(blueButtonPressed == 0) // make sure it's a separate button press
 800b15c:	4b29      	ldr	r3, [pc, #164]	; (800b204 <main+0xfc>)
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d11c      	bne.n	800b19e <main+0x96>
			  {

				  if(type == CONTROLLER_KB)
 800b164:	4b28      	ldr	r3, [pc, #160]	; (800b208 <main+0x100>)
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	2b04      	cmp	r3, #4
 800b16a:	d103      	bne.n	800b174 <main+0x6c>
					  state = 1;
 800b16c:	4b23      	ldr	r3, [pc, #140]	; (800b1fc <main+0xf4>)
 800b16e:	2201      	movs	r2, #1
 800b170:	701a      	strb	r2, [r3, #0]
 800b172:	e006      	b.n	800b182 <main+0x7a>
				  else if(type != CONTROLLER_NONE)
 800b174:	4b24      	ldr	r3, [pc, #144]	; (800b208 <main+0x100>)
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d002      	beq.n	800b182 <main+0x7a>
					  state = 5;
 800b17c:	4b1f      	ldr	r3, [pc, #124]	; (800b1fc <main+0xf4>)
 800b17e:	2205      	movs	r2, #5
 800b180:	701a      	strb	r2, [r3, #0]

				  if(type != CONTROLLER_NONE)
 800b182:	4b21      	ldr	r3, [pc, #132]	; (800b208 <main+0x100>)
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d009      	beq.n	800b19e <main+0x96>
				  {
					  // enter programming mode
					  GPIOA->BSRR = (1 << 5); // LED ON
 800b18a:	4b20      	ldr	r3, [pc, #128]	; (800b20c <main+0x104>)
 800b18c:	2220      	movs	r2, #32
 800b18e:	619a      	str	r2, [r3, #24]
					  blueButtonPressed = 1;
 800b190:	4b1c      	ldr	r3, [pc, #112]	; (800b204 <main+0xfc>)
 800b192:	2201      	movs	r2, #1
 800b194:	701a      	strb	r2, [r3, #0]
					  continue;
 800b196:	e02a      	b.n	800b1ee <main+0xe6>
				  }
			  }
		  }
		  else
		  {
			  blueButtonPressed = 0;
 800b198:	4b1a      	ldr	r3, [pc, #104]	; (800b204 <main+0xfc>)
 800b19a:	2200      	movs	r2, #0
 800b19c:	701a      	strb	r2, [r3, #0]
		  }

		  MX_USB_HOST_Process();
 800b19e:	f000 fb11 	bl	800b7c4 <MX_USB_HOST_Process>
 800b1a2:	e7d1      	b.n	800b148 <main+0x40>
	  }
	  else
	  {
		  if(!(GPIOC->IDR & 0x2000)) // user wants to cancel and return to regular mode
 800b1a4:	4b16      	ldr	r3, [pc, #88]	; (800b200 <main+0xf8>)
 800b1a6:	691b      	ldr	r3, [r3, #16]
 800b1a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d10e      	bne.n	800b1ce <main+0xc6>
		  {
			  if(blueButtonPressed == 0) // make sure it's a separate button press
 800b1b0:	4b14      	ldr	r3, [pc, #80]	; (800b204 <main+0xfc>)
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d10d      	bne.n	800b1d4 <main+0xcc>
			  {
				  GPIOA->BSRR = (1 << 21); // LED OFF
 800b1b8:	4b14      	ldr	r3, [pc, #80]	; (800b20c <main+0x104>)
 800b1ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b1be:	619a      	str	r2, [r3, #24]
				  blueButtonPressed = 1;
 800b1c0:	4b10      	ldr	r3, [pc, #64]	; (800b204 <main+0xfc>)
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	701a      	strb	r2, [r3, #0]
				  state = NORMAL;
 800b1c6:	4b0d      	ldr	r3, [pc, #52]	; (800b1fc <main+0xf4>)
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	701a      	strb	r2, [r3, #0]
				  continue;
 800b1cc:	e00f      	b.n	800b1ee <main+0xe6>
			  }
		  }
		  else
		  {
			  blueButtonPressed = 0;
 800b1ce:	4b0d      	ldr	r3, [pc, #52]	; (800b204 <main+0xfc>)
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	701a      	strb	r2, [r3, #0]
		  }

		  MX_USB_HOST_Process();
 800b1d4:	f000 faf6 	bl	800b7c4 <MX_USB_HOST_Process>

		  if(state == NORMAL) // about to return to normal operation, make sure the LED turns off
 800b1d8:	4b08      	ldr	r3, [pc, #32]	; (800b1fc <main+0xf4>)
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d1b3      	bne.n	800b148 <main+0x40>
		  {
			  GPIOA->BSRR = (1 << 21); // LED OFF
 800b1e0:	4b0a      	ldr	r3, [pc, #40]	; (800b20c <main+0x104>)
 800b1e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b1e6:	619a      	str	r2, [r3, #24]
			  blueButtonPressed = 0;
 800b1e8:	4b06      	ldr	r3, [pc, #24]	; (800b204 <main+0xfc>)
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	701a      	strb	r2, [r3, #0]
	  if(state == NORMAL)
 800b1ee:	e7ab      	b.n	800b148 <main+0x40>
 800b1f0:	2000011c 	.word	0x2000011c
 800b1f4:	20000308 	.word	0x20000308
 800b1f8:	2000027c 	.word	0x2000027c
 800b1fc:	2000010a 	.word	0x2000010a
 800b200:	40020800 	.word	0x40020800
 800b204:	2000010b 	.word	0x2000010b
 800b208:	2000010c 	.word	0x2000010c
 800b20c:	40020000 	.word	0x40020000

0800b210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) // 168 MHz
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b0ac      	sub	sp, #176	; 0xb0
 800b214:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800b216:	2300      	movs	r3, #0
 800b218:	60bb      	str	r3, [r7, #8]
 800b21a:	4a43      	ldr	r2, [pc, #268]	; (800b328 <SystemClock_Config+0x118>)
 800b21c:	4b42      	ldr	r3, [pc, #264]	; (800b328 <SystemClock_Config+0x118>)
 800b21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b224:	6413      	str	r3, [r2, #64]	; 0x40
 800b226:	4b40      	ldr	r3, [pc, #256]	; (800b328 <SystemClock_Config+0x118>)
 800b228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b22a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b22e:	60bb      	str	r3, [r7, #8]
 800b230:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b232:	2300      	movs	r3, #0
 800b234:	607b      	str	r3, [r7, #4]
 800b236:	4a3d      	ldr	r2, [pc, #244]	; (800b32c <SystemClock_Config+0x11c>)
 800b238:	4b3c      	ldr	r3, [pc, #240]	; (800b32c <SystemClock_Config+0x11c>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b240:	6013      	str	r3, [r2, #0]
 800b242:	4b3a      	ldr	r3, [pc, #232]	; (800b32c <SystemClock_Config+0x11c>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b24a:	607b      	str	r3, [r7, #4]
 800b24c:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b24e:	2301      	movs	r3, #1
 800b250:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b252:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b256:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b25a:	2302      	movs	r3, #2
 800b25c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b260:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 800b268:	2304      	movs	r3, #4
 800b26a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800b26e:	23a8      	movs	r3, #168	; 0xa8
 800b270:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b274:	2302      	movs	r3, #2
 800b276:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800b27a:	2307      	movs	r3, #7
 800b27c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800b280:	2302      	movs	r3, #2
 800b282:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b286:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7f8 faa8 	bl	80037e0 <HAL_RCC_OscConfig>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d004      	beq.n	800b2a0 <SystemClock_Config+0x90>
  {
    _Error_Handler(__FILE__, __LINE__);
 800b296:	f240 2186 	movw	r1, #646	; 0x286
 800b29a:	4825      	ldr	r0, [pc, #148]	; (800b330 <SystemClock_Config+0x120>)
 800b29c:	f000 f93e 	bl	800b51c <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b2a0:	230f      	movs	r3, #15
 800b2a2:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800b2ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800b2b0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800b2b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2b6:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800b2b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b2bc:	2105      	movs	r1, #5
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7f7 fc98 	bl	8002bf4 <HAL_RCC_ClockConfig>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d004      	beq.n	800b2d4 <SystemClock_Config+0xc4>
  {
    _Error_Handler(__FILE__, __LINE__);
 800b2ca:	f44f 7125 	mov.w	r1, #660	; 0x294
 800b2ce:	4818      	ldr	r0, [pc, #96]	; (800b330 <SystemClock_Config+0x120>)
 800b2d0:	f000 f924 	bl	800b51c <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800b2d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2d8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b2de:	f107 030c 	add.w	r3, r7, #12
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7f7 fd9c 	bl	8002e20 <HAL_RCCEx_PeriphCLKConfig>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d004      	beq.n	800b2f8 <SystemClock_Config+0xe8>
  {
    _Error_Handler(__FILE__, __LINE__);
 800b2ee:	f240 219b 	movw	r1, #667	; 0x29b
 800b2f2:	480f      	ldr	r0, [pc, #60]	; (800b330 <SystemClock_Config+0x120>)
 800b2f4:	f000 f912 	bl	800b51c <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800b2f8:	f7f7 fd5e 	bl	8002db8 <HAL_RCC_GetHCLKFreq>
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	4b0d      	ldr	r3, [pc, #52]	; (800b334 <SystemClock_Config+0x124>)
 800b300:	fba3 2302 	umull	r2, r3, r3, r2
 800b304:	099b      	lsrs	r3, r3, #6
 800b306:	4618      	mov	r0, r3
 800b308:	f7f5 fbe7 	bl	8000ada <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b30c:	2004      	movs	r0, #4
 800b30e:	f7f5 fbf1 	bl	8000af4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
  HAL_NVIC_SetPriority(SysTick_IRQn, 1, 0);
 800b312:	2200      	movs	r2, #0
 800b314:	2101      	movs	r1, #1
 800b316:	f04f 30ff 	mov.w	r0, #4294967295
 800b31a:	f7f5 fbb4 	bl	8000a86 <HAL_NVIC_SetPriority>
}
 800b31e:	bf00      	nop
 800b320:	37b0      	adds	r7, #176	; 0xb0
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	40023800 	.word	0x40023800
 800b32c:	40007000 	.word	0x40007000
 800b330:	0800c014 	.word	0x0800c014
 800b334:	10624dd3 	.word	0x10624dd3

0800b338 <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800b33c:	4b12      	ldr	r3, [pc, #72]	; (800b388 <MX_USART2_UART_Init+0x50>)
 800b33e:	4a13      	ldr	r2, [pc, #76]	; (800b38c <MX_USART2_UART_Init+0x54>)
 800b340:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800b342:	4b11      	ldr	r3, [pc, #68]	; (800b388 <MX_USART2_UART_Init+0x50>)
 800b344:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b348:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b34a:	4b0f      	ldr	r3, [pc, #60]	; (800b388 <MX_USART2_UART_Init+0x50>)
 800b34c:	2200      	movs	r2, #0
 800b34e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800b350:	4b0d      	ldr	r3, [pc, #52]	; (800b388 <MX_USART2_UART_Init+0x50>)
 800b352:	2200      	movs	r2, #0
 800b354:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b356:	4b0c      	ldr	r3, [pc, #48]	; (800b388 <MX_USART2_UART_Init+0x50>)
 800b358:	2200      	movs	r2, #0
 800b35a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b35c:	4b0a      	ldr	r3, [pc, #40]	; (800b388 <MX_USART2_UART_Init+0x50>)
 800b35e:	220c      	movs	r2, #12
 800b360:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b362:	4b09      	ldr	r3, [pc, #36]	; (800b388 <MX_USART2_UART_Init+0x50>)
 800b364:	2200      	movs	r2, #0
 800b366:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b368:	4b07      	ldr	r3, [pc, #28]	; (800b388 <MX_USART2_UART_Init+0x50>)
 800b36a:	2200      	movs	r2, #0
 800b36c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b36e:	4806      	ldr	r0, [pc, #24]	; (800b388 <MX_USART2_UART_Init+0x50>)
 800b370:	f7f8 fc90 	bl	8003c94 <HAL_UART_Init>
 800b374:	4603      	mov	r3, r0
 800b376:	2b00      	cmp	r3, #0
 800b378:	d004      	beq.n	800b384 <MX_USART2_UART_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800b37a:	f240 21b9 	movw	r1, #697	; 0x2b9
 800b37e:	4804      	ldr	r0, [pc, #16]	; (800b390 <MX_USART2_UART_Init+0x58>)
 800b380:	f000 f8cc 	bl	800b51c <_Error_Handler>
  }

}
 800b384:	bf00      	nop
 800b386:	bd80      	pop	{r7, pc}
 800b388:	2000030c 	.word	0x2000030c
 800b38c:	40004400 	.word	0x40004400
 800b390:	0800c014 	.word	0x0800c014

0800b394 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
static void MX_GPIO_Init(void)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b08a      	sub	sp, #40	; 0x28
 800b398:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b39a:	2300      	movs	r3, #0
 800b39c:	613b      	str	r3, [r7, #16]
 800b39e:	4a59      	ldr	r2, [pc, #356]	; (800b504 <MX_GPIO_Init+0x170>)
 800b3a0:	4b58      	ldr	r3, [pc, #352]	; (800b504 <MX_GPIO_Init+0x170>)
 800b3a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3a4:	f043 0304 	orr.w	r3, r3, #4
 800b3a8:	6313      	str	r3, [r2, #48]	; 0x30
 800b3aa:	4b56      	ldr	r3, [pc, #344]	; (800b504 <MX_GPIO_Init+0x170>)
 800b3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ae:	f003 0304 	and.w	r3, r3, #4
 800b3b2:	613b      	str	r3, [r7, #16]
 800b3b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	60fb      	str	r3, [r7, #12]
 800b3ba:	4a52      	ldr	r2, [pc, #328]	; (800b504 <MX_GPIO_Init+0x170>)
 800b3bc:	4b51      	ldr	r3, [pc, #324]	; (800b504 <MX_GPIO_Init+0x170>)
 800b3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3c4:	6313      	str	r3, [r2, #48]	; 0x30
 800b3c6:	4b4f      	ldr	r3, [pc, #316]	; (800b504 <MX_GPIO_Init+0x170>)
 800b3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3ce:	60fb      	str	r3, [r7, #12]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	60bb      	str	r3, [r7, #8]
 800b3d6:	4a4b      	ldr	r2, [pc, #300]	; (800b504 <MX_GPIO_Init+0x170>)
 800b3d8:	4b4a      	ldr	r3, [pc, #296]	; (800b504 <MX_GPIO_Init+0x170>)
 800b3da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3dc:	f043 0301 	orr.w	r3, r3, #1
 800b3e0:	6313      	str	r3, [r2, #48]	; 0x30
 800b3e2:	4b48      	ldr	r3, [pc, #288]	; (800b504 <MX_GPIO_Init+0x170>)
 800b3e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e6:	f003 0301 	and.w	r3, r3, #1
 800b3ea:	60bb      	str	r3, [r7, #8]
 800b3ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	607b      	str	r3, [r7, #4]
 800b3f2:	4a44      	ldr	r2, [pc, #272]	; (800b504 <MX_GPIO_Init+0x170>)
 800b3f4:	4b43      	ldr	r3, [pc, #268]	; (800b504 <MX_GPIO_Init+0x170>)
 800b3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3f8:	f043 0302 	orr.w	r3, r3, #2
 800b3fc:	6313      	str	r3, [r2, #48]	; 0x30
 800b3fe:	4b41      	ldr	r3, [pc, #260]	; (800b504 <MX_GPIO_Init+0x170>)
 800b400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b402:	f003 0302 	and.w	r3, r3, #2
 800b406:	607b      	str	r3, [r7, #4]
 800b408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b40a:	2300      	movs	r3, #0
 800b40c:	603b      	str	r3, [r7, #0]
 800b40e:	4a3d      	ldr	r2, [pc, #244]	; (800b504 <MX_GPIO_Init+0x170>)
 800b410:	4b3c      	ldr	r3, [pc, #240]	; (800b504 <MX_GPIO_Init+0x170>)
 800b412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b414:	f043 0308 	orr.w	r3, r3, #8
 800b418:	6313      	str	r3, [r2, #48]	; 0x30
 800b41a:	4b3a      	ldr	r3, [pc, #232]	; (800b504 <MX_GPIO_Init+0x170>)
 800b41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b41e:	f003 0308 	and.w	r3, r3, #8
 800b422:	603b      	str	r3, [r7, #0]
 800b424:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800b426:	2200      	movs	r2, #0
 800b428:	2120      	movs	r1, #32
 800b42a:	4837      	ldr	r0, [pc, #220]	; (800b508 <MX_GPIO_Init+0x174>)
 800b42c:	f7f6 f800 	bl	8001430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin (blue pushbutton) */
  GPIO_InitStruct.Pin = B1_Pin;
 800b430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800b436:	4b35      	ldr	r3, [pc, #212]	; (800b50c <MX_GPIO_Init+0x178>)
 800b438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b43a:	2300      	movs	r3, #0
 800b43c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800b43e:	f107 0314 	add.w	r3, r7, #20
 800b442:	4619      	mov	r1, r3
 800b444:	4832      	ldr	r0, [pc, #200]	; (800b510 <MX_GPIO_Init+0x17c>)
 800b446:	f7f5 fe61 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 PC14 PC15*/
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800b44a:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800b44e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b450:	2303      	movs	r3, #3
 800b452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b454:	2300      	movs	r3, #0
 800b456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b458:	f107 0314 	add.w	r3, r7, #20
 800b45c:	4619      	mov	r1, r3
 800b45e:	482c      	ldr	r0, [pc, #176]	; (800b510 <MX_GPIO_Init+0x17c>)
 800b460:	f7f5 fe54 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6 
                           PA7 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6 
 800b464:	f248 63d3 	movw	r3, #34515	; 0x86d3
 800b468:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b46a:	2303      	movs	r3, #3
 800b46c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b46e:	2300      	movs	r3, #0
 800b470:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b472:	f107 0314 	add.w	r3, r7, #20
 800b476:	4619      	mov	r1, r3
 800b478:	4823      	ldr	r0, [pc, #140]	; (800b508 <MX_GPIO_Init+0x174>)
 800b47a:	f7f5 fe47 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin (green LED) */
  GPIO_InitStruct.Pin = LD2_Pin;
 800b47e:	2320      	movs	r3, #32
 800b480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b482:	2301      	movs	r3, #1
 800b484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b486:	2300      	movs	r3, #0
 800b488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b48a:	2300      	movs	r3, #0
 800b48c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800b48e:	f107 0314 	add.w	r3, r7, #20
 800b492:	4619      	mov	r1, r3
 800b494:	481c      	ldr	r0, [pc, #112]	; (800b508 <MX_GPIO_Init+0x174>)
 800b496:	f7f5 fe39 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB12 PB13 PB14 PB15 
                           PB4 PB5 PB6 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 800b49a:	f24f 73f7 	movw	r3, #63479	; 0xf7f7
 800b49e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b4a0:	2303      	movs	r3, #3
 800b4a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b4a8:	f107 0314 	add.w	r3, r7, #20
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	4819      	ldr	r0, [pc, #100]	; (800b514 <MX_GPIO_Init+0x180>)
 800b4b0:	f7f5 fe2c 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : N64_DATA_Pin */
  GPIO_InitStruct.Pin = N64_DATA_Pin;
 800b4b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800b4ba:	4b14      	ldr	r3, [pc, #80]	; (800b50c <MX_GPIO_Init+0x178>)
 800b4bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4c2:	2303      	movs	r3, #3
 800b4c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(N64_DATA_GPIO_Port, &GPIO_InitStruct);
 800b4c6:	f107 0314 	add.w	r3, r7, #20
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	480e      	ldr	r0, [pc, #56]	; (800b508 <MX_GPIO_Init+0x174>)
 800b4ce:	f7f5 fe1d 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b4d2:	2304      	movs	r3, #4
 800b4d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b4d6:	2303      	movs	r3, #3
 800b4d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b4de:	f107 0314 	add.w	r3, r7, #20
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	480c      	ldr	r0, [pc, #48]	; (800b518 <MX_GPIO_Init+0x184>)
 800b4e6:	f7f5 fe11 	bl	800110c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	2100      	movs	r1, #0
 800b4ee:	2017      	movs	r0, #23
 800b4f0:	f7f5 fac9 	bl	8000a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800b4f4:	2017      	movs	r0, #23
 800b4f6:	f7f5 fae2 	bl	8000abe <HAL_NVIC_EnableIRQ>

}
 800b4fa:	bf00      	nop
 800b4fc:	3728      	adds	r7, #40	; 0x28
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	40023800 	.word	0x40023800
 800b508:	40020000 	.word	0x40020000
 800b50c:	10210000 	.word	0x10210000
 800b510:	40020800 	.word	0x40020800
 800b514:	40020400 	.word	0x40020400
 800b518:	40020c00 	.word	0x40020c00

0800b51c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800b526:	e7fe      	b.n	800b526 <_Error_Handler+0xa>

0800b528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b52e:	2300      	movs	r3, #0
 800b530:	607b      	str	r3, [r7, #4]
 800b532:	4a25      	ldr	r2, [pc, #148]	; (800b5c8 <HAL_MspInit+0xa0>)
 800b534:	4b24      	ldr	r3, [pc, #144]	; (800b5c8 <HAL_MspInit+0xa0>)
 800b536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b53c:	6453      	str	r3, [r2, #68]	; 0x44
 800b53e:	4b22      	ldr	r3, [pc, #136]	; (800b5c8 <HAL_MspInit+0xa0>)
 800b540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b546:	607b      	str	r3, [r7, #4]
 800b548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b54a:	2300      	movs	r3, #0
 800b54c:	603b      	str	r3, [r7, #0]
 800b54e:	4a1e      	ldr	r2, [pc, #120]	; (800b5c8 <HAL_MspInit+0xa0>)
 800b550:	4b1d      	ldr	r3, [pc, #116]	; (800b5c8 <HAL_MspInit+0xa0>)
 800b552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b558:	6413      	str	r3, [r2, #64]	; 0x40
 800b55a:	4b1b      	ldr	r3, [pc, #108]	; (800b5c8 <HAL_MspInit+0xa0>)
 800b55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b55e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b562:	603b      	str	r3, [r7, #0]
 800b564:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b566:	2003      	movs	r0, #3
 800b568:	f7f5 fa82 	bl	8000a70 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 800b56c:	2200      	movs	r2, #0
 800b56e:	2101      	movs	r1, #1
 800b570:	f06f 000b 	mvn.w	r0, #11
 800b574:	f7f5 fa87 	bl	8000a86 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 800b578:	2200      	movs	r2, #0
 800b57a:	2101      	movs	r1, #1
 800b57c:	f06f 000a 	mvn.w	r0, #10
 800b580:	f7f5 fa81 	bl	8000a86 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 800b584:	2200      	movs	r2, #0
 800b586:	2101      	movs	r1, #1
 800b588:	f06f 0009 	mvn.w	r0, #9
 800b58c:	f7f5 fa7b 	bl	8000a86 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 800b590:	2200      	movs	r2, #0
 800b592:	2101      	movs	r1, #1
 800b594:	f06f 0004 	mvn.w	r0, #4
 800b598:	f7f5 fa75 	bl	8000a86 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 800b59c:	2200      	movs	r2, #0
 800b59e:	2101      	movs	r1, #1
 800b5a0:	f06f 0003 	mvn.w	r0, #3
 800b5a4:	f7f5 fa6f 	bl	8000a86 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	2101      	movs	r1, #1
 800b5ac:	f06f 0001 	mvn.w	r0, #1
 800b5b0:	f7f5 fa69 	bl	8000a86 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 1, 0);
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	2101      	movs	r1, #1
 800b5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5bc:	f7f5 fa63 	bl	8000a86 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b5c0:	bf00      	nop
 800b5c2:	3708      	adds	r7, #8
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	40023800 	.word	0x40023800

0800b5cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b088      	sub	sp, #32
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4a12      	ldr	r2, [pc, #72]	; (800b624 <HAL_UART_MspInit+0x58>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d11d      	bne.n	800b61a <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800b5de:	2300      	movs	r3, #0
 800b5e0:	60bb      	str	r3, [r7, #8]
 800b5e2:	4a11      	ldr	r2, [pc, #68]	; (800b628 <HAL_UART_MspInit+0x5c>)
 800b5e4:	4b10      	ldr	r3, [pc, #64]	; (800b628 <HAL_UART_MspInit+0x5c>)
 800b5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5ec:	6413      	str	r3, [r2, #64]	; 0x40
 800b5ee:	4b0e      	ldr	r3, [pc, #56]	; (800b628 <HAL_UART_MspInit+0x5c>)
 800b5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5f6:	60bb      	str	r3, [r7, #8]
 800b5f8:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800b5fa:	230c      	movs	r3, #12
 800b5fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5fe:	2302      	movs	r3, #2
 800b600:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b602:	2301      	movs	r3, #1
 800b604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b606:	2303      	movs	r3, #3
 800b608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b60a:	2307      	movs	r3, #7
 800b60c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b60e:	f107 030c 	add.w	r3, r7, #12
 800b612:	4619      	mov	r1, r3
 800b614:	4805      	ldr	r0, [pc, #20]	; (800b62c <HAL_UART_MspInit+0x60>)
 800b616:	f7f5 fd79 	bl	800110c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800b61a:	bf00      	nop
 800b61c:	3720      	adds	r7, #32
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	40004400 	.word	0x40004400
 800b628:	40023800 	.word	0x40023800
 800b62c:	40020000 	.word	0x40020000

0800b630 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b634:	f7f5 f910 	bl	8000858 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800b638:	f7f5 fa78 	bl	8000b2c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b63c:	bf00      	nop
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800b646:	b672      	cpsid	i
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Read 64 command
	__disable_irq();
	uint32_t cmd;

	cmd = readCommand();
 800b648:	f7ff fd24 	bl	800b094 <readCommand>
 800b64c:	6078      	str	r0, [r7, #4]

	my_wait_us_asm(2); // wait a small amount of time before replying
 800b64e:	2002      	movs	r0, #2
 800b650:	f7f4 fdd8 	bl	8000204 <my_wait_us_asm>

	//-------- SEND RESPONSE
	SetN64DataOutputMode();
 800b654:	f7ff fb90 	bl	800ad78 <SetN64DataOutputMode>

	switch(cmd)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b41      	cmp	r3, #65	; 0x41
 800b65c:	d03f      	beq.n	800b6de <EXTI9_5_IRQHandler+0x9e>
 800b65e:	2b41      	cmp	r3, #65	; 0x41
 800b660:	d804      	bhi.n	800b66c <EXTI9_5_IRQHandler+0x2c>
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00d      	beq.n	800b682 <EXTI9_5_IRQHandler+0x42>
 800b666:	2b01      	cmp	r3, #1
 800b668:	d033      	beq.n	800b6d2 <EXTI9_5_IRQHandler+0x92>
		  break;
	  case 0x02:
	  case 0x03:
	  default:
		  // we do not process the read and write commands (memory pack)
		  break;
 800b66a:	e03e      	b.n	800b6ea <EXTI9_5_IRQHandler+0xaa>
	switch(cmd)
 800b66c:	2bff      	cmp	r3, #255	; 0xff
 800b66e:	d02d      	beq.n	800b6cc <EXTI9_5_IRQHandler+0x8c>
 800b670:	2bff      	cmp	r3, #255	; 0xff
 800b672:	d33a      	bcc.n	800b6ea <EXTI9_5_IRQHandler+0xaa>
 800b674:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
 800b678:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800b67c:	2b02      	cmp	r3, #2
 800b67e:	d834      	bhi.n	800b6ea <EXTI9_5_IRQHandler+0xaa>
 800b680:	e030      	b.n	800b6e4 <EXTI9_5_IRQHandler+0xa4>
		  if(output_type != OUTPUT_UNDEFINED) // re-detect output state
 800b682:	4b20      	ldr	r3, [pc, #128]	; (800b704 <EXTI9_5_IRQHandler+0xc4>)
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d005      	beq.n	800b696 <EXTI9_5_IRQHandler+0x56>
			  output_type = OUTPUT_UNDEFINED;
 800b68a:	4b1e      	ldr	r3, [pc, #120]	; (800b704 <EXTI9_5_IRQHandler+0xc4>)
 800b68c:	2200      	movs	r2, #0
 800b68e:	701a      	strb	r2, [r3, #0]
			  identify_attempted = 0;
 800b690:	4b1d      	ldr	r3, [pc, #116]	; (800b708 <EXTI9_5_IRQHandler+0xc8>)
 800b692:	2200      	movs	r2, #0
 800b694:	701a      	strb	r2, [r3, #0]
		  if(identify_attempted == 0)
 800b696:	4b1c      	ldr	r3, [pc, #112]	; (800b708 <EXTI9_5_IRQHandler+0xc8>)
 800b698:	f993 3000 	ldrsb.w	r3, [r3]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d105      	bne.n	800b6ac <EXTI9_5_IRQHandler+0x6c>
			  SendIdentityGC();
 800b6a0:	f7ff fbe8 	bl	800ae74 <SendIdentityGC>
			  output_type = OUTPUT_GC;
 800b6a4:	4b17      	ldr	r3, [pc, #92]	; (800b704 <EXTI9_5_IRQHandler+0xc4>)
 800b6a6:	2202      	movs	r2, #2
 800b6a8:	701a      	strb	r2, [r3, #0]
 800b6aa:	e004      	b.n	800b6b6 <EXTI9_5_IRQHandler+0x76>
			  SendIdentityN64();
 800b6ac:	f7ff fbd3 	bl	800ae56 <SendIdentityN64>
			  output_type = OUTPUT_N64;
 800b6b0:	4b14      	ldr	r3, [pc, #80]	; (800b704 <EXTI9_5_IRQHandler+0xc4>)
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	701a      	strb	r2, [r3, #0]
		  identify_attempted = 1 - identify_attempted;
 800b6b6:	4b14      	ldr	r3, [pc, #80]	; (800b708 <EXTI9_5_IRQHandler+0xc8>)
 800b6b8:	f993 3000 	ldrsb.w	r3, [r3]
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	f1c3 0301 	rsb	r3, r3, #1
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	b25a      	sxtb	r2, r3
 800b6c6:	4b10      	ldr	r3, [pc, #64]	; (800b708 <EXTI9_5_IRQHandler+0xc8>)
 800b6c8:	701a      	strb	r2, [r3, #0]
		  break;
 800b6ca:	e00f      	b.n	800b6ec <EXTI9_5_IRQHandler+0xac>
		  SendIdentityN64();
 800b6cc:	f7ff fbc3 	bl	800ae56 <SendIdentityN64>
		  break;
 800b6d0:	e00c      	b.n	800b6ec <EXTI9_5_IRQHandler+0xac>
		  output_type = OUTPUT_N64;
 800b6d2:	4b0c      	ldr	r3, [pc, #48]	; (800b704 <EXTI9_5_IRQHandler+0xc4>)
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	701a      	strb	r2, [r3, #0]
		  SendControllerDataN64();
 800b6d8:	f7ff fbdc 	bl	800ae94 <SendControllerDataN64>
		  break;
 800b6dc:	e006      	b.n	800b6ec <EXTI9_5_IRQHandler+0xac>
		  SendOriginGC();
 800b6de:	f7ff fc3d 	bl	800af5c <SendOriginGC>
		  break;
 800b6e2:	e003      	b.n	800b6ec <EXTI9_5_IRQHandler+0xac>
		  SendControllerDataGC();
 800b6e4:	f7ff fbfe 	bl	800aee4 <SendControllerDataGC>
		  break;
 800b6e8:	e000      	b.n	800b6ec <EXTI9_5_IRQHandler+0xac>
		  break;
 800b6ea:	bf00      	nop
	}
	//-------- DONE SENDING RESPOSE

	SetN64DataInputMode();
 800b6ec:	f7ff fb2e 	bl	800ad4c <SetN64DataInputMode>
  __ASM volatile ("cpsie i" : : : "memory");
 800b6f0:	b662      	cpsie	i

	__enable_irq();

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800b6f2:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b6f6:	f7f5 feb5 	bl	8001464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800b6fa:	bf00      	nop
 800b6fc:	3708      	adds	r7, #8
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	2000011c 	.word	0x2000011c
 800b708:	2000010d 	.word	0x2000010d

0800b70c <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800b710:	4802      	ldr	r0, [pc, #8]	; (800b71c <OTG_FS_IRQHandler+0x10>)
 800b712:	f7f6 f953 	bl	80019bc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b716:	bf00      	nop
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	20000ab4 	.word	0x20000ab4

0800b720 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b720:	b480      	push	{r7}
 800b722:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b724:	4a16      	ldr	r2, [pc, #88]	; (800b780 <SystemInit+0x60>)
 800b726:	4b16      	ldr	r3, [pc, #88]	; (800b780 <SystemInit+0x60>)
 800b728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b72c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b730:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b734:	4a13      	ldr	r2, [pc, #76]	; (800b784 <SystemInit+0x64>)
 800b736:	4b13      	ldr	r3, [pc, #76]	; (800b784 <SystemInit+0x64>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f043 0301 	orr.w	r3, r3, #1
 800b73e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b740:	4b10      	ldr	r3, [pc, #64]	; (800b784 <SystemInit+0x64>)
 800b742:	2200      	movs	r2, #0
 800b744:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b746:	4a0f      	ldr	r2, [pc, #60]	; (800b784 <SystemInit+0x64>)
 800b748:	4b0e      	ldr	r3, [pc, #56]	; (800b784 <SystemInit+0x64>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800b750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b754:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b756:	4b0b      	ldr	r3, [pc, #44]	; (800b784 <SystemInit+0x64>)
 800b758:	4a0b      	ldr	r2, [pc, #44]	; (800b788 <SystemInit+0x68>)
 800b75a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b75c:	4a09      	ldr	r2, [pc, #36]	; (800b784 <SystemInit+0x64>)
 800b75e:	4b09      	ldr	r3, [pc, #36]	; (800b784 <SystemInit+0x64>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b766:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b768:	4b06      	ldr	r3, [pc, #24]	; (800b784 <SystemInit+0x64>)
 800b76a:	2200      	movs	r2, #0
 800b76c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b76e:	4b04      	ldr	r3, [pc, #16]	; (800b780 <SystemInit+0x60>)
 800b770:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b774:	609a      	str	r2, [r3, #8]
#endif
}
 800b776:	bf00      	nop
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr
 800b780:	e000ed00 	.word	0xe000ed00
 800b784:	40023800 	.word	0x40023800
 800b788:	24003010 	.word	0x24003010

0800b78c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 800b790:	2201      	movs	r2, #1
 800b792:	4908      	ldr	r1, [pc, #32]	; (800b7b4 <MX_USB_HOST_Init+0x28>)
 800b794:	4808      	ldr	r0, [pc, #32]	; (800b7b8 <MX_USB_HOST_Init+0x2c>)
 800b796:	f7fd ff0c 	bl	80095b2 <USBH_Init>

  USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS);
 800b79a:	4908      	ldr	r1, [pc, #32]	; (800b7bc <MX_USB_HOST_Init+0x30>)
 800b79c:	4806      	ldr	r0, [pc, #24]	; (800b7b8 <MX_USB_HOST_Init+0x2c>)
 800b79e:	f7fd ff7d 	bl	800969c <USBH_RegisterClass>
  USBH_RegisterClass(&hUsbHostFS, USBH_XPAD_CLASS);
 800b7a2:	4907      	ldr	r1, [pc, #28]	; (800b7c0 <MX_USB_HOST_Init+0x34>)
 800b7a4:	4804      	ldr	r0, [pc, #16]	; (800b7b8 <MX_USB_HOST_Init+0x2c>)
 800b7a6:	f7fd ff79 	bl	800969c <USBH_RegisterClass>

  USBH_Start(&hUsbHostFS);
 800b7aa:	4803      	ldr	r0, [pc, #12]	; (800b7b8 <MX_USB_HOST_Init+0x2c>)
 800b7ac:	f7fe f800 	bl	80097b0 <USBH_Start>

  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b7b0:	bf00      	nop
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	0800b7d9 	.word	0x0800b7d9
 800b7b8:	2000034c 	.word	0x2000034c
 800b7bc:	20000038 	.word	0x20000038
 800b7c0:	20000058 	.word	0x20000058

0800b7c4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b7c8:	4802      	ldr	r0, [pc, #8]	; (800b7d4 <MX_USB_HOST_Process+0x10>)
 800b7ca:	f7fe f801 	bl	80097d0 <USBH_Process>
}
 800b7ce:	bf00      	nop
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	2000034c 	.word	0x2000034c

0800b7d8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b7e4:	78fb      	ldrb	r3, [r7, #3]
 800b7e6:	3b01      	subs	r3, #1
 800b7e8:	2b04      	cmp	r3, #4
 800b7ea:	d819      	bhi.n	800b820 <USBH_UserProcess+0x48>
 800b7ec:	a201      	add	r2, pc, #4	; (adr r2, 800b7f4 <USBH_UserProcess+0x1c>)
 800b7ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f2:	bf00      	nop
 800b7f4:	0800b821 	.word	0x0800b821
 800b7f8:	0800b811 	.word	0x0800b811
 800b7fc:	0800b821 	.word	0x0800b821
 800b800:	0800b819 	.word	0x0800b819
 800b804:	0800b809 	.word	0x0800b809
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b808:	4b09      	ldr	r3, [pc, #36]	; (800b830 <USBH_UserProcess+0x58>)
 800b80a:	2203      	movs	r2, #3
 800b80c:	701a      	strb	r2, [r3, #0]
  break;
 800b80e:	e008      	b.n	800b822 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b810:	4b07      	ldr	r3, [pc, #28]	; (800b830 <USBH_UserProcess+0x58>)
 800b812:	2202      	movs	r2, #2
 800b814:	701a      	strb	r2, [r3, #0]
  break;
 800b816:	e004      	b.n	800b822 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b818:	4b05      	ldr	r3, [pc, #20]	; (800b830 <USBH_UserProcess+0x58>)
 800b81a:	2201      	movs	r2, #1
 800b81c:	701a      	strb	r2, [r3, #0]
  break;
 800b81e:	e000      	b.n	800b822 <USBH_UserProcess+0x4a>

  default:
  break;
 800b820:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b822:	bf00      	nop
 800b824:	370c      	adds	r7, #12
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop
 800b830:	2000010e 	.word	0x2000010e

0800b834 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b088      	sub	sp, #32
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b844:	d12c      	bne.n	800b8a0 <HAL_HCD_MspInit+0x6c>
    /*GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);*/

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b846:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b84a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b84c:	2302      	movs	r3, #2
 800b84e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b850:	2300      	movs	r3, #0
 800b852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b854:	2303      	movs	r3, #3
 800b856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b858:	230a      	movs	r3, #10
 800b85a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b85c:	f107 030c 	add.w	r3, r7, #12
 800b860:	4619      	mov	r1, r3
 800b862:	4811      	ldr	r0, [pc, #68]	; (800b8a8 <HAL_HCD_MspInit+0x74>)
 800b864:	f7f5 fc52 	bl	800110c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b868:	4a10      	ldr	r2, [pc, #64]	; (800b8ac <HAL_HCD_MspInit+0x78>)
 800b86a:	4b10      	ldr	r3, [pc, #64]	; (800b8ac <HAL_HCD_MspInit+0x78>)
 800b86c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b86e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b872:	6353      	str	r3, [r2, #52]	; 0x34
 800b874:	2300      	movs	r3, #0
 800b876:	60bb      	str	r3, [r7, #8]
 800b878:	4a0c      	ldr	r2, [pc, #48]	; (800b8ac <HAL_HCD_MspInit+0x78>)
 800b87a:	4b0c      	ldr	r3, [pc, #48]	; (800b8ac <HAL_HCD_MspInit+0x78>)
 800b87c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b87e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b882:	6453      	str	r3, [r2, #68]	; 0x44
 800b884:	4b09      	ldr	r3, [pc, #36]	; (800b8ac <HAL_HCD_MspInit+0x78>)
 800b886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b88c:	60bb      	str	r3, [r7, #8]
 800b88e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 800b890:	2200      	movs	r2, #0
 800b892:	2101      	movs	r1, #1
 800b894:	2043      	movs	r0, #67	; 0x43
 800b896:	f7f5 f8f6 	bl	8000a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b89a:	2043      	movs	r0, #67	; 0x43
 800b89c:	f7f5 f90f 	bl	8000abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b8a0:	bf00      	nop
 800b8a2:	3720      	adds	r7, #32
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	40020000 	.word	0x40020000
 800b8ac:	40023800 	.word	0x40023800

0800b8b0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7fe fa0f 	bl	8009ce2 <USBH_LL_IncTimer>
}
 800b8c4:	bf00      	nop
 800b8c6:	3708      	adds	r7, #8
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7fe fa2b 	bl	8009d36 <USBH_LL_Connect>
}
 800b8e0:	bf00      	nop
 800b8e2:	3708      	adds	r7, #8
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7fe fa43 	bl	8009d82 <USBH_LL_Disconnect>
}
 800b8fc:	bf00      	nop
 800b8fe:	3708      	adds	r7, #8
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	460b      	mov	r3, r1
 800b90e:	70fb      	strb	r3, [r7, #3]
 800b910:	4613      	mov	r3, r2
 800b912:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b914:	bf00      	nop
 800b916:	370c      	adds	r7, #12
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr

0800b920 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f893 375c 	ldrb.w	r3, [r3, #1884]	; 0x75c
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d12c      	bne.n	800b98c <USBH_LL_Init+0x6c>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b932:	4a19      	ldr	r2, [pc, #100]	; (800b998 <USBH_LL_Init+0x78>)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  phost->pData = &hhcd_USB_OTG_FS;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a16      	ldr	r2, [pc, #88]	; (800b998 <USBH_LL_Init+0x78>)
 800b93e:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b942:	4b15      	ldr	r3, [pc, #84]	; (800b998 <USBH_LL_Init+0x78>)
 800b944:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b948:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b94a:	4b13      	ldr	r3, [pc, #76]	; (800b998 <USBH_LL_Init+0x78>)
 800b94c:	2208      	movs	r2, #8
 800b94e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b950:	4b11      	ldr	r3, [pc, #68]	; (800b998 <USBH_LL_Init+0x78>)
 800b952:	2203      	movs	r2, #3
 800b954:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b956:	4b10      	ldr	r3, [pc, #64]	; (800b998 <USBH_LL_Init+0x78>)
 800b958:	2200      	movs	r2, #0
 800b95a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b95c:	4b0e      	ldr	r3, [pc, #56]	; (800b998 <USBH_LL_Init+0x78>)
 800b95e:	2202      	movs	r2, #2
 800b960:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b962:	4b0d      	ldr	r3, [pc, #52]	; (800b998 <USBH_LL_Init+0x78>)
 800b964:	2200      	movs	r2, #0
 800b966:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b968:	480b      	ldr	r0, [pc, #44]	; (800b998 <USBH_LL_Init+0x78>)
 800b96a:	f7f5 fd9e 	bl	80014aa <HAL_HCD_Init>
 800b96e:	4603      	mov	r3, r0
 800b970:	2b00      	cmp	r3, #0
 800b972:	d003      	beq.n	800b97c <USBH_LL_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800b974:	21df      	movs	r1, #223	; 0xdf
 800b976:	4809      	ldr	r0, [pc, #36]	; (800b99c <USBH_LL_Init+0x7c>)
 800b978:	f7ff fdd0 	bl	800b51c <_Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b97c:	4806      	ldr	r0, [pc, #24]	; (800b998 <USBH_LL_Init+0x78>)
 800b97e:	f7f6 f980 	bl	8001c82 <HAL_HCD_GetCurrentFrame>
 800b982:	4603      	mov	r3, r0
 800b984:	4619      	mov	r1, r3
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f7fe f99c 	bl	8009cc4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b98c:	2300      	movs	r3, #0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3708      	adds	r7, #8
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	20000ab4 	.word	0x20000ab4
 800b99c:	0800c024 	.word	0x0800c024

0800b9a0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Start(phost->pData);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7f6 f900 	bl	8001bbc <HAL_HCD_Start>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b9c0:	7bbb      	ldrb	r3, [r7, #14]
 800b9c2:	2b03      	cmp	r3, #3
 800b9c4:	d816      	bhi.n	800b9f4 <USBH_LL_Start+0x54>
 800b9c6:	a201      	add	r2, pc, #4	; (adr r2, 800b9cc <USBH_LL_Start+0x2c>)
 800b9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9cc:	0800b9dd 	.word	0x0800b9dd
 800b9d0:	0800b9e3 	.word	0x0800b9e3
 800b9d4:	0800b9e9 	.word	0x0800b9e9
 800b9d8:	0800b9ef 	.word	0x0800b9ef
    case HAL_OK :
      usb_status = USBH_OK;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	73fb      	strb	r3, [r7, #15]
    break;
 800b9e0:	e00b      	b.n	800b9fa <USBH_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b9e2:	2302      	movs	r3, #2
 800b9e4:	73fb      	strb	r3, [r7, #15]
    break;
 800b9e6:	e008      	b.n	800b9fa <USBH_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b9ec:	e005      	b.n	800b9fa <USBH_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b9ee:	2302      	movs	r3, #2
 800b9f0:	73fb      	strb	r3, [r7, #15]
    break;
 800b9f2:	e002      	b.n	800b9fa <USBH_LL_Start+0x5a>
    default :
      usb_status = USBH_FAIL;
 800b9f4:	2302      	movs	r3, #2
 800b9f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b9f8:	bf00      	nop
  }
  return usb_status;
 800b9fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3710      	adds	r7, #16
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba10:	2300      	movs	r3, #0
 800ba12:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7f6 f8f1 	bl	8001c02 <HAL_HCD_Stop>
 800ba20:	4603      	mov	r3, r0
 800ba22:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ba24:	7bbb      	ldrb	r3, [r7, #14]
 800ba26:	2b03      	cmp	r3, #3
 800ba28:	d816      	bhi.n	800ba58 <USBH_LL_Stop+0x54>
 800ba2a:	a201      	add	r2, pc, #4	; (adr r2, 800ba30 <USBH_LL_Stop+0x2c>)
 800ba2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba30:	0800ba41 	.word	0x0800ba41
 800ba34:	0800ba47 	.word	0x0800ba47
 800ba38:	0800ba4d 	.word	0x0800ba4d
 800ba3c:	0800ba53 	.word	0x0800ba53
    case HAL_OK :
      usb_status = USBH_OK;
 800ba40:	2300      	movs	r3, #0
 800ba42:	73fb      	strb	r3, [r7, #15]
    break;
 800ba44:	e00b      	b.n	800ba5e <USBH_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ba46:	2302      	movs	r3, #2
 800ba48:	73fb      	strb	r3, [r7, #15]
    break;
 800ba4a:	e008      	b.n	800ba5e <USBH_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba50:	e005      	b.n	800ba5e <USBH_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ba52:	2302      	movs	r3, #2
 800ba54:	73fb      	strb	r3, [r7, #15]
    break;
 800ba56:	e002      	b.n	800ba5e <USBH_LL_Stop+0x5a>
    default :
      usb_status = USBH_FAIL;
 800ba58:	2302      	movs	r3, #2
 800ba5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba5c:	bf00      	nop
  }
  return usb_status;
 800ba5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ba70:	2301      	movs	r3, #1
 800ba72:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7f6 f90f 	bl	8001c9e <HAL_HCD_GetCurrentSpeed>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d007      	beq.n	800ba96 <USBH_LL_GetSpeed+0x2e>
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d302      	bcc.n	800ba90 <USBH_LL_GetSpeed+0x28>
 800ba8a:	2b02      	cmp	r3, #2
 800ba8c:	d006      	beq.n	800ba9c <USBH_LL_GetSpeed+0x34>
 800ba8e:	e008      	b.n	800baa2 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ba90:	2300      	movs	r3, #0
 800ba92:	73fb      	strb	r3, [r7, #15]
    break;
 800ba94:	e008      	b.n	800baa8 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ba96:	2301      	movs	r3, #1
 800ba98:	73fb      	strb	r3, [r7, #15]
    break;
 800ba9a:	e005      	b.n	800baa8 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ba9c:	2302      	movs	r3, #2
 800ba9e:	73fb      	strb	r3, [r7, #15]
    break;
 800baa0:	e002      	b.n	800baa8 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800baa2:	2301      	movs	r3, #1
 800baa4:	73fb      	strb	r3, [r7, #15]
    break;
 800baa6:	bf00      	nop
  }
  return  speed;
 800baa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
	...

0800bab4 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800babc:	2300      	movs	r3, #0
 800babe:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bac0:	2300      	movs	r3, #0
 800bac2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 800baca:	4618      	mov	r0, r3
 800bacc:	f7f6 f8b6 	bl	8001c3c <HAL_HCD_ResetPort>
 800bad0:	4603      	mov	r3, r0
 800bad2:	73bb      	strb	r3, [r7, #14]
  switch (hal_status) {
 800bad4:	7bbb      	ldrb	r3, [r7, #14]
 800bad6:	2b03      	cmp	r3, #3
 800bad8:	d816      	bhi.n	800bb08 <USBH_LL_ResetPort+0x54>
 800bada:	a201      	add	r2, pc, #4	; (adr r2, 800bae0 <USBH_LL_ResetPort+0x2c>)
 800badc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae0:	0800baf1 	.word	0x0800baf1
 800bae4:	0800baf7 	.word	0x0800baf7
 800bae8:	0800bafd 	.word	0x0800bafd
 800baec:	0800bb03 	.word	0x0800bb03
    case HAL_OK :
      usb_status = USBH_OK;
 800baf0:	2300      	movs	r3, #0
 800baf2:	73fb      	strb	r3, [r7, #15]
    break;
 800baf4:	e00b      	b.n	800bb0e <USBH_LL_ResetPort+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800baf6:	2302      	movs	r3, #2
 800baf8:	73fb      	strb	r3, [r7, #15]
    break;
 800bafa:	e008      	b.n	800bb0e <USBH_LL_ResetPort+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bafc:	2301      	movs	r3, #1
 800bafe:	73fb      	strb	r3, [r7, #15]
    break;
 800bb00:	e005      	b.n	800bb0e <USBH_LL_ResetPort+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bb02:	2302      	movs	r3, #2
 800bb04:	73fb      	strb	r3, [r7, #15]
    break;
 800bb06:	e002      	b.n	800bb0e <USBH_LL_ResetPort+0x5a>
    default :
      usb_status = USBH_FAIL;
 800bb08:	2302      	movs	r3, #2
 800bb0a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb0c:	bf00      	nop
  }
  return usb_status;
 800bb0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3710      	adds	r7, #16
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bb18:	b590      	push	{r4, r7, lr}
 800bb1a:	b089      	sub	sp, #36	; 0x24
 800bb1c:	af04      	add	r7, sp, #16
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	4608      	mov	r0, r1
 800bb22:	4611      	mov	r1, r2
 800bb24:	461a      	mov	r2, r3
 800bb26:	4603      	mov	r3, r0
 800bb28:	70fb      	strb	r3, [r7, #3]
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	70bb      	strb	r3, [r7, #2]
 800bb2e:	4613      	mov	r3, r2
 800bb30:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb32:	2300      	movs	r3, #0
 800bb34:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb36:	2300      	movs	r3, #0
 800bb38:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8d3 0760 	ldr.w	r0, [r3, #1888]	; 0x760
 800bb40:	787c      	ldrb	r4, [r7, #1]
 800bb42:	78ba      	ldrb	r2, [r7, #2]
 800bb44:	78f9      	ldrb	r1, [r7, #3]
 800bb46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bb48:	9302      	str	r3, [sp, #8]
 800bb4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bb4e:	9301      	str	r3, [sp, #4]
 800bb50:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb54:	9300      	str	r3, [sp, #0]
 800bb56:	4623      	mov	r3, r4
 800bb58:	f7f5 fcf3 	bl	8001542 <HAL_HCD_HC_Init>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	73bb      	strb	r3, [r7, #14]
                               dev_address, speed, ep_type, mps);

  switch (hal_status) {
 800bb60:	7bbb      	ldrb	r3, [r7, #14]
 800bb62:	2b03      	cmp	r3, #3
 800bb64:	d816      	bhi.n	800bb94 <USBH_LL_OpenPipe+0x7c>
 800bb66:	a201      	add	r2, pc, #4	; (adr r2, 800bb6c <USBH_LL_OpenPipe+0x54>)
 800bb68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb6c:	0800bb7d 	.word	0x0800bb7d
 800bb70:	0800bb83 	.word	0x0800bb83
 800bb74:	0800bb89 	.word	0x0800bb89
 800bb78:	0800bb8f 	.word	0x0800bb8f
    case HAL_OK :
      usb_status = USBH_OK;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	73fb      	strb	r3, [r7, #15]
    break;
 800bb80:	e00b      	b.n	800bb9a <USBH_LL_OpenPipe+0x82>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bb82:	2302      	movs	r3, #2
 800bb84:	73fb      	strb	r3, [r7, #15]
    break;
 800bb86:	e008      	b.n	800bb9a <USBH_LL_OpenPipe+0x82>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb8c:	e005      	b.n	800bb9a <USBH_LL_OpenPipe+0x82>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bb8e:	2302      	movs	r3, #2
 800bb90:	73fb      	strb	r3, [r7, #15]
    break;
 800bb92:	e002      	b.n	800bb9a <USBH_LL_OpenPipe+0x82>
    default :
      usb_status = USBH_FAIL;
 800bb94:	2302      	movs	r3, #2
 800bb96:	73fb      	strb	r3, [r7, #15]
    break;
 800bb98:	bf00      	nop
  }
  return usb_status;
 800bb9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3714      	adds	r7, #20
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd90      	pop	{r4, r7, pc}

0800bba4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	460b      	mov	r3, r1
 800bbae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 800bbbe:	78fa      	ldrb	r2, [r7, #3]
 800bbc0:	4611      	mov	r1, r2
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7f5 fd44 	bl	8001650 <HAL_HCD_HC_Halt>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bbcc:	7bbb      	ldrb	r3, [r7, #14]
 800bbce:	2b03      	cmp	r3, #3
 800bbd0:	d816      	bhi.n	800bc00 <USBH_LL_ClosePipe+0x5c>
 800bbd2:	a201      	add	r2, pc, #4	; (adr r2, 800bbd8 <USBH_LL_ClosePipe+0x34>)
 800bbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd8:	0800bbe9 	.word	0x0800bbe9
 800bbdc:	0800bbef 	.word	0x0800bbef
 800bbe0:	0800bbf5 	.word	0x0800bbf5
 800bbe4:	0800bbfb 	.word	0x0800bbfb
    case HAL_OK :
      usb_status = USBH_OK;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	73fb      	strb	r3, [r7, #15]
    break;
 800bbec:	e00b      	b.n	800bc06 <USBH_LL_ClosePipe+0x62>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bbee:	2302      	movs	r3, #2
 800bbf0:	73fb      	strb	r3, [r7, #15]
    break;
 800bbf2:	e008      	b.n	800bc06 <USBH_LL_ClosePipe+0x62>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	73fb      	strb	r3, [r7, #15]
    break;
 800bbf8:	e005      	b.n	800bc06 <USBH_LL_ClosePipe+0x62>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bbfa:	2302      	movs	r3, #2
 800bbfc:	73fb      	strb	r3, [r7, #15]
    break;
 800bbfe:	e002      	b.n	800bc06 <USBH_LL_ClosePipe+0x62>
    default :
      usb_status = USBH_FAIL;
 800bc00:	2302      	movs	r3, #2
 800bc02:	73fb      	strb	r3, [r7, #15]
    break;
 800bc04:	bf00      	nop
  }
  return usb_status;
 800bc06:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3710      	adds	r7, #16
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bc10:	b590      	push	{r4, r7, lr}
 800bc12:	b089      	sub	sp, #36	; 0x24
 800bc14:	af04      	add	r7, sp, #16
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	4608      	mov	r0, r1
 800bc1a:	4611      	mov	r1, r2
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	4603      	mov	r3, r0
 800bc20:	70fb      	strb	r3, [r7, #3]
 800bc22:	460b      	mov	r3, r1
 800bc24:	70bb      	strb	r3, [r7, #2]
 800bc26:	4613      	mov	r3, r2
 800bc28:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8d3 0760 	ldr.w	r0, [r3, #1888]	; 0x760
 800bc38:	787c      	ldrb	r4, [r7, #1]
 800bc3a:	78ba      	ldrb	r2, [r7, #2]
 800bc3c:	78f9      	ldrb	r1, [r7, #3]
 800bc3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bc42:	9303      	str	r3, [sp, #12]
 800bc44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bc46:	9302      	str	r3, [sp, #8]
 800bc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4a:	9301      	str	r3, [sp, #4]
 800bc4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bc50:	9300      	str	r3, [sp, #0]
 800bc52:	4623      	mov	r3, r4
 800bc54:	f7f5 fd20 	bl	8001698 <HAL_HCD_HC_SubmitRequest>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	73bb      	strb	r3, [r7, #14]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  switch (hal_status) {
 800bc5c:	7bbb      	ldrb	r3, [r7, #14]
 800bc5e:	2b03      	cmp	r3, #3
 800bc60:	d816      	bhi.n	800bc90 <USBH_LL_SubmitURB+0x80>
 800bc62:	a201      	add	r2, pc, #4	; (adr r2, 800bc68 <USBH_LL_SubmitURB+0x58>)
 800bc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc68:	0800bc79 	.word	0x0800bc79
 800bc6c:	0800bc7f 	.word	0x0800bc7f
 800bc70:	0800bc85 	.word	0x0800bc85
 800bc74:	0800bc8b 	.word	0x0800bc8b
    case HAL_OK :
      usb_status = USBH_OK;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc7c:	e00b      	b.n	800bc96 <USBH_LL_SubmitURB+0x86>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bc7e:	2302      	movs	r3, #2
 800bc80:	73fb      	strb	r3, [r7, #15]
    break;
 800bc82:	e008      	b.n	800bc96 <USBH_LL_SubmitURB+0x86>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bc84:	2301      	movs	r3, #1
 800bc86:	73fb      	strb	r3, [r7, #15]
    break;
 800bc88:	e005      	b.n	800bc96 <USBH_LL_SubmitURB+0x86>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bc8a:	2302      	movs	r3, #2
 800bc8c:	73fb      	strb	r3, [r7, #15]
    break;
 800bc8e:	e002      	b.n	800bc96 <USBH_LL_SubmitURB+0x86>
    default :
      usb_status = USBH_FAIL;
 800bc90:	2302      	movs	r3, #2
 800bc92:	73fb      	strb	r3, [r7, #15]
    break;
 800bc94:	bf00      	nop
  }
  return usb_status;
 800bc96:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3714      	adds	r7, #20
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd90      	pop	{r4, r7, pc}

0800bca0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	460b      	mov	r3, r1
 800bcaa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 800bcb2:	78fa      	ldrb	r2, [r7, #3]
 800bcb4:	4611      	mov	r1, r2
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7f5 ffce 	bl	8001c58 <HAL_HCD_HC_GetURBState>
 800bcbc:	4603      	mov	r3, r0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3708      	adds	r7, #8
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}

0800bcc6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bcc6:	b580      	push	{r7, lr}
 800bcc8:	b082      	sub	sp, #8
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
 800bcce:	460b      	mov	r3, r1
 800bcd0:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800bcd2:	20c8      	movs	r0, #200	; 0xc8
 800bcd4:	f7f4 fde0 	bl	8000898 <HAL_Delay>
  return USBH_OK;
 800bcd8:	2300      	movs	r3, #0
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3708      	adds	r7, #8
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}

0800bce2 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bce2:	b480      	push	{r7}
 800bce4:	b085      	sub	sp, #20
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
 800bcea:	460b      	mov	r3, r1
 800bcec:	70fb      	strb	r3, [r7, #3]
 800bcee:	4613      	mov	r3, r2
 800bcf0:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 800bcf8:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bcfa:	78fa      	ldrb	r2, [r7, #3]
 800bcfc:	68f9      	ldr	r1, [r7, #12]
 800bcfe:	4613      	mov	r3, r2
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	4413      	add	r3, r2
 800bd04:	00db      	lsls	r3, r3, #3
 800bd06:	440b      	add	r3, r1
 800bd08:	333b      	adds	r3, #59	; 0x3b
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d00a      	beq.n	800bd26 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bd10:	78fa      	ldrb	r2, [r7, #3]
 800bd12:	68f9      	ldr	r1, [r7, #12]
 800bd14:	4613      	mov	r3, r2
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	4413      	add	r3, r2
 800bd1a:	00db      	lsls	r3, r3, #3
 800bd1c:	440b      	add	r3, r1
 800bd1e:	3350      	adds	r3, #80	; 0x50
 800bd20:	78ba      	ldrb	r2, [r7, #2]
 800bd22:	701a      	strb	r2, [r3, #0]
 800bd24:	e009      	b.n	800bd3a <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bd26:	78fa      	ldrb	r2, [r7, #3]
 800bd28:	68f9      	ldr	r1, [r7, #12]
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	4413      	add	r3, r2
 800bd30:	00db      	lsls	r3, r3, #3
 800bd32:	440b      	add	r3, r1
 800bd34:	3351      	adds	r3, #81	; 0x51
 800bd36:	78ba      	ldrb	r2, [r7, #2]
 800bd38:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bd3a:	2300      	movs	r3, #0
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3714      	adds	r7, #20
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr

0800bd48 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f7f4 fda1 	bl	8000898 <HAL_Delay>
}
 800bd56:	bf00      	nop
 800bd58:	3708      	adds	r7, #8
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
	...

0800bd60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800bd60:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bd98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800bd64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800bd66:	e003      	b.n	800bd70 <LoopCopyDataInit>

0800bd68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800bd68:	4b0c      	ldr	r3, [pc, #48]	; (800bd9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800bd6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800bd6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800bd6e:	3104      	adds	r1, #4

0800bd70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800bd70:	480b      	ldr	r0, [pc, #44]	; (800bda0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800bd72:	4b0c      	ldr	r3, [pc, #48]	; (800bda4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800bd74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800bd76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800bd78:	d3f6      	bcc.n	800bd68 <CopyDataInit>
  ldr  r2, =_sbss
 800bd7a:	4a0b      	ldr	r2, [pc, #44]	; (800bda8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800bd7c:	e002      	b.n	800bd84 <LoopFillZerobss>

0800bd7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800bd7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800bd80:	f842 3b04 	str.w	r3, [r2], #4

0800bd84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800bd84:	4b09      	ldr	r3, [pc, #36]	; (800bdac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800bd86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800bd88:	d3f9      	bcc.n	800bd7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800bd8a:	f7ff fcc9 	bl	800b720 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bd8e:	f000 f811 	bl	800bdb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bd92:	f7ff f9b9 	bl	800b108 <main>
  bx  lr    
 800bd96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800bd98:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800bd9c:	0800c1d0 	.word	0x0800c1d0
  ldr  r0, =_sdata
 800bda0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800bda4:	200000e4 	.word	0x200000e4
  ldr  r2, =_sbss
 800bda8:	200000e4 	.word	0x200000e4
  ldr  r3, = _ebss
 800bdac:	20000d50 	.word	0x20000d50

0800bdb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bdb0:	e7fe      	b.n	800bdb0 <ADC_IRQHandler>
	...

0800bdb4 <__libc_init_array>:
 800bdb4:	b570      	push	{r4, r5, r6, lr}
 800bdb6:	4e0d      	ldr	r6, [pc, #52]	; (800bdec <__libc_init_array+0x38>)
 800bdb8:	4c0d      	ldr	r4, [pc, #52]	; (800bdf0 <__libc_init_array+0x3c>)
 800bdba:	1ba4      	subs	r4, r4, r6
 800bdbc:	10a4      	asrs	r4, r4, #2
 800bdbe:	2500      	movs	r5, #0
 800bdc0:	42a5      	cmp	r5, r4
 800bdc2:	d109      	bne.n	800bdd8 <__libc_init_array+0x24>
 800bdc4:	4e0b      	ldr	r6, [pc, #44]	; (800bdf4 <__libc_init_array+0x40>)
 800bdc6:	4c0c      	ldr	r4, [pc, #48]	; (800bdf8 <__libc_init_array+0x44>)
 800bdc8:	f000 f908 	bl	800bfdc <_init>
 800bdcc:	1ba4      	subs	r4, r4, r6
 800bdce:	10a4      	asrs	r4, r4, #2
 800bdd0:	2500      	movs	r5, #0
 800bdd2:	42a5      	cmp	r5, r4
 800bdd4:	d105      	bne.n	800bde2 <__libc_init_array+0x2e>
 800bdd6:	bd70      	pop	{r4, r5, r6, pc}
 800bdd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bddc:	4798      	blx	r3
 800bdde:	3501      	adds	r5, #1
 800bde0:	e7ee      	b.n	800bdc0 <__libc_init_array+0xc>
 800bde2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bde6:	4798      	blx	r3
 800bde8:	3501      	adds	r5, #1
 800bdea:	e7f2      	b.n	800bdd2 <__libc_init_array+0x1e>
 800bdec:	0800c1c8 	.word	0x0800c1c8
 800bdf0:	0800c1c8 	.word	0x0800c1c8
 800bdf4:	0800c1c8 	.word	0x0800c1c8
 800bdf8:	0800c1cc 	.word	0x0800c1cc

0800bdfc <malloc>:
 800bdfc:	4b02      	ldr	r3, [pc, #8]	; (800be08 <malloc+0xc>)
 800bdfe:	4601      	mov	r1, r0
 800be00:	6818      	ldr	r0, [r3, #0]
 800be02:	f000 b86d 	b.w	800bee0 <_malloc_r>
 800be06:	bf00      	nop
 800be08:	20000080 	.word	0x20000080

0800be0c <free>:
 800be0c:	4b02      	ldr	r3, [pc, #8]	; (800be18 <free+0xc>)
 800be0e:	4601      	mov	r1, r0
 800be10:	6818      	ldr	r0, [r3, #0]
 800be12:	f000 b817 	b.w	800be44 <_free_r>
 800be16:	bf00      	nop
 800be18:	20000080 	.word	0x20000080

0800be1c <memcpy>:
 800be1c:	b510      	push	{r4, lr}
 800be1e:	1e43      	subs	r3, r0, #1
 800be20:	440a      	add	r2, r1
 800be22:	4291      	cmp	r1, r2
 800be24:	d100      	bne.n	800be28 <memcpy+0xc>
 800be26:	bd10      	pop	{r4, pc}
 800be28:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be30:	e7f7      	b.n	800be22 <memcpy+0x6>

0800be32 <memset>:
 800be32:	4402      	add	r2, r0
 800be34:	4603      	mov	r3, r0
 800be36:	4293      	cmp	r3, r2
 800be38:	d100      	bne.n	800be3c <memset+0xa>
 800be3a:	4770      	bx	lr
 800be3c:	f803 1b01 	strb.w	r1, [r3], #1
 800be40:	e7f9      	b.n	800be36 <memset+0x4>
	...

0800be44 <_free_r>:
 800be44:	b538      	push	{r3, r4, r5, lr}
 800be46:	4605      	mov	r5, r0
 800be48:	2900      	cmp	r1, #0
 800be4a:	d045      	beq.n	800bed8 <_free_r+0x94>
 800be4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be50:	1f0c      	subs	r4, r1, #4
 800be52:	2b00      	cmp	r3, #0
 800be54:	bfb8      	it	lt
 800be56:	18e4      	addlt	r4, r4, r3
 800be58:	f000 f8b0 	bl	800bfbc <__malloc_lock>
 800be5c:	4a1f      	ldr	r2, [pc, #124]	; (800bedc <_free_r+0x98>)
 800be5e:	6813      	ldr	r3, [r2, #0]
 800be60:	4610      	mov	r0, r2
 800be62:	b933      	cbnz	r3, 800be72 <_free_r+0x2e>
 800be64:	6063      	str	r3, [r4, #4]
 800be66:	6014      	str	r4, [r2, #0]
 800be68:	4628      	mov	r0, r5
 800be6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be6e:	f000 b8a6 	b.w	800bfbe <__malloc_unlock>
 800be72:	42a3      	cmp	r3, r4
 800be74:	d90c      	bls.n	800be90 <_free_r+0x4c>
 800be76:	6821      	ldr	r1, [r4, #0]
 800be78:	1862      	adds	r2, r4, r1
 800be7a:	4293      	cmp	r3, r2
 800be7c:	bf04      	itt	eq
 800be7e:	681a      	ldreq	r2, [r3, #0]
 800be80:	685b      	ldreq	r3, [r3, #4]
 800be82:	6063      	str	r3, [r4, #4]
 800be84:	bf04      	itt	eq
 800be86:	1852      	addeq	r2, r2, r1
 800be88:	6022      	streq	r2, [r4, #0]
 800be8a:	6004      	str	r4, [r0, #0]
 800be8c:	e7ec      	b.n	800be68 <_free_r+0x24>
 800be8e:	4613      	mov	r3, r2
 800be90:	685a      	ldr	r2, [r3, #4]
 800be92:	b10a      	cbz	r2, 800be98 <_free_r+0x54>
 800be94:	42a2      	cmp	r2, r4
 800be96:	d9fa      	bls.n	800be8e <_free_r+0x4a>
 800be98:	6819      	ldr	r1, [r3, #0]
 800be9a:	1858      	adds	r0, r3, r1
 800be9c:	42a0      	cmp	r0, r4
 800be9e:	d10b      	bne.n	800beb8 <_free_r+0x74>
 800bea0:	6820      	ldr	r0, [r4, #0]
 800bea2:	4401      	add	r1, r0
 800bea4:	1858      	adds	r0, r3, r1
 800bea6:	4282      	cmp	r2, r0
 800bea8:	6019      	str	r1, [r3, #0]
 800beaa:	d1dd      	bne.n	800be68 <_free_r+0x24>
 800beac:	6810      	ldr	r0, [r2, #0]
 800beae:	6852      	ldr	r2, [r2, #4]
 800beb0:	605a      	str	r2, [r3, #4]
 800beb2:	4401      	add	r1, r0
 800beb4:	6019      	str	r1, [r3, #0]
 800beb6:	e7d7      	b.n	800be68 <_free_r+0x24>
 800beb8:	d902      	bls.n	800bec0 <_free_r+0x7c>
 800beba:	230c      	movs	r3, #12
 800bebc:	602b      	str	r3, [r5, #0]
 800bebe:	e7d3      	b.n	800be68 <_free_r+0x24>
 800bec0:	6820      	ldr	r0, [r4, #0]
 800bec2:	1821      	adds	r1, r4, r0
 800bec4:	428a      	cmp	r2, r1
 800bec6:	bf04      	itt	eq
 800bec8:	6811      	ldreq	r1, [r2, #0]
 800beca:	6852      	ldreq	r2, [r2, #4]
 800becc:	6062      	str	r2, [r4, #4]
 800bece:	bf04      	itt	eq
 800bed0:	1809      	addeq	r1, r1, r0
 800bed2:	6021      	streq	r1, [r4, #0]
 800bed4:	605c      	str	r4, [r3, #4]
 800bed6:	e7c7      	b.n	800be68 <_free_r+0x24>
 800bed8:	bd38      	pop	{r3, r4, r5, pc}
 800beda:	bf00      	nop
 800bedc:	20000110 	.word	0x20000110

0800bee0 <_malloc_r>:
 800bee0:	b570      	push	{r4, r5, r6, lr}
 800bee2:	1ccd      	adds	r5, r1, #3
 800bee4:	f025 0503 	bic.w	r5, r5, #3
 800bee8:	3508      	adds	r5, #8
 800beea:	2d0c      	cmp	r5, #12
 800beec:	bf38      	it	cc
 800beee:	250c      	movcc	r5, #12
 800bef0:	2d00      	cmp	r5, #0
 800bef2:	4606      	mov	r6, r0
 800bef4:	db01      	blt.n	800befa <_malloc_r+0x1a>
 800bef6:	42a9      	cmp	r1, r5
 800bef8:	d903      	bls.n	800bf02 <_malloc_r+0x22>
 800befa:	230c      	movs	r3, #12
 800befc:	6033      	str	r3, [r6, #0]
 800befe:	2000      	movs	r0, #0
 800bf00:	bd70      	pop	{r4, r5, r6, pc}
 800bf02:	f000 f85b 	bl	800bfbc <__malloc_lock>
 800bf06:	4a23      	ldr	r2, [pc, #140]	; (800bf94 <_malloc_r+0xb4>)
 800bf08:	6814      	ldr	r4, [r2, #0]
 800bf0a:	4621      	mov	r1, r4
 800bf0c:	b991      	cbnz	r1, 800bf34 <_malloc_r+0x54>
 800bf0e:	4c22      	ldr	r4, [pc, #136]	; (800bf98 <_malloc_r+0xb8>)
 800bf10:	6823      	ldr	r3, [r4, #0]
 800bf12:	b91b      	cbnz	r3, 800bf1c <_malloc_r+0x3c>
 800bf14:	4630      	mov	r0, r6
 800bf16:	f000 f841 	bl	800bf9c <_sbrk_r>
 800bf1a:	6020      	str	r0, [r4, #0]
 800bf1c:	4629      	mov	r1, r5
 800bf1e:	4630      	mov	r0, r6
 800bf20:	f000 f83c 	bl	800bf9c <_sbrk_r>
 800bf24:	1c43      	adds	r3, r0, #1
 800bf26:	d126      	bne.n	800bf76 <_malloc_r+0x96>
 800bf28:	230c      	movs	r3, #12
 800bf2a:	6033      	str	r3, [r6, #0]
 800bf2c:	4630      	mov	r0, r6
 800bf2e:	f000 f846 	bl	800bfbe <__malloc_unlock>
 800bf32:	e7e4      	b.n	800befe <_malloc_r+0x1e>
 800bf34:	680b      	ldr	r3, [r1, #0]
 800bf36:	1b5b      	subs	r3, r3, r5
 800bf38:	d41a      	bmi.n	800bf70 <_malloc_r+0x90>
 800bf3a:	2b0b      	cmp	r3, #11
 800bf3c:	d90f      	bls.n	800bf5e <_malloc_r+0x7e>
 800bf3e:	600b      	str	r3, [r1, #0]
 800bf40:	50cd      	str	r5, [r1, r3]
 800bf42:	18cc      	adds	r4, r1, r3
 800bf44:	4630      	mov	r0, r6
 800bf46:	f000 f83a 	bl	800bfbe <__malloc_unlock>
 800bf4a:	f104 000b 	add.w	r0, r4, #11
 800bf4e:	1d23      	adds	r3, r4, #4
 800bf50:	f020 0007 	bic.w	r0, r0, #7
 800bf54:	1ac3      	subs	r3, r0, r3
 800bf56:	d01b      	beq.n	800bf90 <_malloc_r+0xb0>
 800bf58:	425a      	negs	r2, r3
 800bf5a:	50e2      	str	r2, [r4, r3]
 800bf5c:	bd70      	pop	{r4, r5, r6, pc}
 800bf5e:	428c      	cmp	r4, r1
 800bf60:	bf0d      	iteet	eq
 800bf62:	6863      	ldreq	r3, [r4, #4]
 800bf64:	684b      	ldrne	r3, [r1, #4]
 800bf66:	6063      	strne	r3, [r4, #4]
 800bf68:	6013      	streq	r3, [r2, #0]
 800bf6a:	bf18      	it	ne
 800bf6c:	460c      	movne	r4, r1
 800bf6e:	e7e9      	b.n	800bf44 <_malloc_r+0x64>
 800bf70:	460c      	mov	r4, r1
 800bf72:	6849      	ldr	r1, [r1, #4]
 800bf74:	e7ca      	b.n	800bf0c <_malloc_r+0x2c>
 800bf76:	1cc4      	adds	r4, r0, #3
 800bf78:	f024 0403 	bic.w	r4, r4, #3
 800bf7c:	42a0      	cmp	r0, r4
 800bf7e:	d005      	beq.n	800bf8c <_malloc_r+0xac>
 800bf80:	1a21      	subs	r1, r4, r0
 800bf82:	4630      	mov	r0, r6
 800bf84:	f000 f80a 	bl	800bf9c <_sbrk_r>
 800bf88:	3001      	adds	r0, #1
 800bf8a:	d0cd      	beq.n	800bf28 <_malloc_r+0x48>
 800bf8c:	6025      	str	r5, [r4, #0]
 800bf8e:	e7d9      	b.n	800bf44 <_malloc_r+0x64>
 800bf90:	bd70      	pop	{r4, r5, r6, pc}
 800bf92:	bf00      	nop
 800bf94:	20000110 	.word	0x20000110
 800bf98:	20000114 	.word	0x20000114

0800bf9c <_sbrk_r>:
 800bf9c:	b538      	push	{r3, r4, r5, lr}
 800bf9e:	4c06      	ldr	r4, [pc, #24]	; (800bfb8 <_sbrk_r+0x1c>)
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	4605      	mov	r5, r0
 800bfa4:	4608      	mov	r0, r1
 800bfa6:	6023      	str	r3, [r4, #0]
 800bfa8:	f000 f80a 	bl	800bfc0 <_sbrk>
 800bfac:	1c43      	adds	r3, r0, #1
 800bfae:	d102      	bne.n	800bfb6 <_sbrk_r+0x1a>
 800bfb0:	6823      	ldr	r3, [r4, #0]
 800bfb2:	b103      	cbz	r3, 800bfb6 <_sbrk_r+0x1a>
 800bfb4:	602b      	str	r3, [r5, #0]
 800bfb6:	bd38      	pop	{r3, r4, r5, pc}
 800bfb8:	20000d4c 	.word	0x20000d4c

0800bfbc <__malloc_lock>:
 800bfbc:	4770      	bx	lr

0800bfbe <__malloc_unlock>:
 800bfbe:	4770      	bx	lr

0800bfc0 <_sbrk>:
 800bfc0:	4b04      	ldr	r3, [pc, #16]	; (800bfd4 <_sbrk+0x14>)
 800bfc2:	6819      	ldr	r1, [r3, #0]
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	b909      	cbnz	r1, 800bfcc <_sbrk+0xc>
 800bfc8:	4903      	ldr	r1, [pc, #12]	; (800bfd8 <_sbrk+0x18>)
 800bfca:	6019      	str	r1, [r3, #0]
 800bfcc:	6818      	ldr	r0, [r3, #0]
 800bfce:	4402      	add	r2, r0
 800bfd0:	601a      	str	r2, [r3, #0]
 800bfd2:	4770      	bx	lr
 800bfd4:	20000118 	.word	0x20000118
 800bfd8:	20000d50 	.word	0x20000d50

0800bfdc <_init>:
 800bfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfde:	bf00      	nop
 800bfe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfe2:	bc08      	pop	{r3}
 800bfe4:	469e      	mov	lr, r3
 800bfe6:	4770      	bx	lr

0800bfe8 <_fini>:
 800bfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfea:	bf00      	nop
 800bfec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfee:	bc08      	pop	{r3}
 800bff0:	469e      	mov	lr, r3
 800bff2:	4770      	bx	lr
